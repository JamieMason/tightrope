"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7126],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,d=c["".concat(p,".").concat(m)]||c[m]||f[m]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={id:"filter",title:"filter",tags:["generator","transducer"]},o=void 0,l={unversionedId:"api/gen/filter",id:"api/gen/filter",title:"filter",description:"Only yield each value which passes the predicate.",source:"@site/docs/api/gen/filter.mdx",sourceDirName:"api/gen",slug:"/api/gen/filter",permalink:"/tightrope/api/gen/filter",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/gen/filter.mdx",tags:[{label:"generator",permalink:"/tightrope/tags/generator"},{label:"transducer",permalink:"/tightrope/tags/transducer"}],version:"current",frontMatter:{id:"filter",title:"filter",tags:["generator","transducer"]},sidebar:"sidebar",previous:{title:"Generators",permalink:"/tightrope/api/gen"},next:{title:"map",permalink:"/tightrope/api/gen/map"}},p={},s=[{value:"Example",id:"example",level:2}],u={toc:s},c="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Only ",(0,a.kt)("inlineCode",{parentName:"p"},"yield")," each value which passes the predicate."),(0,a.kt)("p",null,"A higher-order function that takes a function as its argument and returns a new function that can be used to filter\nvalues from a generator."),(0,a.kt)("p",null,"The returned function takes a generator as its argument and returns a new generator that only yields the values that\npass the filter function."),(0,a.kt)("p",null,"The filter function applies the filter function to each value generated by the input generator, and only yields the\nvalues for which the filter function returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". Any values for which the filter function returns ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," are\ndiscarded."),(0,a.kt)("p",null,"In summary, the filter function is a powerful tool for working with generators in JavaScript and TypeScript. By using\nit to filter values from a generator, we can easily create new generators that yield only the values that meet our\nspecific criteria. This can help us write more efficient and focused code, and can make it easier to work with large\nor complex data sets."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"In this example, we then use the ",(0,a.kt)("inlineCode",{parentName:"p"},"pipe")," function to create a pipeline of generators and filters."),(0,a.kt)("p",null,"We start with the ",(0,a.kt)("inlineCode",{parentName:"p"},"range")," function, which generates a sequence of numbers starting from ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," and ending at ",(0,a.kt)("inlineCode",{parentName:"p"},"100"),"\n(inclusive). We then apply the ",(0,a.kt)("inlineCode",{parentName:"p"},"filter")," function to the pipeline to filter out even numbers using the ",(0,a.kt)("inlineCode",{parentName:"p"},"isEvenNumber"),"\nguard function, and then apply the ",(0,a.kt)("inlineCode",{parentName:"p"},"take")," function to limit the number of values generated to ",(0,a.kt)("inlineCode",{parentName:"p"},"5"),"."),(0,a.kt)("p",null,"Finally, we use a ",(0,a.kt)("inlineCode",{parentName:"p"},"for...of")," loop to iterate over the 5 even numbers generated by the pipeline, and log them to the\nconsole."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'tightrope/fn/pipe';\nimport { filter } from 'tightrope/gen/filter';\nimport { range } from 'tightrope/gen/range';\nimport { take } from 'tightrope/gen/take';\nimport { isEvenNumber } from 'tightrope/guard/is-even-number';\n\nconst evenNumbers = pipe(range(0, 100), filter(isEvenNumber), take(5));\n\nfor (const value of evenNumbers) {\n  console.log(value);\n  // 0\n  // 2\n  // 4\n  // 6\n  // 8\n}\n")))}f.isMDXComponent=!0}}]);