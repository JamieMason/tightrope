"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[648],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(r),d=a,f=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1734:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={id:"index",title:"Result",tags:["result","type"]},o=void 0,p={unversionedId:"api/result/index",id:"api/result/index",title:"Result",description:"Result is a type that represents either success (Ok) or failure (Err).",source:"@site/docs/api/result/index.mdx",sourceDirName:"api/result",slug:"/api/result/",permalink:"/tightrope/api/result/",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/result/index.mdx",tags:[{label:"result",permalink:"/tightrope/tags/result"},{label:"type",permalink:"/tightrope/tags/type"}],version:"current",frontMatter:{id:"index",title:"Result",tags:["result","type"]},sidebar:"sidebar",previous:{title:"fromTry",permalink:"/tightrope/api/result/from-try"},next:{title:"isErr",permalink:"/tightrope/api/result/is-err"}},l={},s=[],u={toc:s},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Result"))," is a type that represents either success (",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/ok"},(0,a.kt)("inlineCode",{parentName:"a"},"Ok")),") or failure (",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/err"},(0,a.kt)("inlineCode",{parentName:"a"},"Err")),")."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Result<T, E>")," is the type used for returning and propagating errors. It is\nan enum with the variants, ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok(T)"),", representing success and containing a\nvalue, and ",(0,a.kt)("inlineCode",{parentName:"p"},"Err(E)"),", representing error and containing an error value."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"Result")," allows you to construct a pipeline of commands that handle both the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," variants. This is useful for handling errors and branching\nbased on whether the previous operation was successful or not.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Other terminology you might have heard:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Result")," is sometimes referred to as ",(0,a.kt)("inlineCode",{parentName:"li"},"Either"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Ok")," is sometimes referred to as ",(0,a.kt)("inlineCode",{parentName:"li"},"Right"),' or "the happy path".'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Err")," is sometimes referred to as ",(0,a.kt)("inlineCode",{parentName:"li"},"Left"),' or "the sad path".'))))}m.isMDXComponent=!0}}]);