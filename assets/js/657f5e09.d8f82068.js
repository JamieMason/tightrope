"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8996],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=m(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||i;return n?a.createElement(h,o(o({ref:t},s),{},{components:n})):a.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:r,o[1]=p;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const i={id:"map",title:"map"},o=void 0,p={unversionedId:"api/result/map",id:"api/result/map",title:"map",description:"Summary",source:"@site/docs/api/result/map.mdx",sourceDirName:"api/result",slug:"/api/result/map",permalink:"/tightrope/api/result/map",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/result/map.mdx",tags:[],version:"current",frontMatter:{id:"map",title:"map"},sidebar:"sidebar",previous:{title:"iter",permalink:"/tightrope/api/result/iter"},next:{title:"mapErr",permalink:"/tightrope/api/result/map-err"}},l={},m=[{value:"Summary",id:"summary",level:2},{value:"Example",id:"example",level:2},{value:"See also",id:"see-also",level:2}],s={toc:m},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/tightrope/api/result/map"},(0,r.kt)("inlineCode",{parentName:"a"},"map"))," is a function that is used to transform the value inside a ",(0,r.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,r.kt)("inlineCode",{parentName:"a"},"Result")),"\nobject's ",(0,r.kt)("a",{parentName:"p",href:"/tightrope/api/result/ok"},(0,r.kt)("inlineCode",{parentName:"a"},"Ok"))," variant. It takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"mapFn")," function as its argument, which\ntakes the current ",(0,r.kt)("inlineCode",{parentName:"p"},"Ok")," value and returns a new value. The ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," function then\nreturns a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," object containing the transformed value. If the\noriginal ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," object was an ",(0,r.kt)("a",{parentName:"p",href:"/tightrope/api/result/err"},(0,r.kt)("inlineCode",{parentName:"a"},"Err")),", ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," will return the original ",(0,r.kt)("inlineCode",{parentName:"p"},"Err"),"\nwithout calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"mapFn")," function."),(0,r.kt)("p",null,"In other words, ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," allows you to transform the contents of an ",(0,r.kt)("inlineCode",{parentName:"p"},"Ok")," variant\nof a ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," object, while leaving an ",(0,r.kt)("inlineCode",{parentName:"p"},"Err")," variant unchanged. It's useful\nwhen you need to apply a function to a value inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," object without\nchanging the structure of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," object itself."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"In this example, ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," is used twice in the ",(0,r.kt)("inlineCode",{parentName:"p"},"pipe")," function to transform the\nvalue inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ok")," variant of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," object. The final ",(0,r.kt)("inlineCode",{parentName:"p"},"Result"),"\nobject contains the result of applying both functions to the original value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'tightrope/fn/pipe';\nimport { multiply } from 'tightrope/number/multiply';\nimport { sum } from 'tightrope/number/sum';\nimport { fromSuccess } from 'tightrope/result/from-success';\nimport { map } from 'tightrope/result/map';\nimport { unwrap } from 'tightrope/result/unwrap';\n\nconst value: number = pipe(\n  fromSuccess(2),\n  map(sum(5)),\n  map(multiply(2)),\n  unwrap,\n);\n\nconsole.log(value); // Output: 14\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Both ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," and ",(0,r.kt)("a",{parentName:"p",href:"/tightrope/api/result/and-then"},(0,r.kt)("inlineCode",{parentName:"a"},"andThen"))," are functions used to transform the value inside a\n",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," object. The difference between them is that ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"map")," transforms the\nvalue inside the ",(0,r.kt)("inlineCode",{parentName:"strong"},"Ok")," variant")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," object, while ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"andThen"),"\ntransforms the ",(0,r.kt)("inlineCode",{parentName:"strong"},"Ok")," variant itself"),"."),(0,r.kt)("p",{parentName:"admonition"},"When your function returns a value, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," to transform the value\ninside an ",(0,r.kt)("inlineCode",{parentName:"p"},"Ok")," variant.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"Result")," allows you to construct a pipeline of commands that handle both the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Ok")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Err")," variants. This is useful for handling errors and branching\nbased on whether the previous operation was successful or not.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"map")," runs on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ok")," variant. If any of the operations return an ",(0,r.kt)("inlineCode",{parentName:"p"},"Err"),"\nobject then ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," will skip and return the ",(0,r.kt)("inlineCode",{parentName:"p"},"Err"),"."),(0,r.kt)("p",{parentName:"admonition"},"This makes it easy to handle errors in a functional and composable way.")),(0,r.kt)("h2",{id:"see-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/core/result/enum.Result.html#method.map"},"https://doc.rust-lang.org/core/result/enum.Result.html#method.map"))))}c.isMDXComponent=!0}}]);