"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5768],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>c});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(r),d=a,c=m["".concat(p,".").concat(d)]||m[d]||k[d]||i;return r?n.createElement(c,o(o({ref:t},u),{},{components:r})):n.createElement(c,o({ref:t},u))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7903:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={id:"or",title:"or",tags:["errors","left-biased","recover","result","transform","transform-result"]},o=void 0,l={unversionedId:"api/result/or",id:"api/result/or",title:"or",description:"Like the || operator, but applied to Result types.",source:"@site/docs/api/result/or.mdx",sourceDirName:"api/result",slug:"/api/result/or",permalink:"/tightrope/api/result/or",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/result/or.mdx",tags:[{label:"errors",permalink:"/tightrope/tags/errors"},{label:"left-biased",permalink:"/tightrope/tags/left-biased"},{label:"recover",permalink:"/tightrope/tags/recover"},{label:"result",permalink:"/tightrope/tags/result"},{label:"transform",permalink:"/tightrope/tags/transform"},{label:"transform-result",permalink:"/tightrope/tags/transform-result"}],version:"current",frontMatter:{id:"or",title:"or",tags:["errors","left-biased","recover","result","transform","transform-result"]},sidebar:"sidebar",previous:{title:"ok",permalink:"/tightrope/api/result/ok"},next:{title:"orElse",permalink:"/tightrope/api/result/or-else"}},p={},s=[{value:"Behaviour",id:"behaviour",level:2},{value:"Example",id:"example",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"See also",id:"see-also",level:2}],u={toc:s},m="wrapper";function k(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Like the ",(0,a.kt)("inlineCode",{parentName:"p"},"||")," operator, but applied to ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Result"))," types."),(0,a.kt)("p",null,"You should use ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/or"},(0,a.kt)("inlineCode",{parentName:"a"},"or"))," when you want a simple fallback ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object without any additional transformation. For\nexample, if you want to return a default ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Ok"))," value if a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object is ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Err")),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"or")," is a function that takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object as its argument, and returns either the same ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object, or\nanother ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object passed as an argument to ",(0,a.kt)("inlineCode",{parentName:"p"},"or"),", depending on whether the first ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object is an ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," or\nan ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok"),"."),(0,a.kt)("p",null,"If the first ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object is an ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok"),", it is returned as is, otherwise the second ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object passed as an\nargument is returned."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Both ",(0,a.kt)("inlineCode",{parentName:"p"},"or")," and ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/or-else"},(0,a.kt)("inlineCode",{parentName:"a"},"orElse"))," can be used to provide fallback behavior for ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," cases in a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object. However, ",(0,a.kt)("inlineCode",{parentName:"p"},"or"),"\nreturns the provided fallback ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object directly, while ",(0,a.kt)("inlineCode",{parentName:"p"},"orElse")," applies a function to transform the ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," case\nbefore returning the fallback ",(0,a.kt)("inlineCode",{parentName:"p"},"Result"),".")),(0,a.kt)("h2",{id:"behaviour"},"Behaviour"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"or")," behaves just like the ",(0,a.kt)("inlineCode",{parentName:"p"},"||")," operator, but for support of ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," types:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Scenario"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Pseudocode"),(0,a.kt)("th",{parentName:"tr",align:null},"Outcome"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"Ok OR Err")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"pipe(Ok, or(Err))")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Ok"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"Err OR Ok")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"pipe(Err, or(Ok))")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Ok"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"Err1 OR Err2")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"pipe(Err1, or(Err2))")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Err2"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"Ok1 OR Ok2")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"pipe(Ok1, or(Ok2))")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Ok1")," (first Ok wins)")))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Here's an example demonstrating each scenario"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'tightrope/fn/pipe';\nimport { Err } from 'tightrope/result';\nimport { Ok } from 'tightrope/result';\nimport { or } from 'tightrope/result/or';\n\nconst err1 = new Err('Error 1');\nconst err2 = new Err('Error 2');\nconst ok1 = new Ok('Success 1');\nconst ok2 = new Ok('Success 2');\n\n// Scenario 1: Ok || Err => Ok\nconst res1 = pipe(ok1, or(err1)); // Returns Ok('Success 1')\n\n// Scenario 2: Err || Ok => Ok\nconst res2 = pipe(err1, or(ok1)); // Returns Ok('Success 1')\n\n// Scenario 3: Err1 || Err2 => Err2\nconst res3 = pipe(err1, or(err2)); // Returns Err('Error 2')\n\n// Scenario 4: Ok1 || Ok2 => Ok1\nconst res4 = pipe(ok1, or(ok2)); // Returns Ok('Success 1')\n")),(0,a.kt)("h2",{id:"use-cases"},"Use Cases"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Providing a fallback value"),": provide a fallback value or a default ",(0,a.kt)("inlineCode",{parentName:"li"},"Result")," in case the initial ",(0,a.kt)("inlineCode",{parentName:"li"},"Result")," is an\n",(0,a.kt)("inlineCode",{parentName:"li"},"Err"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Chaining operations"),": chain operations together, allowing for more concise code."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Error handling"),": handle different types of errors in a single place."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Simplifying branching logic"),": simplify branching logic and reduce the number of nested ",(0,a.kt)("inlineCode",{parentName:"li"},"if")," statements.")),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://jamiemason.github.io/tightrope/api/result/or-else"},"https://jamiemason.github.io/tightrope/api/result/or-else")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://jamiemason.github.io/tightrope/api/result/and"},"https://jamiemason.github.io/tightrope/api/result/and")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/core/result/enum.Result.html#method.or"},"https://doc.rust-lang.org/core/result/enum.Result.html#method.or")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://mobily.github.io/ts-belt/api/result#recover"},"https://mobily.github.io/ts-belt/api/result#recover"))))}k.isMDXComponent=!0}}]);