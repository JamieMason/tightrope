"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[648],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1734:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={},o=void 0,l={unversionedId:"api/result/index",id:"api/result/index",title:"index",description:"Ok",source:"@site/docs/api/result/index.mdx",sourceDirName:"api/result",slug:"/api/result/",permalink:"/tightrope/api/result/",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/result/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"fromTry",permalink:"/tightrope/api/result/from-try"},next:{title:"isErr",permalink:"/tightrope/api/result/is-err"}},s={},p=[{value:"Ok",id:"ok",level:2},{value:"Example",id:"example",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"Err",id:"err",level:2},{value:"Example",id:"example-1",level:3},{value:"Use Cases",id:"use-cases-1",level:3},{value:"Result",id:"result",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"ok"},"Ok"),(0,a.kt)("p",null,"tags: ","[class, result, wrap]"),(0,a.kt)("p",null,"Represent a correct value in the ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Result"))," type."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"Here is how to create one directly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Ok } from 'tightrope/result';\n\nconst value = new Ok('Success!');\n")),(0,a.kt)("p",null,"You can check if a value is an ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Ok"))," instance by using the ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/is-ok"},(0,a.kt)("inlineCode",{parentName:"a"},"isOk"))," function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { isOk } from 'tightrope/result/is-ok';\n\nconst value = new Ok('Success!');\nconsole.log(isOk(value)); // true\nconsole.log(isOk('foo')); // false\nconsole.log(isOk('Success! but this is not inside an Ok')); // false\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," instances are usually returned from functions that can fail or encounter an error, and are combined with ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok"),"\ninstances using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," type."),(0,a.kt)("h3",{id:"use-cases"},"Use Cases"),(0,a.kt)("p",null,"Creating an ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," instance directly is useful when you want to represent an error in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case."),(0,a.kt)("p",null,"For example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," instance directly with the error message or code you want to use. This can give you\nmore control over the specific errors that your application can encounter and how they are handled."),(0,a.kt)("p",null,"Another use case for creating an ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," instance directly with a specific error message or code, you\ncan test how your application handles that error condition and ensure that it behaves as expected."),(0,a.kt)("h2",{id:"err"},"Err"),(0,a.kt)("p",null,"tags: ","[class, errors, result, wrap]"),(0,a.kt)("p",null,"Represent an erroneous value in the ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Result"))," type."),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("p",null,"Here is how to create one directly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Err } from 'tightrope/result';\n\nconst error = new Err(new Error('Something went wrong.'));\n")),(0,a.kt)("p",null,"You can check if a value is an ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Err"))," instance by using the ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/is-err"},(0,a.kt)("inlineCode",{parentName:"a"},"isErr"))," function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { isErr } from 'tightrope/result/is-err';\n\nconst error = new Err(new Error('Something went wrong.'));\nconsole.log(isErr(error)); // true\nconsole.log(isErr('foo')); // false\nconsole.log(isErr(new Error('not the same thing'))); // false\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Err")," instances are usually returned from functions that can fail or encounter an error, and are combined with ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Ok")),"\ninstances using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," type."),(0,a.kt)("h3",{id:"use-cases-1"},"Use Cases"),(0,a.kt)("p",null,"Creating an ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," instance directly is useful when you want to represent an error in your program without having to\ngo through a pipeline or helper method that might not always be available or suitable for your specific use case."),(0,a.kt)("p",null,"For example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," instance directly with the error message or code you want to use. This can give\nyou more control over the specific errors that your application can encounter and how they are handled."),(0,a.kt)("p",null,"Another use case for creating an ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," instance directly with a specific error message or code,\nyou can test how your application handles that error condition and ensure that it behaves as expected."),(0,a.kt)("h2",{id:"result"},"Result"),(0,a.kt)("p",null,"tags: ","[result, type]"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Result"))," is a type that represents either success (",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Ok")),") or failure (",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Err")),")."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Result<T, E>")," is the type used for returning and propagating errors. It is an enum with the variants, ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok(T)"),",\nrepresenting success and containing a value, and ",(0,a.kt)("inlineCode",{parentName:"p"},"Err(E)"),", representing error and containing an error value."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"Result")," allows you to construct a pipeline of commands that handle both the ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Other terminology you might have heard:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Result")," is sometimes referred to as ",(0,a.kt)("inlineCode",{parentName:"li"},"Either"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Ok")," is sometimes referred to as ",(0,a.kt)("inlineCode",{parentName:"li"},"Right"),' or "the happy path".'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Err")," is sometimes referred to as ",(0,a.kt)("inlineCode",{parentName:"li"},"Left"),' or "the sad path".'))))}d.isMDXComponent=!0}}]);