"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3056],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=u(n),f=a,d=s["".concat(l,".").concat(f)]||s[f]||m[f]||i;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[s]="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4158:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={id:"curry",title:"curry",tags:["composition"]},o=void 0,c={unversionedId:"api/fn/curry",id:"api/fn/curry",title:"curry",description:"Convert a function into one that can be called multiple times with a subset of the total arguments.",source:"@site/docs/api/fn/curry.mdx",sourceDirName:"api/fn",slug:"/api/fn/curry",permalink:"/tightrope/api/fn/curry",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/fn/curry.mdx",tags:[{label:"composition",permalink:"/tightrope/tags/composition"}],version:"current",frontMatter:{id:"curry",title:"curry",tags:["composition"]},sidebar:"sidebar",previous:{title:"Function",permalink:"/tightrope/api/fn"},next:{title:"flow",permalink:"/tightrope/api/fn/flow"}},l={},u=[{value:"Example",id:"example",level:2}],p={toc:u},s="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Convert a function into one that can be called multiple times with a subset of the total arguments."),(0,a.kt)("p",null,"A higher-order function that takes a function as its first argument and an optional ",(0,a.kt)("inlineCode",{parentName:"p"},"arity")," parameter indicating the\nnumber of arguments that the function expects. It returns a new function that can be partially applied, meaning that\nit can be called with some of its arguments, and then returns a new function that expects the remaining arguments."),(0,a.kt)("p",null,"It takes two parameters, ",(0,a.kt)("inlineCode",{parentName:"p"},"fn")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"arity"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"fn")," is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"F"),", which is a generic type parameter that extends\n",(0,a.kt)("inlineCode",{parentName:"p"},"AnyFn"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"AnyFn")," is a type alias for a function that takes any number of arguments and returns any value. arity is\noptional and defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"fn.length"),", which is the number of arguments that ",(0,a.kt)("inlineCode",{parentName:"p"},"fn")," expects."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"In this example, we first define a function add that takes 3 arguments and returns their sum. We then use the ",(0,a.kt)("inlineCode",{parentName:"p"},"curry"),"\nfunction to create a new function ",(0,a.kt)("inlineCode",{parentName:"p"},"curriedAdd")," that is a curried version of ",(0,a.kt)("inlineCode",{parentName:"p"},"add"),". We can then call ",(0,a.kt)("inlineCode",{parentName:"p"},"curriedAdd")," with\nless than all of the arguments it expects, each time creating new functions that expect the remaining arguments."),(0,a.kt)("p",null,"Finally, we call the final function with all arguments to get the result."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { curry } from 'tightrope/fn/curry';\n\n// Define a function to be curried\nfunction add(a: number, b: number, c: number): number {\n  return a + b + c;\n}\n\n// Use curry to create a new function that can be partially applied\nconst curriedAdd = curry(add);\n\n// Call the new function with partial arguments\nconst add1 = curriedAdd(1); // returns a new function that expects 2 more arguments\nconst add2 = add1(2); // returns a new function that expects 1 more argument\n\n// Call the final function with all arguments\nconst result = add2(3); // returns 6\n")))}m.isMDXComponent=!0}}]);