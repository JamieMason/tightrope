"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[648],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=l(r),f=i,m=c["".concat(s,".").concat(f)]||c[f]||d[f]||a;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=f;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:i,o[1]=p;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},1734:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const a={id:"index",title:"Result"},o=void 0,p={unversionedId:"api/result/index",id:"api/result/index",title:"Result",description:"Result is a type that represents either success (Ok) or failure (Err).",source:"@site/docs/api/result/index.mdx",sourceDirName:"api/result",slug:"/api/result/",permalink:"/tightrope/api/result/",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/result/index.mdx",tags:[],version:"current",frontMatter:{id:"index",title:"Result"},sidebar:"sidebar",previous:{title:"fromTry",permalink:"/tightrope/api/result/from-try"},next:{title:"isErr",permalink:"/tightrope/api/result/is-err"}},s={},l=[],u={toc:l},c="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Result")," is a type that represents either success (",(0,i.kt)("inlineCode",{parentName:"p"},"Ok"),") or failure (",(0,i.kt)("inlineCode",{parentName:"p"},"Err"),")."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Result<T, E>")," is the type used for returning and propagating errors. It is\nan enum with the variants, ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok(T)"),", representing success and containing a\nvalue, and ",(0,i.kt)("inlineCode",{parentName:"p"},"Err(E)"),", representing error and containing an error value."))}d.isMDXComponent=!0}}]);