"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8839],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(n),m=i,d=c["".concat(l,".").concat(m)]||c[m]||f[m]||o;return n?r.createElement(d,a(a({ref:t},u),{},{components:n})):r.createElement(d,a({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:i,a[1]=p;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9165:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={id:"pipe",title:"pipe",tags:["composition"]},a=void 0,p={unversionedId:"api/fn/pipe",id:"api/fn/pipe",title:"pipe",description:"Takes a value and passes it through a sequence of functions in left-to-right order.",source:"@site/docs/api/fn/pipe.mdx",sourceDirName:"api/fn",slug:"/api/fn/pipe",permalink:"/tightrope/api/fn/pipe",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/fn/pipe.mdx",tags:[{label:"composition",permalink:"/tightrope/tags/composition"}],version:"current",frontMatter:{id:"pipe",title:"pipe",tags:["composition"]},sidebar:"sidebar",previous:{title:"noOp",permalink:"/tightrope/api/fn/no-op"},next:{title:"types",permalink:"/tightrope/api/fn/types"}},l={},s=[{value:"Example",id:"example",level:2}],u={toc:s},c="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Takes a value and passes it through a sequence of functions in left-to-right order."),(0,i.kt)("p",null,"A Function that takes an initial value of any type (",(0,i.kt)("inlineCode",{parentName:"p"},"unknown"),"), followed by any number of functions as arguments. It\nreturns the result of passing the initial value through each of the functions, one by one, in the order that they\nwere passed in. It provides a way to easily chain together multiple functions in a pipeline, where the output of each\nfunction becomes the input for the next one."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"In this example, we have three functions: ",(0,i.kt)("inlineCode",{parentName:"p"},"add"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"multiply"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"square"),". We want to pass a value through these\nfunctions in a specific order and get the final result."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'tightrope/fn/pipe';\nimport { add } from 'tightrope/number/add';\nimport { multiply } from 'tightrope/number/multiply';\nimport { square } from 'tightrope/number/square';\n\nconst result = pipe(2, add(3), multiply(4), square);\n\nconsole.log(result); // Output: 400\n")))}f.isMDXComponent=!0}}]);