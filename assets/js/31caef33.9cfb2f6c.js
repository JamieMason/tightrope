"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6906],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5909:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={id:"iter",title:"iter"},o=void 0,l={unversionedId:"api/result/iter",id:"api/result/iter",title:"iter",description:"Summary",source:"@site/docs/api/result/iter.mdx",sourceDirName:"api/result",slug:"/api/result/iter",permalink:"/tightrope/api/result/iter",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/result/iter.mdx",tags:[],version:"current",frontMatter:{id:"iter",title:"iter"},sidebar:"sidebar",previous:{title:"isResult",permalink:"/tightrope/api/result/is-result"},next:{title:"map",permalink:"/tightrope/api/result/map"}},p={},s=[{value:"Summary",id:"summary",level:2},{value:"Example",id:"example",level:2},{value:"See also",id:"see-also",level:2}],u={toc:s},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/iter"},(0,a.kt)("inlineCode",{parentName:"a"},"iter"))," function is used to create a generator that can iterate over the\n",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/ok"},(0,a.kt)("inlineCode",{parentName:"a"},"Ok"))," variant of a ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Result"))," type. It takes in a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," as an argument and\nreturns a generator function that yields the ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," value if it exists. If the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," is an ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/err"},(0,a.kt)("inlineCode",{parentName:"a"},"Err")),", nothing is yielded."),(0,a.kt)("p",null,"To use the ",(0,a.kt)("inlineCode",{parentName:"p"},"iter")," function, you can call it and pass in a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," instance\nas an argument, and then iterate over the generated values using a ",(0,a.kt)("inlineCode",{parentName:"p"},"for...of"),"\nloop or any other method that can consume a generator."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"In this example:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The number ",(0,a.kt)("inlineCode",{parentName:"li"},"42")," is passed through the ",(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/from-success"},(0,a.kt)("inlineCode",{parentName:"a"},"fromSuccess"))," function to create an\n",(0,a.kt)("inlineCode",{parentName:"li"},"Ok")," variant of ",(0,a.kt)("inlineCode",{parentName:"li"},"Result"),"."),(0,a.kt)("li",{parentName:"ol"},"Next, the ",(0,a.kt)("inlineCode",{parentName:"li"},"iter")," function is used to create a generator that will yield the\nvalue inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"Ok")," variant."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/map"},(0,a.kt)("inlineCode",{parentName:"a"},"map"))," function from the ",(0,a.kt)("inlineCode",{parentName:"li"},"tightrope/gen")," module is then used to multiply\nthe yielded value by ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),"."),(0,a.kt)("li",{parentName:"ol"},"Finally, the generator is iterated through using a ",(0,a.kt)("inlineCode",{parentName:"li"},"for...of")," loop, and each\nyielded value is logged to the console. In this case, the value ",(0,a.kt)("inlineCode",{parentName:"li"},"84")," is\nlogged to the console.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'tightrope/fn/pipe';\nimport { iter } from 'tightrope/result/iter';\nimport { fromSuccess } from 'tightrope/result/from-success';\nimport { map } from 'tightrope/gen/map';\nimport { multiply } from 'tightrope/number/multiply';\n\nconst gen = pipe(42, fromSuccess, iter(), map(multiply(2)));\n\nfor (const value of gen) {\n  console.log(value); // outputs: 84\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," is not an ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok"),", nothing will be yielded, so the ",(0,a.kt)("inlineCode",{parentName:"p"},"for...of"),"\nloop will not execute.")),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"))))}c.isMDXComponent=!0}}]);