"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[278],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(r),d=a,f=c["".concat(u,".").concat(d)]||c[d]||m[d]||o;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4352:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={id:"unwrap",title:"unwrap"},i=void 0,l={unversionedId:"api/result/unwrap",id:"api/result/unwrap",title:"unwrap",description:"Summary",source:"@site/docs/api/result/unwrap.mdx",sourceDirName:"api/result",slug:"/api/result/unwrap",permalink:"/tightrope/api/result/unwrap",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/result/unwrap.mdx",tags:[],version:"current",frontMatter:{id:"unwrap",title:"unwrap"},sidebar:"sidebar",previous:{title:"orElse",permalink:"/tightrope/api/result/or-else"},next:{title:"unwrapErr",permalink:"/tightrope/api/result/unwrap-err"}},u={},p=[{value:"Summary",id:"summary",level:2},{value:"Example",id:"example",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"See also",id:"see-also",level:2}],s={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"In this example, we define a function called ",(0,a.kt)("inlineCode",{parentName:"p"},"divide")," that takes two numbers\nand returns a ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Result"))," type. If the second number is zero, it returns an\n",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/err"},(0,a.kt)("inlineCode",{parentName:"a"},"Err"))," type with an error message. Otherwise, it returns an ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/ok"},(0,a.kt)("inlineCode",{parentName:"a"},"Ok"))," type with the\nresult of the division."),(0,a.kt)("p",null,"We then call the ",(0,a.kt)("inlineCode",{parentName:"p"},"divide")," function twice with different arguments and store\nthe results in ",(0,a.kt)("inlineCode",{parentName:"p"},"result1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"result2"),". We use the ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/unwrap"},(0,a.kt)("inlineCode",{parentName:"a"},"unwrap"))," function to\nextract the value from the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," type. In the first case, the value is\nextracted successfully and printed to the console. In the second case, an\nerror is thrown because we are trying to extract the value from an ",(0,a.kt)("inlineCode",{parentName:"p"},"Err"),"\ntype."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import type { Result } from 'tightrope/result';\nimport { Err } from 'tightrope/result/err';\nimport { Ok } from 'tightrope/result/ok';\nimport { unwrap } from 'tightrope/result/unwrap';\n\nfunction divide(a: number, b: number): Result<number, string> {\n  return b === 0 ? new Err('Cannot divide by zero') : new Ok(a / b);\n}\n\nconst result1 = divide(10, 2);\nconsole.log(unwrap(result1)); // Output: 5\n\nconst result2 = divide(10, 0);\nconsole.log(unwrap(result2)); // Throws: Error: Cannot divide by zero\n")),(0,a.kt)("h2",{id:"use-cases"},"Use Cases"),(0,a.kt)("p",null,"Common use cases for ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap")," include:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Extracting the value from a ",(0,a.kt)("inlineCode",{parentName:"li"},"Result")," object when you are certain that it is\nsafe to do so."),(0,a.kt)("li",{parentName:"ol"},"Extracting the value from a ",(0,a.kt)("inlineCode",{parentName:"li"},"Result")," object when you have handled all error\ncases and want to ensure that the value is present.")),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap"},"https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap"))))}m.isMDXComponent=!0}}]);