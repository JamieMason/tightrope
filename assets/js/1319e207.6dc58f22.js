"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1440],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),f=r,d=m["".concat(p,".").concat(f)]||m[f]||c[f]||o;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1432:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={id:"map",title:"map"},i=void 0,l={unversionedId:"api/gen/map",id:"api/gen/map",title:"map",description:"A higher-order function that takes a function as its argument and returns a",source:"@site/docs/api/gen/map.mdx",sourceDirName:"api/gen",slug:"/api/gen/map",permalink:"/ts-lib/api/gen/map",draft:!1,editUrl:"https://github.com/JamieMason/ts-lib/tree/master/site/docs/api/gen/map.mdx",tags:[],version:"current",frontMatter:{id:"map",title:"map"},sidebar:"sidebar",previous:{title:"filter",permalink:"/ts-lib/api/gen/filter"},next:{title:"range",permalink:"/ts-lib/api/gen/range"}},p={},s=[],u={toc:s},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A higher-order function that takes a function as its argument and returns a\nnew function that can be used to transform values from a generator."),(0,r.kt)("p",null,"The returned function takes a generator as its argument and returns a new\ngenerator that yields the transformed values."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," function applies the transformation function to each value\ngenerated by the input generator, and yields the transformed values in the\noutput generator. The transformation function can be any function that takes\na single input value and returns a single output value of any type."),(0,r.kt)("p",null,"In summary, the ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," function is a powerful tool for working with generators\nin JavaScript and TypeScript. By using it to transform values from a\ngenerator, we can easily create new generators that yield the transformed\nvalues according to our specific criteria. This can help us write more\nefficient and focused code, and can make it easier to work with large or\ncomplex data sets."),(0,r.kt)("p",null,"In this example, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"pipe")," function to create a pipeline of\ngenerators and maps that double the values generated by the range function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'ts-lib/fn/pipe';\nimport { map } from 'ts-lib/gen/map';\nimport { multiply } from 'ts-lib/number/multiply';\nimport { range } from 'ts-lib/gen/range';\nimport { take } from 'ts-lib/gen/take';\n\nconst doubledNumbers = pipe(range(0, 100), map(multiply(2)), take(5));\n\nfor (const value of doubledNumbers) {\n  console.log(value);\n}\n")),(0,r.kt)("p",null,"We start with the ",(0,r.kt)("inlineCode",{parentName:"p"},"range")," function, which generates a sequence of numbers\nstarting from ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),". We then apply the ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," function to the pipeline to double\neach value generated by the ",(0,r.kt)("inlineCode",{parentName:"p"},"range")," function, and then apply the ",(0,r.kt)("inlineCode",{parentName:"p"},"take"),"\nfunction to limit the number of values generated to ",(0,r.kt)("inlineCode",{parentName:"p"},"5"),"."),(0,r.kt)("p",null,"Finally, we use a ",(0,r.kt)("inlineCode",{parentName:"p"},"for...of")," loop to iterate over the 5 doubled numbers\ngenerated by the pipeline, and log them to the console."),(0,r.kt)("p",null,"When we run this example, we should see the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// 2\n// 4\n// 6\n// 8\n// 10\n")),(0,r.kt)("p",null,"Common use cases for map:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Transforming data"),": transform data from one form to another. For example,\nwe can use map to convert an array of numbers into an array of strings, or\nto extract a specific property from an array of objects."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Computing values"),": compute new values based on existing values. For\nexample, we can use map to calculate the square of each number in an\narray, or to compute the distance between each pair of points in a set of\ncoordinates."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Reorganizing data"),": reorganize data into a different format by extracting\nor manipulating specific values. For example, we can use map to extract\nonly the names of a set of users from an array of user objects, or to\nextract only the titles of a set of books from an array of book objects."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Simplifying data"),": simplify complex data structures by extracting or\nmanipulating specific values. For example, we can use map to extract only\nthe numeric values from an array of mixed data types."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Generating new sequences"),": generate new sequences of values based on some\ninput data. For example, we can use map to generate a new array of values\nbased on some mathematical function, or to generate a new array of values\nbased on some conditional logic.")))}c.isMDXComponent=!0}}]);