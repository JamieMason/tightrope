"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1261],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(t),d=o,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return t?a.createElement(h,r(r({ref:n},u),{},{components:t})):a.createElement(h,r({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[c]="string"==typeof e?e:o,r[1]=p;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9951:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=t(7462),o=(t(7294),t(3905));const i={},r=void 0,p={unversionedId:"api/option/index",id:"api/option/index",title:"index",description:"Some",source:"@site/docs/api/option/index.mdx",sourceDirName:"api/option",slug:"/api/option/",permalink:"/tightrope/api/option/",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/option/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"fromGuard",permalink:"/tightrope/api/option/from-guard"},next:{title:"isNone",permalink:"/tightrope/api/option/is-none"}},l={},s=[{value:"Some",id:"some",level:2},{value:"Example",id:"example",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"none",id:"none",level:2},{value:"Example",id:"example-1",level:3},{value:"Use Cases",id:"use-cases-1",level:3},{value:"Option",id:"option",level:2}],u={toc:s},c="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"some"},"Some"),(0,o.kt)("p",null,"tags: ","[class, option, wrap]"),(0,o.kt)("p",null,"Represent a value in the ",(0,o.kt)("a",{parentName:"p",href:"/tightrope/api/option"},(0,o.kt)("inlineCode",{parentName:"a"},"Option"))," type."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"Here is how to create one directly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Some } from 'tightrope/option';\n\nconst value = new Some('Hello, world!');\n")),(0,o.kt)("p",null,"You can check if a value is a ",(0,o.kt)("a",{parentName:"p",href:"/tightrope/api/option"},(0,o.kt)("inlineCode",{parentName:"a"},"Some"))," instance by using the ",(0,o.kt)("a",{parentName:"p",href:"/tightrope/api/option/is-some"},(0,o.kt)("inlineCode",{parentName:"a"},"isSome"))," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { isSome } from 'tightrope/option/is-some';\n\nconst value = new Some('Hello, world!');\nconsole.log(isSome(value)); // true\nconsole.log(isSome('foo')); // false\nconsole.log(isSome('Hello, world! but this is not inside a Some')); // false\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Some")," instances are usually returned from functions that might not return a value, and are combined with ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),"\ninstances using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Option")," type."),(0,o.kt)("h3",{id:"use-cases"},"Use Cases"),(0,o.kt)("p",null,"Creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Some")," instance directly is useful when you want to represent a value in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case."),(0,o.kt)("p",null,"For example, if you're writing a custom value handler for your application and you need to represent a specific value\ncondition, you can create a ",(0,o.kt)("inlineCode",{parentName:"p"},"Some")," instance directly with the value you want to use. This can give you more control\nover the specific values that your application can encounter and how they are handled."),(0,o.kt)("p",null,"Another use case for creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Some")," instance directly is when you are writing tests for your application and you\nwant to simulate a value condition. By creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Some")," instance directly with a specific value, you can test how\nyour application handles that value condition and ensure that it behaves as expected."),(0,o.kt)("h2",{id:"none"},"none"),(0,o.kt)("p",null,"tags: ","[class, errors, option, wrap]"),(0,o.kt)("p",null,"Represent an absence of value in the ",(0,o.kt)("a",{parentName:"p",href:"/tightrope/api/option"},(0,o.kt)("inlineCode",{parentName:"a"},"Option"))," type."),(0,o.kt)("h3",{id:"example-1"},"Example"),(0,o.kt)("p",null,"You can check if a value is a ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," instance by using the ",(0,o.kt)("a",{parentName:"p",href:"/tightrope/api/option/is-none"},(0,o.kt)("inlineCode",{parentName:"a"},"isNone"))," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { isNone } from 'tightrope/option/is-none';\n\nconsole.log(isNone(none)); // true\nconsole.log(isNone('foo')); // false\nconsole.log(isNone(null)); // false\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"None")," instances are usually returned from functions that might not return a value, and are combined with ",(0,o.kt)("a",{parentName:"p",href:"/tightrope/api/option"},(0,o.kt)("inlineCode",{parentName:"a"},"Some")),"\ninstances using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Option")," type."),(0,o.kt)("h3",{id:"use-cases-1"},"Use Cases"),(0,o.kt)("p",null,"Referencing the ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," instance is useful when you want to represent an absence of value in your program without\nhaving to go through a pipeline or helper method that might not always be available or suitable for your specific use\ncase."),(0,o.kt)("p",null,"For example, if you're writing a custom value handler for your application and you need to represent a specific\nabsence of value condition, you can reference the ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," instance. This can give you more control over the specific\nvalue absences that your application can encounter and how they are handled."),(0,o.kt)("p",null,"Another use case for referencing the ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," instance is when you are writing tests for your application and you want\nto simulate a value absence condition. By referencing the ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," instance, you can test how your application handles\nthat value absence condition and ensure that it behaves as expected."),(0,o.kt)("h2",{id:"option"},"Option"),(0,o.kt)("p",null,"tags: ","[option, type]"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/tightrope/api/option"},(0,o.kt)("inlineCode",{parentName:"a"},"Option"))," is a type that represents either a value (",(0,o.kt)("a",{parentName:"p",href:"/tightrope/api/option"},(0,o.kt)("inlineCode",{parentName:"a"},"Some")),") or the absence of a value (",(0,o.kt)("inlineCode",{parentName:"p"},"None"),")."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Option<T>")," is the type used for expressing the possibility of the absence of a value. It is an enum with the\nvariants, ",(0,o.kt)("inlineCode",{parentName:"p"},"Some(T)"),", representing the presence of a value, and ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", representing the absence of a value."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"Option")," allows you to construct a pipeline of commands that handle both the ",(0,o.kt)("inlineCode",{parentName:"p"},"Some")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," variants. This is\nuseful for handling cases where a value might be missing or undefined, and branching based on whether the previous\noperation returned a value or not.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Other terminology you might have heard:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Option")," is sometimes referred to as ",(0,o.kt)("inlineCode",{parentName:"li"},"Maybe"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Some")," is sometimes referred to as ",(0,o.kt)("inlineCode",{parentName:"li"},"Just"),' or "the value path".'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"None")," is sometimes referred to as ",(0,o.kt)("inlineCode",{parentName:"li"},"Nothing"),' or "the empty path".'))))}m.isMDXComponent=!0}}]);