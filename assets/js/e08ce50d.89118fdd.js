"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6102],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(r),d=a,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return r?n.createElement(h,o(o({ref:t},s),{},{components:r})):n.createElement(h,o({ref:t},s))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},674:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const i={id:"get-value",title:"Get value from a Result"},o=void 0,l={unversionedId:"docs/result/get-value",id:"docs/result/get-value",title:"Get value from a Result",description:"The following methods will extract values which are contained within a",source:"@site/docs/docs/result/getting-value.md",sourceDirName:"docs/result",slug:"/docs/result/get-value",permalink:"/tightrope/docs/result/get-value",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/docs/result/getting-value.md",tags:[],version:"current",lastUpdatedBy:"Jamie Mason",lastUpdatedAt:1678813063,formattedLastUpdatedAt:"Mar 14, 2023",frontMatter:{id:"get-value",title:"Get value from a Result"},sidebar:"sidebar",previous:{title:"Installation",permalink:"/tightrope/docs/installation"},next:{title:"API",permalink:"/tightrope/api"}},p={},u=[],s={toc:u},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The following methods will extract values which are contained within a\n",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Result")),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/expect"},(0,a.kt)("inlineCode",{parentName:"a"},"expect"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/expect-err"},(0,a.kt)("inlineCode",{parentName:"a"},"expectErr"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/match"},(0,a.kt)("inlineCode",{parentName:"a"},"match"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/unwrap"},(0,a.kt)("inlineCode",{parentName:"a"},"unwrap"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/unwrap-err"},(0,a.kt)("inlineCode",{parentName:"a"},"unwrapErr"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/unwrap-or"},(0,a.kt)("inlineCode",{parentName:"a"},"unwrapOr"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/unwrap-or-else"},(0,a.kt)("inlineCode",{parentName:"a"},"unwrapOrElse")))),(0,a.kt)("p",null,"When choosing between these functions, it's important to consider the specific\nneeds of your code and the type of ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," you are working with."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If you want to extract the ",(0,a.kt)("inlineCode",{parentName:"li"},"Ok")," value from a ",(0,a.kt)("inlineCode",{parentName:"li"},"Result"),", you can use\n",(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/unwrap"},(0,a.kt)("inlineCode",{parentName:"a"},"unwrap"))," or\n",(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/expect"},(0,a.kt)("inlineCode",{parentName:"a"},"expect")),". The difference is that ",(0,a.kt)("inlineCode",{parentName:"li"},"expect"),"\nallows you to provide a custom error message if the ",(0,a.kt)("inlineCode",{parentName:"li"},"Result")," is an ",(0,a.kt)("inlineCode",{parentName:"li"},"Err"),",\nwhile ",(0,a.kt)("inlineCode",{parentName:"li"},"unwrap")," will throw a generic error message if the ",(0,a.kt)("inlineCode",{parentName:"li"},"Result")," is an ",(0,a.kt)("inlineCode",{parentName:"li"},"Err"),"."),(0,a.kt)("li",{parentName:"ul"},"If you want to extract the ",(0,a.kt)("inlineCode",{parentName:"li"},"Err")," value from a ",(0,a.kt)("inlineCode",{parentName:"li"},"Result"),", you can use\n",(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/unwrap-err"},(0,a.kt)("inlineCode",{parentName:"a"},"unwrapErr"))," or\n",(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/expect-err"},(0,a.kt)("inlineCode",{parentName:"a"},"expectErr")),". Again, the difference is that\n",(0,a.kt)("inlineCode",{parentName:"li"},"expectErr")," allows you to provide a custom error message if the ",(0,a.kt)("inlineCode",{parentName:"li"},"Result")," is an\n",(0,a.kt)("inlineCode",{parentName:"li"},"Ok"),", while ",(0,a.kt)("inlineCode",{parentName:"li"},"unwrapErr")," will throw a generic error message if the ",(0,a.kt)("inlineCode",{parentName:"li"},"Result")," is\nan ",(0,a.kt)("inlineCode",{parentName:"li"},"Ok"),"."),(0,a.kt)("li",{parentName:"ul"},"If you want to unwrap a ",(0,a.kt)("inlineCode",{parentName:"li"},"Result")," to either its ",(0,a.kt)("inlineCode",{parentName:"li"},"Ok")," value or a fallback value,\nyou can use ",(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/unwrap-or"},(0,a.kt)("inlineCode",{parentName:"a"},"unwrapOr")),"."),(0,a.kt)("li",{parentName:"ul"},"If you want to unwrap a ",(0,a.kt)("inlineCode",{parentName:"li"},"Result")," to either its ",(0,a.kt)("inlineCode",{parentName:"li"},"Ok")," value or a value returned\nby a function, you can use\n",(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/unwrap-or-else"},(0,a.kt)("inlineCode",{parentName:"a"},"unwrapOrElse")),"."),(0,a.kt)("li",{parentName:"ul"},"If you want to perform different operations depending on whether a ",(0,a.kt)("inlineCode",{parentName:"li"},"Result")," is\nan ",(0,a.kt)("inlineCode",{parentName:"li"},"Ok")," or an ",(0,a.kt)("inlineCode",{parentName:"li"},"Err"),", you can use ",(0,a.kt)("a",{parentName:"li",href:"/tightrope/api/result/match"},(0,a.kt)("inlineCode",{parentName:"a"},"match")),".")),(0,a.kt)("p",null,"In general, the choice of which function to use depends on the specific\nrequirements of your code. It's important to consider how you want to handle\nerrors, whether you need to provide custom error messages, and whether you need\nto provide fallback values."))}m.isMDXComponent=!0}}]);