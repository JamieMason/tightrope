"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[114],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(r),f=a,d=m["".concat(p,".").concat(f)]||m[f]||c[f]||i;return r?n.createElement(d,l(l({ref:t},u),{},{components:r})):n.createElement(d,l({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=f;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4826:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={id:"unwrap-or",title:"unwrapOr",tags:["errors","left-biased","recover","result","transform","transform-result","unwrap"]},l=void 0,o={unversionedId:"api/result/unwrap-or",id:"api/result/unwrap-or",title:"unwrapOr",description:"The unwrapOr function takes in a Result as its argument, and returns the",source:"@site/docs/api/result/unwrap-or.mdx",sourceDirName:"api/result",slug:"/api/result/unwrap-or",permalink:"/tightrope/api/result/unwrap-or",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/result/unwrap-or.mdx",tags:[{label:"errors",permalink:"/tightrope/tags/errors"},{label:"left-biased",permalink:"/tightrope/tags/left-biased"},{label:"recover",permalink:"/tightrope/tags/recover"},{label:"result",permalink:"/tightrope/tags/result"},{label:"transform",permalink:"/tightrope/tags/transform"},{label:"transform-result",permalink:"/tightrope/tags/transform-result"},{label:"unwrap",permalink:"/tightrope/tags/unwrap"}],version:"current",frontMatter:{id:"unwrap-or",title:"unwrapOr",tags:["errors","left-biased","recover","result","transform","transform-result","unwrap"]},sidebar:"sidebar",previous:{title:"unwrapErr",permalink:"/tightrope/api/result/unwrap-err"},next:{title:"unwrapOrElse",permalink:"/tightrope/api/result/unwrap-or-else"}},p={},s=[{value:"Example",id:"example",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"See also",id:"see-also",level:2}],u={toc:s},m="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/unwrap-or"},(0,a.kt)("inlineCode",{parentName:"a"},"unwrapOr"))," function takes in a ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Result"))," as its argument, and returns the\ninner ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/ok"},(0,a.kt)("inlineCode",{parentName:"a"},"Ok"))," value if the input ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," is an ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok"),", or the provided fallback\n",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," if the input is an ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/err"},(0,a.kt)("inlineCode",{parentName:"a"},"Err")),"."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'tightrope/fn/pipe';\nimport type { Result } from 'tightrope/result';\nimport { Err } from 'tightrope/result/err';\nimport { Ok } from 'tightrope/result/ok';\nimport { unwrapOr } from 'tightrope/result/unwrap-or';\n\nfunction findInArray<T>(array: T[], item: T): Result<T, string> {\n  const index = array.indexOf(item);\n  return index === -1\n    ? new Err(`Could not find ${item}`)\n    : new Ok(array[index] as T);\n}\n\nconst result1 = pipe(findInArray([1, 2, 3], 2), unwrapOr(new Ok(10)));\nconsole.log(result1);\n// Output: 2\n\nconst result2 = pipe(findInArray([1, 2, 3], 4), unwrapOr(new Ok(10)));\nconsole.log(result2);\n// Output: 10\n")),(0,a.kt)("h2",{id:"use-cases"},"Use Cases"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrapOr")," function is used to extract the value from a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object.\nIf the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object is an ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," variant, it returns the value contained\nwithin it. If the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object is an ",(0,a.kt)("inlineCode",{parentName:"p"},"Err")," variant, it returns a fallback\nvalue provided as an argument."),(0,a.kt)("p",null,"Some use cases of ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrapOr")," include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Providing a default value for cases when a value is not found in a collection\nor when an operation fails."),(0,a.kt)("li",{parentName:"ul"},"Mapping over a collection and returning the first element that meets a\nspecific criteria. If no element is found, returning a default value."),(0,a.kt)("li",{parentName:"ul"},"Handling errors in a way that gracefully falls back to a default value, such\nas when making API calls and the server returns an error response.")),(0,a.kt)("p",null,"Overall, ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrapOr")," provides a way to handle ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," objects in a more\nflexible way and handle both successful and unsuccessful cases."),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or"},"https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://jamiemason.github.io/tightrope/api/result/unwrap-or-else"},"https://jamiemason.github.io/tightrope/api/result/unwrap-or-else")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://jamiemason.github.io/tightrope/api/result/unwrap"},"https://jamiemason.github.io/tightrope/api/result/unwrap")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://jamiemason.github.io/tightrope/api/result/match"},"https://jamiemason.github.io/tightrope/api/result/match"))))}c.isMDXComponent=!0}}]);