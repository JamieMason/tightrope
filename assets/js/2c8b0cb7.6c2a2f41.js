"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1261],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=s(n),d=i,f=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return n?r.createElement(f,a(a({ref:t},m),{},{components:n})):r.createElement(f,a({ref:t},m))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:i,a[1]=p;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9951:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={id:"index",title:"Option",tags:["option","type"]},a=void 0,p={unversionedId:"api/option/index",id:"api/option/index",title:"Option",description:"Option is a type that represents either a value (Some) or the absence of a value (None).",source:"@site/docs/api/option/index.mdx",sourceDirName:"api/option",slug:"/api/option/",permalink:"/tightrope/api/option/",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/option/index.mdx",tags:[{label:"option",permalink:"/tightrope/tags/option"},{label:"type",permalink:"/tightrope/tags/type"}],version:"current",frontMatter:{id:"index",title:"Option",tags:["option","type"]},sidebar:"sidebar",previous:{title:"flatten",permalink:"/tightrope/api/option/flatten"},next:{title:"isNone",permalink:"/tightrope/api/option/is-none"}},l={},s=[],m={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/tightrope/api/option"},(0,i.kt)("inlineCode",{parentName:"a"},"Option"))," is a type that represents either a value (",(0,i.kt)("a",{parentName:"p",href:"/tightrope/api/option/some"},(0,i.kt)("inlineCode",{parentName:"a"},"Some")),") or the absence of a value (",(0,i.kt)("inlineCode",{parentName:"p"},"None"),")."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Option<T>")," is the type used for expressing the possibility of the absence of a value. It is an enum with the\nvariants, ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(T)"),", representing the presence of a value, and ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),", representing the absence of a value."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"Option")," allows you to construct a pipeline of commands that handle both the ",(0,i.kt)("inlineCode",{parentName:"p"},"Some")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," variants. This is\nuseful for handling cases where a value might be missing or undefined, and branching based on whether the previous\noperation returned a value or not.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Other terminology you might have heard:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Option")," is sometimes referred to as ",(0,i.kt)("inlineCode",{parentName:"li"},"Maybe"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Some")," is sometimes referred to as ",(0,i.kt)("inlineCode",{parentName:"li"},"Just"),' or "the value path".'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"None")," is sometimes referred to as ",(0,i.kt)("inlineCode",{parentName:"li"},"Nothing"),' or "the empty path".'))))}u.isMDXComponent=!0}}]);