"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3902],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),l=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(r),d=n,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return r?a.createElement(f,s(s({ref:t},c),{},{components:r})):a.createElement(f,s({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:n,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8332:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const o={id:"nested-compare",title:"nestedCompare",tags:["arrays","comparator","guard","objects"]},s=void 0,i={unversionedId:"api/guard/nested-compare",id:"api/guard/nested-compare",title:"nestedCompare",description:"Returns true if the nested property of both values match the given predicate.",source:"@site/docs/api/guard/nested-compare.mdx",sourceDirName:"api/guard",slug:"/api/guard/nested-compare",permalink:"/tightrope/api/guard/nested-compare",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/guard/nested-compare.mdx",tags:[{label:"arrays",permalink:"/tightrope/tags/arrays"},{label:"comparator",permalink:"/tightrope/tags/comparator"},{label:"guard",permalink:"/tightrope/tags/guard"},{label:"objects",permalink:"/tightrope/tags/objects"}],version:"current",frontMatter:{id:"nested-compare",title:"nestedCompare",tags:["arrays","comparator","guard","objects"]},sidebar:"sidebar",previous:{title:"isWithinRange",permalink:"/tightrope/api/guard/is-within-range"},next:{title:"some",permalink:"/tightrope/api/guard/some"}},p={},l=[{value:"Example",id:"example",level:2},{value:"Use Cases",id:"use-cases",level:2}],c={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Returns true if the nested property of both values match the given predicate."),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const [person1, person2, person3] = [\n  {\n    name: 'Alice',\n    age: 30,\n    address: { city: 'New York', zip: '10001' },\n  },\n  {\n    name: 'Bob',\n    age: 30,\n    address: { city: 'San Francisco', zip: '94107' },\n  },\n  {\n    name: 'Charlie',\n    age: 30,\n    address: { city: 'New York', zip: '10001' },\n  },\n];\n\nconst hasSameCity = nestedCompare(isEqual, 'address.city');\nhasSameCity(person1, person2); // false\nhasSameCity(person1, person3); // true\nhasSameCity(person1, person4); // true\n")),(0,n.kt)("h2",{id:"use-cases"},"Use Cases"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"nestedCompare")," is a versatile function that can be used for many different purposes."),(0,n.kt)("p",null,"Here are a few common use cases:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Comparing nested properties of objects"),": Compare the value of a nested property of two different objects, and\ndetermine whether they are considered equal based on a custom comparison function. For example, you might use this\nto check if two objects have the same value for a particular property."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Filtering arrays"),": Filter an array of objects based on a nested property that meets a certain condition. For\nexample, you might use this to find all employees who have a salary above a certain threshold."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Testing for equality of nested properties"),": Test if two objects have the same value for a nested property. For\nexample, you might use this to check if two addresses have the same city and postal code.")))}m.isMDXComponent=!0}}]);