"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7126],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,d=c["".concat(p,".").concat(m)]||c[m]||f[m]||i;return n?r.createElement(d,o(o({ref:t},s),{},{components:n})):r.createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={id:"filter",title:"filter"},o=void 0,l={unversionedId:"api/gen/filter",id:"api/gen/filter",title:"filter",description:"Summary",source:"@site/docs/api/gen/filter.mdx",sourceDirName:"api/gen",slug:"/api/gen/filter",permalink:"/tightrope/api/gen/filter",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/gen/filter.mdx",tags:[],version:"current",frontMatter:{id:"filter",title:"filter"},sidebar:"sidebar",previous:{title:"unwrapOrElse",permalink:"/tightrope/api/result/unwrap-or-else"},next:{title:"map",permalink:"/tightrope/api/gen/map"}},p={},u=[{value:"Summary",id:"summary",level:2},{value:"Example",id:"example",level:2}],s={toc:u},c="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"A higher-order function that takes a function as its argument and returns a\nnew function that can be used to filter values from a generator."),(0,a.kt)("p",null,"The returned function takes a generator as its argument and returns a new\ngenerator that only yields the values that pass the filter function."),(0,a.kt)("p",null,"The filter function applies the filter function to each value generated by\nthe input generator, and only yields the values for which the filter function\nreturns ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". Any values for which the filter function returns ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," are\ndiscarded."),(0,a.kt)("p",null,"In summary, the filter function is a powerful tool for working with\ngenerators in JavaScript and TypeScript. By using it to filter values from a\ngenerator, we can easily create new generators that yield only the values\nthat meet our specific criteria. This can help us write more efficient and\nfocused code, and can make it easier to work with large or complex data\nsets."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"In this example, we then use the ",(0,a.kt)("inlineCode",{parentName:"p"},"pipe")," function to create a pipeline of\ngenerators and filters."),(0,a.kt)("p",null,"We start with the ",(0,a.kt)("inlineCode",{parentName:"p"},"range")," function, which generates a sequence of numbers\nstarting from ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," and ending at ",(0,a.kt)("inlineCode",{parentName:"p"},"100")," (inclusive). We then apply the ",(0,a.kt)("inlineCode",{parentName:"p"},"filter"),"\nfunction to the pipeline to filter out even numbers using the ",(0,a.kt)("inlineCode",{parentName:"p"},"isEvenNumber"),"\nguard function, and then apply the ",(0,a.kt)("inlineCode",{parentName:"p"},"take")," function to limit the number of\nvalues generated to ",(0,a.kt)("inlineCode",{parentName:"p"},"5"),"."),(0,a.kt)("p",null,"Finally, we use a ",(0,a.kt)("inlineCode",{parentName:"p"},"for...of")," loop to iterate over the 5 even numbers\ngenerated by the pipeline, and log them to the console."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'tightrope/fn/pipe';\nimport { filter } from 'tightrope/gen/filter';\nimport { range } from 'tightrope/gen/range';\nimport { take } from 'tightrope/gen/take';\nimport { isEvenNumber } from 'tightrope/guard/is-even-number';\n\nconst evenNumbers = pipe(range(0, 100), filter(isEvenNumber), take(5));\n\nfor (const value of evenNumbers) {\n  console.log(value);\n  // 0\n  // 2\n  // 4\n  // 6\n  // 8\n}\n")))}f.isMDXComponent=!0}}]);