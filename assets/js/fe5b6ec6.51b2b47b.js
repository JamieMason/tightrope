"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8839],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=u(n),f=i,d=c["".concat(l,".").concat(f)]||c[f]||m[f]||a;return n?r.createElement(d,o(o({ref:t},s),{},{components:n})):r.createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:i,o[1]=p;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9165:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={id:"pipe",title:"pipe"},o=void 0,p={unversionedId:"api/fn/pipe",id:"api/fn/pipe",title:"pipe",description:"Summary",source:"@site/docs/api/fn/pipe.mdx",sourceDirName:"api/fn",slug:"/api/fn/pipe",permalink:"/tightrope/api/fn/pipe",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/fn/pipe.mdx",tags:[],version:"current",frontMatter:{id:"pipe",title:"pipe"},sidebar:"sidebar",previous:{title:"noOp",permalink:"/tightrope/api/fn/no-op"},next:{title:"types",permalink:"/tightrope/api/fn/types"}},l={},u=[{value:"Summary",id:"summary",level:2},{value:"Example",id:"example",level:2}],s={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"A Function that takes an initial value of any type (",(0,i.kt)("inlineCode",{parentName:"p"},"unknown"),"), followed by\nany number of functions as arguments. It returns the result of passing the\ninitial value through each of the functions, one by one, in the order that\nthey were passed in. It provides a way to easily chain together multiple\nfunctions in a pipeline, where the output of each function becomes the input\nfor the next one."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"In this example, we have three functions: ",(0,i.kt)("inlineCode",{parentName:"p"},"add"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"multiply"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"square"),". We\nwant to pass a value through these functions in a specific order and get the\nfinal result."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'tightrope/fn/pipe';\nimport { add } from 'tightrope/number/add';\nimport { multiply } from 'tightrope/number/multiply';\nimport { square } from 'tightrope/number/square';\n\nconst result = pipe(2, add(3), multiply(4), square);\n\nconsole.log(result); // Output: 400\n")))}m.isMDXComponent=!0}}]);