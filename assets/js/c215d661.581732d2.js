"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7902],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(n),d=r,g=s["".concat(u,".").concat(d)]||s[d]||m[d]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[s]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3486:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={id:"reduce-each",title:"reduceEach",tags:["generator","transform","transform-value"]},i=void 0,l={unversionedId:"api/gen/reduce-each",id:"api/gen/reduce-each",title:"reduceEach",description:"Summary",source:"@site/docs/api/gen/reduce-each.mdx",sourceDirName:"api/gen",slug:"/api/gen/reduce-each",permalink:"/tightrope/api/gen/reduce-each",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/gen/reduce-each.mdx",tags:[{label:"generator",permalink:"/tightrope/tags/generator"},{label:"transform",permalink:"/tightrope/tags/transform"},{label:"transform-value",permalink:"/tightrope/tags/transform-value"}],version:"current",frontMatter:{id:"reduce-each",title:"reduceEach",tags:["generator","transform","transform-value"]},sidebar:"sidebar",previous:{title:"reduce",permalink:"/tightrope/api/gen/reduce"},next:{title:"skip",permalink:"/tightrope/api/gen/skip"}},u={},p=[{value:"Summary",id:"summary",level:2},{value:"Example",id:"example",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"<code>reduce</code> or <code>reduceEach</code>?",id:"reduce-or-reduceeach",level:2},{value:"See also",id:"see-also",level:2}],c={toc:p},s="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"A higher-order function that takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"reducer")," function as its argument and\nreturns a new function that can be used to reduce the values generated by a\ngenerator."),(0,r.kt)("p",null,"The returned function takes a generator as its argument and returns a new\ngenerator that yields the partial results of the reduction operation. It\nworks by applying the ",(0,r.kt)("inlineCode",{parentName:"p"},"reducer")," function to each pair of values generated by\nthe input generator, and yielding the partial results of the reduction\noperation."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"reducer")," function takes two arguments: an ",(0,r.kt)("inlineCode",{parentName:"p"},"accumulator")," value that\nrepresents the current state of the reduction operation, and a ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),"\ngenerated by the input generator. The reducer function applies some operation\nto the accumulator value and the input value, and returns a new accumulator\nvalue that represents the updated state of the reduction operation."),(0,r.kt)("p",null,"In summary, ",(0,r.kt)("inlineCode",{parentName:"p"},"reduceEach")," is a powerful tool for working with generators in\nJavaScript and TypeScript. It can be used to perform complex reduction\noperations on large or complex data sets, and can help us write more\nefficient and focused code."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"In this example, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"range")," function to generate a sequence of\nnumbers from ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"10"),", the ",(0,r.kt)("a",{parentName:"p",href:"/tightrope/api/gen/map"},(0,r.kt)("inlineCode",{parentName:"a"},"map"))," function to double each value in the\nsequence, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"take")," function to select the first ",(0,r.kt)("inlineCode",{parentName:"p"},"5")," values in the\nsequence. Finally, we apply the ",(0,r.kt)("inlineCode",{parentName:"p"},"reduceEach")," function with the ",(0,r.kt)("inlineCode",{parentName:"p"},"sum")," function\nas its argument to generate the partial sums of the remaining values in the\nsequence."),(0,r.kt)("p",null,"We then use a ",(0,r.kt)("inlineCode",{parentName:"p"},"for...of")," loop to iterate over the partial sums generated by\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"partialSums")," generator, and log them to the console."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'tightrope/fn/pipe';\nimport { map } from 'tightrope/gen/map';\nimport { range } from 'tightrope/gen/range';\nimport { reduceEach } from 'tightrope/gen/reduce-each';\nimport { take } from 'tightrope/gen/take';\nimport { multiply } from 'tightrope/number/multiply';\n\nfunction sum(acc: number, curr: number): number {\n  return acc + curr;\n}\n\nconst partialSums = pipe(\n  range(1, 10),\n  map(multiply(2)),\n  take(5),\n  reduceEach(sum),\n);\n\nfor (const value of partialSums) {\n  console.log(value);\n  //  6\n  // 12\n  // 20\n  // 30\n}\n")),(0,r.kt)("h2",{id:"use-cases"},"Use Cases"),(0,r.kt)("p",null,"Common use cases for ",(0,r.kt)("inlineCode",{parentName:"p"},"reduceEach"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Summing values"),": calculate the sum of a series of numbers generated by a\ngenerator."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Counting values"),": count the number of values generated by a generator that\nsatisfy a given condition."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Finding minimum or maximum values"),": find the minimum or maximum value\ngenerated by a generator."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Concatenating strings"),": concatenate a series of strings generated by a\ngenerator."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Grouping values"),": group a series of values generated by a generator into a\nnested structure, such as an object or an array."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Filtering values"),": filter the values generated by a generator based on a\ngiven condition."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Computing averages"),": compute the average of a series of numbers generated\nby a generator."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Building up an object"),": build up an object by accumulating properties and\nvalues generated by a generator.")),(0,r.kt)("p",null,"In general, ",(0,r.kt)("inlineCode",{parentName:"p"},"reduceEach")," can be used in any situation where we need to\nperform some kind of reduction operation on a series of values generated by a\ngenerator. Its flexibility and power make it a versatile tool for working\nwith generators in JavaScript and TypeScript."),(0,r.kt)("h2",{id:"reduce-or-reduceeach"},(0,r.kt)("inlineCode",{parentName:"h2"},"reduce")," or ",(0,r.kt)("inlineCode",{parentName:"h2"},"reduceEach"),"?"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"reduce")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"reduceEach")," are very similar functions, and it can be difficult\nto decide which one to use in a given situation. Here are some guidelines to\nhelp you decide:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"reduce")," if you want to perform a reduction operation on the entire\nsequence of values generated by a generator, and you only need to return a\nsingle value."),(0,r.kt)("li",{parentName:"ol"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"reduceEach")," if you want to perform a reduction operation on each\nindividual value generated by a generator, and you need to return a\nsequence of partial results.")),(0,r.kt)("p",null,"In general, the choice between ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"reduceEach")," will depend on the\nspecific requirements of your problem, as well as the nature of the data you\nare working with."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you need to perform a simple reduction operation on a single sequence of\nvalues, ",(0,r.kt)("inlineCode",{parentName:"li"},"reduce")," may be the better choice."),(0,r.kt)("li",{parentName:"ul"},"If you need to perform a more complex reduction operation that involves\nmultiple sequences of values, or if you need to return a sequence of\npartial results, ",(0,r.kt)("inlineCode",{parentName:"li"},"reduceEach")," may be the better choice.")),(0,r.kt)("h2",{id:"see-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jamiemason.github.io/tightrope/api/gen/reduce"},"https://jamiemason.github.io/tightrope/api/gen/reduce"))))}m.isMDXComponent=!0}}]);