"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5929],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=m(n),f=o,d=u["".concat(l,".").concat(f)]||u[f]||c[f]||i;return n?a.createElement(d,r(r({ref:t},s),{},{components:n})):a.createElement(d,r({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=f;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:o,r[1]=p;for(var m=2;m<i;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3266:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>m});var a=n(7462),o=(n(7294),n(3905));const i={id:"map",title:"map",tags:["option","right-biased","transform","transform-value"]},r=void 0,p={unversionedId:"api/option/map",id:"api/option/map",title:"map",description:"Transforms Option to Option by applying the provided function to the contained value of Some and leaving",source:"@site/docs/api/option/map.mdx",sourceDirName:"api/option",slug:"/api/option/map",permalink:"/tightrope/api/option/map",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/option/map.mdx",tags:[{label:"option",permalink:"/tightrope/tags/option"},{label:"right-biased",permalink:"/tightrope/tags/right-biased"},{label:"transform",permalink:"/tightrope/tags/transform"},{label:"transform-value",permalink:"/tightrope/tags/transform-value"}],version:"current",frontMatter:{id:"map",title:"map",tags:["option","right-biased","transform","transform-value"]},sidebar:"sidebar",previous:{title:"isSome",permalink:"/tightrope/api/option/is-some"},next:{title:"mapOr",permalink:"/tightrope/api/option/map-or"}},l={},m=[{value:"Example",id:"example",level:2},{value:"Use Cases",id:"use-cases",level:2}],s={toc:m},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Transforms ",(0,o.kt)("inlineCode",{parentName:"p"},"Option<T>")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"Option<U>")," by applying the provided function to the contained value of ",(0,o.kt)("a",{parentName:"p",href:"/tightrope/api/option/some"},(0,o.kt)("inlineCode",{parentName:"a"},"Some"))," and leaving\n",(0,o.kt)("inlineCode",{parentName:"p"},"None")," values unchanged."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/tightrope/api/option/map"},(0,o.kt)("inlineCode",{parentName:"a"},"map"))," function takes a mapping function and an ",(0,o.kt)("a",{parentName:"p",href:"/tightrope/api/option"},(0,o.kt)("inlineCode",{parentName:"a"},"Option"))," object as its arguments. If the input ",(0,o.kt)("inlineCode",{parentName:"p"},"Option")," object is\na ",(0,o.kt)("inlineCode",{parentName:"p"},"Some"),", it applies the provided mapping function to its contained value and wraps the result in a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Some"),". If\nthe input ",(0,o.kt)("inlineCode",{parentName:"p"},"Option")," object is a ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", it returns the ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," unchanged."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'tightrope/fn/pipe';\nimport { Option } from 'tightrope/option';\nimport { none } from 'tightrope/option/none';\nimport { Some } from 'tightrope/option/some';\nimport { map } from 'tightrope/option/map';\nimport { multiply } from 'tightrope/number/multiply';\n\nconst result1 = pipe(new Some(5), map(multiply(2)));\n// Output: Some(10)\n\nconst result2 = pipe(none, map(multiply(2)));\n// Output: None\n")),(0,o.kt)("h2",{id:"use-cases"},"Use Cases"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," function is useful when you want to apply a transformation to the value contained in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Some")," without\naffecting ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," values. This can be helpful when working with optional values and applying transformations that\nshould only be applied when the value is present."),(0,o.kt)("p",null,"Some use cases of ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," include:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Applying a transformation to an optional configuration value without affecting the absence of the value."),(0,o.kt)("li",{parentName:"ul"},"Converting optional values from one type to another, while keeping the missing values as ",(0,o.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,o.kt)("li",{parentName:"ul"},"Applying a function to the result of an operation that might not always return a value, and keeping the failure as a\n",(0,o.kt)("inlineCode",{parentName:"li"},"None"),".")))}c.isMDXComponent=!0}}]);