"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7955],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=a,m=u["".concat(p,".").concat(d)]||u[d]||g[d]||i;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2766:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const i={id:"range",title:"range",tags:["data-source","generator"]},o=void 0,l={unversionedId:"api/gen/range",id:"api/gen/range",title:"range",description:"Create a generator which will yield a sequence of numbers.",source:"@site/docs/api/gen/range.mdx",sourceDirName:"api/gen",slug:"/api/gen/range",permalink:"/tightrope/api/gen/range",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/gen/range.mdx",tags:[{label:"data-source",permalink:"/tightrope/tags/data-source"},{label:"generator",permalink:"/tightrope/tags/generator"}],version:"current",frontMatter:{id:"range",title:"range",tags:["data-source","generator"]},sidebar:"sidebar",previous:{title:"map",permalink:"/tightrope/api/gen/map"},next:{title:"reduce",permalink:"/tightrope/api/gen/reduce"}},p={},s=[{value:"Example",id:"example",level:2}],c={toc:s},u="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Create a generator which will ",(0,a.kt)("inlineCode",{parentName:"p"},"yield")," a sequence of numbers."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"range")," generator works by starting with the ",(0,a.kt)("inlineCode",{parentName:"p"},"floor")," value and then yielding each subsequent integer value until\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"ceiling")," value is reached. The generator continues to yield values until it is exhausted, and can be used to\ngenerate any range of integers, including negative ranges and ranges with non-integer steps."),(0,a.kt)("p",null,"It is a simple and flexible tool for generating sequences of integer values in JavaScript and TypeScript. It can be\nused in a variety of applications, including generating sequences of numbers for mathematical computations,\ngenerating indices for arrays or other data structures, and more."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"In this example, we we call the ",(0,a.kt)("inlineCode",{parentName:"p"},"range")," function with two arguments, ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"5"),", to create a new generator that\nyields the numbers between ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"5")," (inclusive):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { range } from 'tightrope/gen/range';\n\nconst myRange = range(1, 5);\n\nfor (const value of myRange) {\n  console.log(value);\n}\n")),(0,a.kt)("p",null,"Finally, we use a ",(0,a.kt)("inlineCode",{parentName:"p"},"for...of")," loop to iterate over the values generated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"myRange")," generator and log them to the\nconsole. We should see the following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// 1\n// 2\n// 3\n// 4\n// 5\n")))}g.isMDXComponent=!0}}]);