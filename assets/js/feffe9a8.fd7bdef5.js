"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6334],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(n),h=a,c=u["".concat(p,".").concat(h)]||u[h]||d[h]||i;return n?r.createElement(c,o(o({ref:t},m),{},{components:n})):r.createElement(c,o({ref:t},m))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={id:"and-then",title:"andThen",tags:["result","right-biased","transform","transform-result"]},o=void 0,l={unversionedId:"api/result/and-then",id:"api/result/and-then",title:"andThen",description:"Summary",source:"@site/docs/api/result/and-then.mdx",sourceDirName:"api/result",slug:"/api/result/and-then",permalink:"/tightrope/api/result/and-then",draft:!1,editUrl:"https://github.com/JamieMason/tightrope/tree/master/site/docs/api/result/and-then.mdx",tags:[{label:"result",permalink:"/tightrope/tags/result"},{label:"right-biased",permalink:"/tightrope/tags/right-biased"},{label:"transform",permalink:"/tightrope/tags/transform"},{label:"transform-result",permalink:"/tightrope/tags/transform-result"}],version:"current",frontMatter:{id:"and-then",title:"andThen",tags:["result","right-biased","transform","transform-result"]},sidebar:"sidebar",previous:{title:"and",permalink:"/tightrope/api/result/and"},next:{title:"Err",permalink:"/tightrope/api/result/err"}},p={},s=[{value:"Summary",id:"summary",level:2},{value:"Example",id:"example",level:2},{value:"See also",id:"see-also",level:2}],m={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"Both ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/map"},(0,a.kt)("inlineCode",{parentName:"a"},"map"))," and ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/and-then"},(0,a.kt)("inlineCode",{parentName:"a"},"andThen"))," are functions used to transform the value inside a\n",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result"},(0,a.kt)("inlineCode",{parentName:"a"},"Result"))," object. The difference between them is that ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"map")," transforms the\nvalue inside the ",(0,a.kt)("a",{parentName:"strong",href:"/tightrope/api/result/ok"},(0,a.kt)("inlineCode",{parentName:"a"},"Ok"))," variant")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object, while ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"andThen"),"\ntransforms the ",(0,a.kt)("inlineCode",{parentName:"strong"},"Ok")," variant itself"),"."),(0,a.kt)("p",null,"When your function returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," object, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"andThen")," to\ntransform the ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," variant itself."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { pipe } from 'tightrope/fn/pipe';\nimport type { Result } from 'tightrope/result';\nimport { Err, Ok } from 'tightrope/result';\nimport { andThen } from 'tightrope/result/and-then';\nimport { map } from 'tightrope/result/map';\nimport { multiply } from 'tightrope/number/multiply';\nimport { fromSuccess } from 'tightrope/result/from-success';\nimport { unwrapOr } from 'tightrope/result/unwrap-or';\n\nfunction divide(x: number, y: number): Result<number, Error> {\n  if (y === 0) {\n    return new Err(new Error('Division by zero'));\n  }\n  return new Ok(x / y);\n}\n\nconst amount = pipe(\n  fromSuccess<number, Error>(16),\n  andThen((n) => divide(n, 2)),\n  andThen((n) => divide(n, 4)),\n  map(multiply(100)),\n  unwrapOr(0),\n);\n\nconsole.log(amount); // 200\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"Result")," allows you to construct a pipeline of commands that handle both the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," and ",(0,a.kt)("a",{parentName:"p",href:"/tightrope/api/result/err"},(0,a.kt)("inlineCode",{parentName:"a"},"Err"))," variants. This is useful for handling errors and branching\nbased on whether the previous operation was successful or not.")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"andThen")," runs on the ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," variant. If any of the operations return an ",(0,a.kt)("inlineCode",{parentName:"p"},"Err"),"\nobject then ",(0,a.kt)("inlineCode",{parentName:"p"},"andThen")," will skip and return the ",(0,a.kt)("inlineCode",{parentName:"p"},"Err"),"."),(0,a.kt)("p",{parentName:"admonition"},"This makes it easy to handle errors in a functional and composable way.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Other terminology you might have heard:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"andThen")," is sometimes referred to as ",(0,a.kt)("inlineCode",{parentName:"li"},"chain")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"flatMap"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Result")," is sometimes referred to as ",(0,a.kt)("inlineCode",{parentName:"li"},"Either"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Ok")," is sometimes referred to as ",(0,a.kt)("inlineCode",{parentName:"li"},"Right"),' or "the happy path".'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Err")," is sometimes referred to as ",(0,a.kt)("inlineCode",{parentName:"li"},"Left"),' or "the sad path".'))),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/core/result/enum.Result.html#method.and_then"},"https://doc.rust-lang.org/core/result/enum.Result.html#method.and_then")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://mobily.github.io/ts-belt/api/result#flatmap"},"https://mobily.github.io/ts-belt/api/result#flatmap")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://gigobyte.github.io/purify/adts/Either#instance-chain"},"https://gigobyte.github.io/purify/adts/Either#instance-chain"))))}d.isMDXComponent=!0}}]);