{
  "all": [
    {
      "filePath": "array/every",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "every",
      "namespacedName": "A.every",
      "slug": "array/every",
      "title": "Array.every",
      "@description": "Return true if `value` is a non-empty array and every member passes the given guard.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Multiple Conditions"]
    },
    {
      "filePath": "array/flat",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "flat",
      "namespacedName": "A.flat",
      "slug": "array/flat",
      "title": "Array.flat",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Transform"]
    },
    {
      "filePath": "array/is-array-including-all-of",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isArrayIncludingAllOf",
      "namespacedName": "A.isArrayIncludingAllOf",
      "slug": "array/is-array-including-all-of",
      "title": "Array.isArrayIncludingAllOf",
      "@description": "Asserts that `value` is an `Array` including all of the values provided in `allowedValues`. It could also include\nadditional values or be in a different order, but if every value in `allowedValues` features in `value` then this\nwill return `true`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Guard", "Multiple Conditions"]
    },
    {
      "filePath": "array/is-array-including-any-of",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isArrayIncludingAnyOf",
      "namespacedName": "A.isArrayIncludingAnyOf",
      "slug": "array/is-array-including-any-of",
      "title": "Array.isArrayIncludingAnyOf",
      "@description": "Asserts that `value` is an `Array` including at least one of the members of `allowedValues`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Guard", "Multiple Conditions"]
    },
    {
      "filePath": "array/is-array-including-only",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isArrayIncludingOnly",
      "namespacedName": "A.isArrayIncludingOnly",
      "slug": "array/is-array-including-only",
      "title": "Array.isArrayIncludingOnly",
      "@description": "Asserts that a value is an `Array` including only the values provided in the given `allowedValues` array and no\nothers. The order and number of times each value appears in either array does not matter. Returns true unless `value`\ncontains a value which does not feature in `allowedValues`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Guard", "Multiple Conditions"]
    },
    {
      "filePath": "array/is-array-of-booleans",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isArrayOfBooleans",
      "namespacedName": "A.isArrayOfBooleans",
      "slug": "array/is-array-of-booleans",
      "title": "Array.isArrayOfBooleans",
      "@description": "Asserts that a value is an `Array` containing only `Boolean` values.\n\n## Examples\n\n```ts\nisArrayOfBooleans([true, false, new Boolean(true)]);\n```",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Booleans", "Guard"]
    },
    {
      "filePath": "array/is-array-of-numbers",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isArrayOfNumbers",
      "namespacedName": "A.isArrayOfNumbers",
      "slug": "array/is-array-of-numbers",
      "title": "Array.isArrayOfNumbers",
      "@description": "Asserts that a value is an `Array` containing only `Number` values.\n\n## Examples\n\n```ts\nisArrayOfNumbers([12, 0, 14]);\n```",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Guard", "Numbers"]
    },
    {
      "filePath": "array/is-array-of-objects",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isArrayOfObjects",
      "namespacedName": "A.isArrayOfObjects",
      "slug": "array/is-array-of-objects",
      "title": "Array.isArrayOfObjects",
      "@description": "Asserts that a value is an `Array` containing only `Object` values.\n\n## Examples\n\n```ts\nisArrayOfObjects([{}, new Object()]);\n```",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Guard", "Objects"]
    },
    {
      "filePath": "array/is-array-of-size",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isArrayOfSize",
      "namespacedName": "A.isArrayOfSize",
      "slug": "array/is-array-of-size",
      "title": "Array.isArrayOfSize",
      "@description": "Asserts that a value is an `Array` containing a specific number of values.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Array Length", "Arrays", "Guard"]
    },
    {
      "filePath": "array/is-array-of-strings",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isArrayOfStrings",
      "namespacedName": "A.isArrayOfStrings",
      "slug": "array/is-array-of-strings",
      "title": "Array.isArrayOfStrings",
      "@description": "Asserts that a value is an `Array` containing only `String` values.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Guard", "Strings"]
    },
    {
      "filePath": "array/is-array-of",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isArrayOf",
      "namespacedName": "A.isArrayOf",
      "slug": "array/is-array-of",
      "title": "Array.isArrayOf",
      "@description": "Does every value pass the given Guard?\n\n## Examples\n\n```ts\nisArrayOf(isNonEmptyString, ['click', 'mousedown', 'load']);\n```",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Guard"]
    },
    {
      "filePath": "array/is-array",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isArray",
      "namespacedName": "A.isArray",
      "slug": "array/is-array",
      "title": "Array.isArray",
      "@description": "Asserts that a value is a valid `Array` containing none or any number of items of any type.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Guard"]
    },
    {
      "filePath": "array/is-empty-array",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isEmptyArray",
      "namespacedName": "A.isEmptyArray",
      "slug": "array/is-empty-array",
      "title": "Array.isEmptyArray",
      "@description": "Asserts that a value is a valid `Array` containing no items.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Array Length", "Arrays", "Emptiness", "Guard"]
    },
    {
      "filePath": "array/is-non-empty-array",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "isNonEmptyArray",
      "namespacedName": "A.isNonEmptyArray",
      "slug": "array/is-non-empty-array",
      "title": "Array.isNonEmptyArray",
      "@description": "Asserts that a value is an `Array` containing at least one value.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Emptiness", "Guard"]
    },
    {
      "filePath": "array/some",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "some",
      "namespacedName": "A.some",
      "slug": "array/some",
      "title": "Array.some",
      "@description": "Returns true if array is not empty and any member of the array passes the guard",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard"]
    },
    {
      "filePath": "array/uniq",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "uniq",
      "namespacedName": "A.uniq",
      "slug": "array/uniq",
      "title": "Array.uniq",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Filter"]
    },
    {
      "filePath": "array/index",
      "moduleName": "Array",
      "moduleNameShort": "A",
      "name": "ArrayElement",
      "namespacedName": "A.ArrayElement",
      "slug": "array/array-element",
      "title": "Array.ArrayElement",
      "@description": "Get type of members of an array",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "console/index",
      "moduleName": "Console",
      "moduleNameShort": "Console",
      "name": "error",
      "namespacedName": "Console.error",
      "slug": "console/error",
      "title": "Console.error",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "console/index",
      "moduleName": "Console",
      "moduleNameShort": "Console",
      "name": "info",
      "namespacedName": "Console.info",
      "slug": "console/info",
      "title": "Console.info",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "console/index",
      "moduleName": "Console",
      "moduleNameShort": "Console",
      "name": "log",
      "namespacedName": "Console.log",
      "slug": "console/log",
      "title": "Console.log",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "console/index",
      "moduleName": "Console",
      "moduleNameShort": "Console",
      "name": "warn",
      "namespacedName": "Console.warn",
      "slug": "console/warn",
      "title": "Console.warn",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "console/timer",
      "moduleName": "Console",
      "moduleNameShort": "Console",
      "name": "timer",
      "namespacedName": "Console.timer",
      "slug": "console/timer",
      "title": "Console.timer",
      "@description": "Create a timer that can be started, stopped, and logged to the console.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "date/is-after",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "isAfter",
      "namespacedName": "D.isAfter",
      "slug": "date/is-after",
      "title": "Date.isAfter",
      "@description": "Asserts that a value is a valid instance of `Date` whose value occurs after that of another.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Dates", "Guard"]
    },
    {
      "filePath": "date/is-before",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "isBefore",
      "namespacedName": "D.isBefore",
      "slug": "date/is-before",
      "title": "Date.isBefore",
      "@description": "Asserts that a value is a valid instance of `Date` whose value occurs before that of another.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Dates", "Guard"]
    },
    {
      "filePath": "date/is-date-between",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "isDateBetween",
      "namespacedName": "D.isDateBetween",
      "slug": "date/is-date-between",
      "title": "Date.isDateBetween",
      "@description": "Asserts that a value is an instance of `Date` occurring on or after `floor` and on or before `ceiling`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Dates", "Guard"]
    },
    {
      "filePath": "date/is-date-in-month",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "isDateInMonth",
      "namespacedName": "D.isDateInMonth",
      "slug": "date/is-date-in-month",
      "title": "Date.isDateInMonth",
      "@description": "Asserts that a value is an instance of `Date` occurring on the given month of the year, where January is `0` and\nDecember is `11`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Dates", "Guard"]
    },
    {
      "filePath": "date/is-date-in-year",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "isDateInYear",
      "namespacedName": "D.isDateInYear",
      "slug": "date/is-date-in-year",
      "title": "Date.isDateInYear",
      "@description": "Asserts that a value is an instance of `Date` occurring in the given year.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Dates", "Guard"]
    },
    {
      "filePath": "date/is-date-on-day-of-month",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "isDateOnDayOfMonth",
      "namespacedName": "D.isDateOnDayOfMonth",
      "slug": "date/is-date-on-day-of-month",
      "title": "Date.isDateOnDayOfMonth",
      "@description": "Asserts that a value is an instance of `Date` occurring on the given day of the month, where the first day of the\nmonth is `1` and last is `31`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Dates", "Guard"]
    },
    {
      "filePath": "date/is-date-on-day-of-week",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "isDateOnDayOfWeek",
      "namespacedName": "D.isDateOnDayOfWeek",
      "slug": "date/is-date-on-day-of-week",
      "title": "Date.isDateOnDayOfWeek",
      "@description": "Asserts that a value is an instance of `Date` occurring on the day of the week with the given index, where Sunday is\n`0` and Saturday is `6`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Dates", "Guard"]
    },
    {
      "filePath": "date/is-date-on-or-after",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "isDateOnOrAfter",
      "namespacedName": "D.isDateOnOrAfter",
      "slug": "date/is-date-on-or-after",
      "title": "Date.isDateOnOrAfter",
      "@description": "Asserts that a value is an instance of `Date` occurring on or after the exact date and time of another.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Dates", "Guard"]
    },
    {
      "filePath": "date/is-date-on-or-before",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "isDateOnOrBefore",
      "namespacedName": "D.isDateOnOrBefore",
      "slug": "date/is-date-on-or-before",
      "title": "Date.isDateOnOrBefore",
      "@description": "Asserts that a value is an instance of `Date` occurring on or before the exact date and time of another.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Dates", "Guard"]
    },
    {
      "filePath": "date/is-date",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "isDate",
      "namespacedName": "D.isDate",
      "slug": "date/is-date",
      "title": "Date.isDate",
      "@description": "Asserts that a value is an instance of `Date`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Dates", "Guard"]
    },
    {
      "filePath": "date/is-valid-date",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "ValidDate",
      "namespacedName": "D.ValidDate",
      "slug": "date/valid-date",
      "title": "Date.ValidDate",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "date/is-valid-date",
      "moduleName": "Date",
      "moduleNameShort": "D",
      "name": "isValidDate",
      "namespacedName": "D.isValidDate",
      "slug": "date/is-valid-date",
      "title": "Date.isValidDate",
      "@description": "Asserts that a value is an instance of `Date` whose internal value is valid. `Date` is little like `Promise` in that\nit is a container for a value. For example, `new Date('wut?')` is a valid `Date` which wraps a value that is not\nvalid.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Dates", "Guard"]
    },
    {
      "filePath": "fn/flow",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "flow",
      "namespacedName": "Fn.flow",
      "slug": "fn/flow",
      "title": "Fn.flow",
      "@description": "Creates a function which pipes its input through a sequence of functions in left-to-right order.\n\nA higher-order function that takes any number of functions as its arguments and returns a new function that applies\neach function in sequence, passing the result of each function as the argument to the next function.\n\n## Example\n\nIn this example, we first define three functions: `addOne`, `double`, and `square`. We then use the `flow` function\nto create a new function `composedFn` that composes these three functions together. We can then call `composedFn`\nwith an argument to get the result of applying the composed functions in sequence.\n\nNote that the flow function applies the functions in left to right order, so the first function given as an argument\nis applied first.\n\n```ts\nimport { flow } from 'tightrope/fn/flow';\n\n// Define some functions to compose\nfunction addOne(n: number): number {\n  return n + 1;\n}\n\nfunction double(n: number): number {\n  return n * 2;\n}\n\nfunction square(n: number): number {\n  return n * n;\n}\n\n// Use flow to create a new function that composes the other functions\nconst composedFn = flow(addOne, double, square);\n\n// Call the composed function with an argument\nconst result = composedFn(3); // returns 64\n```",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Composition"]
    },
    {
      "filePath": "fn/flow",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "flow",
      "namespacedName": "Fn.flow",
      "slug": "fn/flow",
      "title": "Fn.flow",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/flow",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "flow",
      "namespacedName": "Fn.flow",
      "slug": "fn/flow",
      "title": "Fn.flow",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/flow",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "flow",
      "namespacedName": "Fn.flow",
      "slug": "fn/flow",
      "title": "Fn.flow",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/flow",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "flow",
      "namespacedName": "Fn.flow",
      "slug": "fn/flow",
      "title": "Fn.flow",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/flow",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "flow",
      "namespacedName": "Fn.flow",
      "slug": "fn/flow",
      "title": "Fn.flow",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/flow",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "flow",
      "namespacedName": "Fn.flow",
      "slug": "fn/flow",
      "title": "Fn.flow",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/flow",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "flow",
      "namespacedName": "Fn.flow",
      "slug": "fn/flow",
      "title": "Fn.flow",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/flow",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "flow",
      "namespacedName": "Fn.flow",
      "slug": "fn/flow",
      "title": "Fn.flow",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/flow",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "flow",
      "namespacedName": "Fn.flow",
      "slug": "fn/flow",
      "title": "Fn.flow",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/flow",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "flow",
      "namespacedName": "Fn.flow",
      "slug": "fn/flow",
      "title": "Fn.flow",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/with-safety",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "withSafety",
      "namespacedName": "Fn.withSafety",
      "slug": "fn/with-safety",
      "title": "Fn.withSafety",
      "@description": "Catch errors in user code in Result operators, and instead return `Err` instances.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/get",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "get",
      "namespacedName": "Fn.get",
      "slug": "fn/get",
      "title": "Fn.get",
      "@description": "Return an `Ok` containing a deeply nested value from an object, or an `Err`.\n\nA curried function that takes two arguments: a string `path` and an `origin` object. It returns an `Ok` containing\nthe value at the specified path in the object, or an `Err` if the path does not exist.\n\n## Example\n\nIn this example, we first define an object `obj` that has a nested property `foo.bar` with a value of `42`. We then\nuse the `get` function to retrieve the value at this path in the object by passing the path and object as arguments.\nNote that we also specify the type of the expected value (`number` in this case) as a type argument to the `get`\nfunction.\n\n```ts\nimport { get } from 'tightrope/fn/get';\n\n// Define an object to query\nconst obj = {\n  foo: {\n    bar: 42,\n  },\n};\n\n// Use get to retrieve a value from the object\nconst result = get<number>('foo.bar', obj); // returns Ok(42)\n```\n\nThe `get` function works by splitting the `path` argument on the `.` character, then using the resulting array of\nproperty names to recursively access nested properties in the `origin` object. If any of the intermediate properties\ndo not exist or are not objects, the function returns `Err`.\n\nThe `get` function is implemented using the `curry` function, which allows us to partially apply the `path` argument\nand reuse the function with different `origin` objects.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Objects", "Read", "Result"]
    },
    {
      "filePath": "fn/get",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "get",
      "namespacedName": "Fn.get",
      "slug": "fn/get",
      "title": "Fn.get",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/get",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "get",
      "namespacedName": "Fn.get",
      "slug": "fn/get",
      "title": "Fn.get",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/get",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "get",
      "namespacedName": "Fn.get",
      "slug": "fn/get",
      "title": "Fn.get",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/get",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "get",
      "namespacedName": "Fn.get",
      "slug": "fn/get",
      "title": "Fn.get",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/get",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "get",
      "namespacedName": "Fn.get",
      "slug": "fn/get",
      "title": "Fn.get",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/get",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "get",
      "namespacedName": "Fn.get",
      "slug": "fn/get",
      "title": "Fn.get",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/get",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "get",
      "namespacedName": "Fn.get",
      "slug": "fn/get",
      "title": "Fn.get",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/get",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "get",
      "namespacedName": "Fn.get",
      "slug": "fn/get",
      "title": "Fn.get",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/get",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "get",
      "namespacedName": "Fn.get",
      "slug": "fn/get",
      "title": "Fn.get",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/get",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "get",
      "namespacedName": "Fn.get",
      "slug": "fn/get",
      "title": "Fn.get",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/identity",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "identity",
      "namespacedName": "Fn.identity",
      "slug": "fn/identity",
      "title": "Fn.identity",
      "@description": "A function that takes any value as its argument and returns the same value.\n\nIt is commonly used as a placeholder function in functional programming.\n\n## Example\n\nIn this example, we simply call the `identity` function with a value of `42` and assign the result to a variable\n`result`. Since `identity` simply returns its input value, the value of `result` is also `42`.\n\n```ts\nimport { identity } from 'tightrope/fn/identity';\n\n// Use identity to return a value\nconst value = 42;\nconst result = identity(value); // returns 42\n```\n\nThe `identity` function can be useful in many scenarios, such as when passing a function as an argument to another\nfunction that expects a function, but you don't need to perform any actual transformation on the input value.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Composition"]
    },
    {
      "filePath": "fn/is-async-function",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "isAsyncFunction",
      "namespacedName": "Fn.isAsyncFunction",
      "slug": "fn/is-async-function",
      "title": "Fn.isAsyncFunction",
      "@description": "Asserts that a value is a function using `async` and `await` syntax.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Async", "Functions", "Guard"]
    },
    {
      "filePath": "fn/is-function",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "isFunction",
      "namespacedName": "Fn.isFunction",
      "slug": "fn/is-function",
      "title": "Fn.isFunction",
      "@description": "Asserts that a value is a `Function`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Functions", "Guard"]
    },
    {
      "filePath": "fn/is-generator-function",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "isGeneratorFunction",
      "namespacedName": "Fn.isGeneratorFunction",
      "slug": "fn/is-generator-function",
      "title": "Fn.isGeneratorFunction",
      "@description": "Asserts that a value is a `Function` using `yield` syntax.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Functions", "Generator", "Guard"]
    },
    {
      "filePath": "fn/no-op",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "noOp",
      "namespacedName": "Fn.noOp",
      "slug": "fn/no-op",
      "title": "Fn.noOp",
      "@description": "A function that does nothing.\n\nIt is commonly used as a placeholder function in cases where a function is required but there is no action that needs\nto be performed\n\nThe `noOp` function can be useful in situations where you need to pass a function to another function, but you don't\nactually need the function to perform any action. This can be useful for example in tests, or when defining default\nvalues for functions that are not meant to be called.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Composition"]
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/pipe",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "pipe",
      "namespacedName": "Fn.pipe",
      "slug": "fn/pipe",
      "title": "Fn.pipe",
      "@description": "...",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/tap",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "tap",
      "namespacedName": "Fn.tap",
      "slug": "fn/tap",
      "title": "Fn.tap",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Effect"]
    },
    {
      "filePath": "fn/throws-any-error",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "throwsAnyError",
      "namespacedName": "Fn.throwsAnyError",
      "slug": "fn/throws-any-error",
      "title": "Fn.throwsAnyError",
      "@description": "Asserts that a value is a `Function` which throws when invoked.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Errors", "Functions", "Guard"]
    },
    {
      "filePath": "fn/throws-error-of-type",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "throwsErrorOfType",
      "namespacedName": "Fn.throwsErrorOfType",
      "slug": "fn/throws-error-of-type",
      "title": "Fn.throwsErrorOfType",
      "@description": "Asserts that a value is a `Function` which throws an `Error` of the given type.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Errors", "Functions", "Guard"]
    },
    {
      "filePath": "fn/index",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "LazyValue",
      "namespacedName": "Fn.LazyValue",
      "slug": "fn/lazy-value",
      "title": "Fn.LazyValue",
      "@description": "A function with no arguments, returning a value",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/index",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "AnyFn",
      "namespacedName": "Fn.AnyFn",
      "slug": "fn/any-fn",
      "title": "Fn.AnyFn",
      "@description": "A function of any kind",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/index",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "AnyFnAsync",
      "namespacedName": "Fn.AnyFnAsync",
      "slug": "fn/any-fn-async",
      "title": "Fn.AnyFnAsync",
      "@description": "An async function of any kind",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "fn/index",
      "moduleName": "Fn",
      "moduleNameShort": "Fn",
      "name": "Reducer",
      "namespacedName": "Fn.Reducer",
      "slug": "fn/reducer",
      "title": "Fn.Reducer",
      "@description": "A Reducer function",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "gen/chunk",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "chunk",
      "namespacedName": "Gen.chunk",
      "slug": "gen/chunk",
      "title": "Gen.chunk",
      "@description": "...",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "gen/filter",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "filter",
      "namespacedName": "Gen.filter",
      "slug": "gen/filter",
      "title": "Gen.filter",
      "@description": "Only `yield` each value which passes the predicate.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Generator"]
    },
    {
      "filePath": "gen/map",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "map",
      "namespacedName": "Gen.map",
      "slug": "gen/map",
      "title": "Gen.map",
      "@description": "Transform and `yield` each value produced by a generator.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Generator", "Transform"]
    },
    {
      "filePath": "gen/range",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "range",
      "namespacedName": "Gen.range",
      "slug": "gen/range",
      "title": "Gen.range",
      "@description": "Create a generator which will `yield` a sequence of numbers.\n\nThe `range` generator works by starting with the `floor` value and then yielding each subsequent integer value until\nthe `ceiling` value is reached. The generator continues to yield values until it is exhausted, and can be used to\ngenerate any range of integers, including negative ranges and ranges with non-integer steps.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Data Source", "Generator"]
    },
    {
      "filePath": "gen/reduce-each",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "reduceEach",
      "namespacedName": "Gen.reduceEach",
      "slug": "gen/reduce-each",
      "title": "Gen.reduceEach",
      "@description": "Reduce and `yield` each value produced by a generator.\n\nA higher-order function that takes a `reducer` function as its argument and returns a new function that can be used\nto reduce the values generated by a generator.\n\nThe returned function takes a generator as its argument and returns a new generator that yields the partial results\nof the reduction operation. It works by applying the `reducer` function to each pair of values generated by the input\ngenerator, and yielding the partial results of the reduction operation.\n\nThe `reducer` function takes two arguments: an `accumulator` value that represents the current state of the reduction\noperation, and a `value` generated by the input generator. The reducer function applies some operation to the\naccumulator value and the input value, and returns a new accumulator value that represents the updated state of the\nreduction operation.\n\nIn summary, `reduceEach` is a powerful tool for working with generators in JavaScript and TypeScript. It can be used\nto perform complex reduction operations on large or complex data sets, and can help us write more efficient and\nfocused code.\n\n## Example\n\nIn this example, we use the `range` function to generate a sequence of numbers from `1` to `10`, the `map` function\nto double each value in the sequence, and the `take` function to select the first `5` values in the sequence.\nFinally, we apply the `reduceEach` function with the `sum` function as its argument to generate the partial sums of\nthe remaining values in the sequence.\n\nWe then use a `for...of` loop to iterate over the partial sums generated by the `partialSums` generator, and log them\nto the console.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { map } from 'tightrope/gen/map';\nimport { range } from 'tightrope/gen/range';\nimport { reduceEach } from 'tightrope/gen/reduce-each';\nimport { take } from 'tightrope/gen/take';\nimport { multiply } from 'tightrope/number/multiply';\n\nfunction sum(acc: number, curr: number): number {\n  return acc + curr;\n}\n\nconst partialSums = pipe(range(1, 10), map(multiply(2)), take(5), reduceEach(sum));\n\nfor (const value of partialSums) {\n  console.log(value);\n  //  6\n  // 12\n  // 20\n  // 30\n}\n```\n\n## Use Cases\n\nCommon use cases for `reduceEach`:\n\n1. **Summing values**: calculate the sum of a series of numbers generated by a generator.\n2. **Counting values**: count the number of values generated by a generator that satisfy a given condition.\n3. **Finding minimum or maximum values**: find the minimum or maximum value generated by a generator.\n4. **Concatenating strings**: concatenate a series of strings generated by a generator.\n5. **Grouping values**: group a series of values generated by a generator into a nested structure, such as an object or\n   an array.\n6. **Filtering values**: filter the values generated by a generator based on a given condition.\n7. **Computing averages**: compute the average of a series of numbers generated by a generator.\n8. **Building up an object**: build up an object by accumulating properties and values generated by a generator.\n\nIn general, `reduceEach` can be used in any situation where we need to perform some kind of reduction operation on a\nseries of values generated by a generator. Its flexibility and power make it a versatile tool for working with\ngenerators in JavaScript and TypeScript.\n\n## `reduce` or `reduceEach`?\n\n`reduce` and `reduceEach` are very similar functions, and it can be difficult to decide which one to use in a given\nsituation. Here are some guidelines to help you decide:\n\n1. Use `reduce` if you want to perform a reduction operation on the entire sequence of values generated by a generator,\n   and you only need to return a single value.\n2. Use `reduceEach` if you want to perform a reduction operation on each individual value generated by a generator, and\n   you need to return a sequence of partial results.\n\nIn general, the choice between `reduce` and `reduceEach` will depend on the specific requirements of your problem, as\nwell as the nature of the data you are working with.\n\n- If you need to perform a simple reduction operation on a single sequence of values, `reduce` may be the better\n  choice.\n- If you need to perform a more complex reduction operation that involves multiple sequences of values, or if you need\n  to return a sequence of partial results, `reduceEach` may be the better choice.",
      "@param": [],
      "@returns": "",
      "@see": ["https://jamiemason.github.io/tightrope/api/gen/reduce"],
      "@tags": ["Generator", "Transform", "Transform Value"]
    },
    {
      "filePath": "gen/reduce",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "reduce",
      "namespacedName": "Gen.reduce",
      "slug": "gen/reduce",
      "title": "Gen.reduce",
      "@description": "Reduce every value produced by a generator and `yield` the final result.\n\nA higher-order function that takes a reducer function as its argument and returns a new function that can be used to\nreduce the values generated by a generator to a single value.\n\nThe returned function takes a generator as its argument and returns a new generator that yields the final result of\nthe reduction operation.\n\nThe `reduce` function works by using the `reduceEach` function to generate a sequence of partial results for the\nreduction operation, and then returning the final result of the reduction operation.\n\nThe `reducer` function takes two arguments: an `accumulator` value that represents the current state of the reduction\noperation, and a `value` generated by the input generator. The reducer function applies some operation to the\naccumulator value and the input value, and returns a new accumulator value that represents the updated state of the\nreduction operation.\n\nIf an initial value is provided, it will be used as the initial state of the reduction operation. If no initial value\nis provided, the first value generated by the input generator will be used as the initial state.\n\n## Example\n\nIn this example, we use the pipe function to create a pipeline of functions that generate a series of numbers, double\neach number using `multiply(2)`, and then calculate the sum of the resulting values.\n\n1. We define a `sum` function that takes two numbers as input and returns their sum.\n2. We use the `range` function to generate a series of numbers from `1` to `10`.\n3. We use the `map` function with `multiply(2)` to double each number in the series.\n4. We use the `reduce` function to calculate the sum of the resulting values.\n5. We use a `for...of` loop to iterate over the values generated by `doubledSum`, which will be one value, the final\n   total, which should be `110`.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { map } from 'tightrope/gen/map';\nimport { range } from 'tightrope/gen/range';\nimport { reduce } from 'tightrope/gen/reduce';\nimport { multiply } from 'tightrope/number/multiply';\n\nfunction sum(acc: number, curr: number): number {\n  return acc + curr;\n}\n\nconst doubledSum = pipe(range(1, 10), map(multiply(2)), reduce(sum));\n\nfor (const value of doubledSum) {\n  console.log(value); // 110\n}\n```\n\n## `reduce` or `reduceEach`?\n\n`reduce` and `reduceEach` are very similar functions, and it can be difficult to decide which one to use in a given\nsituation. Here are some guidelines to help you decide:\n\n1. Use `reduce` if you want to perform a reduction operation on the entire sequence of values generated by a generator,\n   and you only need to return a single value.\n2. Use `reduceEach` if you want to perform a reduction operation on each individual value generated by a generator, and\n   you need to return a sequence of partial results.\n\nIn general, the choice between `reduce` and `reduceEach` will depend on the specific requirements of your problem, as\nwell as the nature of the data you are working with.\n\n- If you need to perform a simple reduction operation on a single sequence of values, `reduce` may be the better\n  choice.\n- If you need to perform a more complex reduction operation that involves multiple sequences of values, or if you need\n  to return a sequence of partial results, `reduceEach` may be the better choice.",
      "@param": [],
      "@returns": "",
      "@see": ["https://jamiemason.github.io/tightrope/api/gen/reduce-each"],
      "@tags": ["Generator", "Transform", "Transform Value"]
    },
    {
      "filePath": "gen/skip",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "skip",
      "namespacedName": "Gen.skip",
      "slug": "gen/skip",
      "title": "Gen.skip",
      "@description": "Do not `yield` values until after first ignoring `count` values.\n\nA higher-order function that takes a number `num` as its argument and returns a new function that can be used to skip\nthe first `num` values generated by a generator.\n\nThe returned function takes a generator as its argument and returns a new generator that yields all the values\ngenerated by the input generator except for the first `num` values.\n\n## Example\n\nHere's an example of how to use the `skip` function to skip the first two values generated by a `range` generator:\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { range } from 'tightrope/gen/range';\nimport { skip } from 'tightrope/gen/skip';\n\nconst gen = pipe(range(1, 10), skip(2));\n\nfor (const value of gen) {\n  console.log(value); // 3, 4, 5, 6, 7, 8, 9, 10\n}\n```\n\n## Use Cases\n\nCommon use cases for the `skip` function:\n\n1. Skipping the first `n` items in a sequence: You may need to skip the first `n` items in a sequence of data, either\n   because they are not relevant to your use case or because you have already processed them.\n2. Paginating data: If you are working with large datasets, you may need to paginate the data to improve performance.\n   The `skip` function can be used to skip the first `n` items in each page of data.\n3. Splitting data into batches: If you are processing data in batches, you may need to skip the first `n` items in each\n   batch to avoid processing duplicate data.\n4. Skipping headers or footers in a file: If you are processing a file with a header or footer, you may need to skip\n   those lines before processing the rest of the file.\n\nOverall, the skip function is a useful tool for skipping over irrelevant or already-processed data in a sequence, and\ncan be used in a variety of contexts to improve the efficiency and readability of your code.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Generator"]
    },
    {
      "filePath": "gen/split",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "split",
      "namespacedName": "Gen.split",
      "slug": "gen/split",
      "title": "Gen.split",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Generator", "Transformer"]
    },
    {
      "filePath": "gen/take-last",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "takeLast",
      "namespacedName": "Gen.takeLast",
      "slug": "gen/take-last",
      "title": "Gen.takeLast",
      "@description": "Consume a generator and `yield` only the final result.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Generator"]
    },
    {
      "filePath": "gen/take",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "take",
      "namespacedName": "Gen.take",
      "slug": "gen/take",
      "title": "Gen.take",
      "@description": "Do not `yield` values after `count` values have been yielded.\n\nA higher-order function that takes a number amount as its argument and returns a new function that can be used to\ntake the first amount values generated by a generator.\n\nThe returned function takes a generator as its argument and returns a new generator that yields at most the first\namount values generated by the input generator.\n\n## Example\n\nHere's an example of how to use the `take` function to take the first three values generated by a range generator:\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { range } from 'tightrope/gen/range';\nimport { take } from 'tightrope/gen/take';\n\nconst gen = pipe(range(1, 10), take(3));\n\nfor (const value of gen) {\n  console.log(value); // 1, 2, 3\n}\n```\n\nIn this example, we use the `pipe` function to create a new generator that takes the first three values generated by\nthe `range` generator.\n\nWe create a new generator `gen` that is the result of applying the `pipe` function to the `range` generator.\n\nWe use a `for...of` loop to iterate over the values generated by the `gen` generator and log them to the console.\n\nThe output of the code should be `1, 2, 3`.\n\nIn summary, the `take` function is a useful tool for limiting the number of values generated by a generator. By using\nit in combination with other functions from tightrope, we can create powerful and flexible pipelines that help us\nwrite more efficient and focused code.\n\n## Use Cases\n\nHere are some common use cases for the `take` function:\n\n1. Limiting the size of data: You may need to limit the size of a dataset to improve performance or prevent memory\n   issues. The `take` function can be used to limit the number of items processed at any one time.\n2. Extracting a subset of data: If you are working with a large dataset, you may need to extract a subset of the data\n   that meets certain criteria. The `take` function can be used to extract the first n items that meet your\n   criteria.\n3. Creating a sample: If you are working with a large dataset and want to create a smaller sample for testing or\n   exploration, the `take` function can be used to extract a random or fixed number of items from the dataset.\n\nOverall, the `take` function is a versatile tool that can be used in a variety of contexts to limit the size of data\nor extract subsets of data from a larger dataset.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Generator"]
    },
    {
      "filePath": "gen/index",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "Gen",
      "namespacedName": "Gen.Gen",
      "slug": "gen/gen",
      "title": "Gen.Gen",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "gen/index",
      "moduleName": "Gen",
      "moduleNameShort": "Gen",
      "name": "Iter",
      "namespacedName": "Gen.Iter",
      "slug": "gen/iter",
      "title": "Gen.Iter",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "guard/has-property",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "hasProperty",
      "namespacedName": "Guard.hasProperty",
      "slug": "guard/has-property",
      "title": "Guard.hasProperty",
      "@description": "Returns true if a value has a property of the given name, even if the value of that property is `undefined`.\n\nThis assertion describes the shape of the given value. For example, value.prop is `undefined` in both of the\nfollowing scenarios, but `{ prop: undefined }` and `{ }` do not have the same shape.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Guard", "Objects"]
    },
    {
      "filePath": "guard/has-type",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "hasType",
      "namespacedName": "Guard.hasType",
      "slug": "guard/has-type",
      "title": "Guard.hasType",
      "@description": "Return true if `value` is an instance of a class with the given `name`.\n\n## Examples\n\n```ts\nconst isString = hasType('String');\nisString('hello'); // true\nisString(new String('hello')); // true\nisString(123); // false\n\nconst isArray = hasType('Array');\nisArray([1, 2, 3]); // true\nisArray('hello'); // false\n\nconst isFunction = hasType('Function');\nisFunction(()=> {})); // true\nisFunction('hello'); // false\n\nclass Person {\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n}\n\nconst isPerson = hasType('Person');\nisPerson(new Person('Alice', 25)); // true\nisPerson({ name: 'Bob', age: 30 }); // false\n```\n\n## Use Cases\n\n- Validating user input in a web application to ensure that it is of the expected type.\n- Checking the type of data returned from an external API or data source to ensure it conforms to your expectations.\n- Type checking and casting values in a custom function or utility module.\n- Testing or debugging code by verifying that a value has the expected type before continuing with further processing.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "guard/is-asymmetric-match",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "isAsymmetricMatch",
      "namespacedName": "Guard.isAsymmetricMatch",
      "slug": "guard/is-asymmetric-match",
      "title": "Guard.isAsymmetricMatch",
      "@description": "Does the given value match the given asymmetric matcher",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "guard/is-asymmetric-matcher",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "AnyAsymmetricMatcher",
      "namespacedName": "Guard.AnyAsymmetricMatcher",
      "slug": "guard/any-asymmetric-matcher",
      "title": "Guard.AnyAsymmetricMatcher",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "guard/is-asymmetric-matcher",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "AsymmetricMatcher",
      "namespacedName": "Guard.AsymmetricMatcher",
      "slug": "guard/asymmetric-matcher",
      "title": "Guard.AsymmetricMatcher",
      "@description": "A Jasmine-like asymmetric matcher",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "guard/is-asymmetric-matcher",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "AsymmetricMatcherType",
      "namespacedName": "Guard.AsymmetricMatcherType",
      "slug": "guard/asymmetric-matcher-type",
      "title": "Guard.AsymmetricMatcherType",
      "@description": "Get type of a Jasmine-like asymmetric matcher",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "guard/is-asymmetric-matcher",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "isAsymmetricMatcher",
      "namespacedName": "Guard.isAsymmetricMatcher",
      "slug": "guard/is-asymmetric-matcher",
      "title": "Guard.isAsymmetricMatcher",
      "@description": "...",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "guard/is-boolean",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "isBoolean",
      "namespacedName": "Guard.isBoolean",
      "slug": "guard/is-boolean",
      "title": "Guard.isBoolean",
      "@description": "Asserts that a value is `true`, `false`, `new Boolean(true)`, or `new Boolean(false)`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Booleans", "Guard"]
    },
    {
      "filePath": "guard/is-false",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "isFalse",
      "namespacedName": "Guard.isFalse",
      "slug": "guard/is-false",
      "title": "Guard.isFalse",
      "@description": "Asserts that a value is `false` or `new Boolean(false)`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Booleans", "Guard"]
    },
    {
      "filePath": "guard/is-nil",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "Nil",
      "namespacedName": "Guard.Nil",
      "slug": "guard/nil",
      "title": "Guard.Nil",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "guard/is-nil",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "isNil",
      "namespacedName": "Guard.isNil",
      "slug": "guard/is-nil",
      "title": "Guard.isNil",
      "@description": "Asserts that a value is `null` or `undefined`",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Truthiness"]
    },
    {
      "filePath": "guard/is-primitive",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "Primitive",
      "namespacedName": "Guard.Primitive",
      "slug": "guard/primitive",
      "title": "Guard.Primitive",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "guard/is-primitive",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "isPrimitive",
      "namespacedName": "Guard.isPrimitive",
      "slug": "guard/is-primitive",
      "title": "Guard.isPrimitive",
      "@description": "Return true if value is `null`, `undefined`, `number`, `string`, or `boolean`",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Primitives"]
    },
    {
      "filePath": "guard/is-readable",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "isReadable",
      "namespacedName": "Guard.isReadable",
      "slug": "guard/is-readable",
      "title": "Guard.isReadable",
      "@description": "Asserts that a value is safe to attempt to read property values from.\n\nOnly `null` and `undefined` will error if you try to read a property on them using dot notation.\n\n## Example",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Arrays", "Guard", "Objects"]
    },
    {
      "filePath": "guard/is-reg-exp",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "isRegExp",
      "namespacedName": "Guard.isRegExp",
      "slug": "guard/is-reg-exp",
      "title": "Guard.isRegExp",
      "@description": "Asserts that a value is a `RegExp`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Regexp"]
    },
    {
      "filePath": "guard/is-true",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "isTrue",
      "namespacedName": "Guard.isTrue",
      "slug": "guard/is-true",
      "title": "Guard.isTrue",
      "@description": "Asserts that a value is `true` or `new Boolean(true)`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Booleans", "Guard"]
    },
    {
      "filePath": "guard/is-truthy",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "Truthy",
      "namespacedName": "Guard.Truthy",
      "slug": "guard/truthy",
      "title": "Guard.Truthy",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "guard/is-truthy",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "isTruthy",
      "namespacedName": "Guard.isTruthy",
      "slug": "guard/is-truthy",
      "title": "Guard.isTruthy",
      "@description": "Asserts that a value is not falsy.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Truthiness"]
    },
    {
      "filePath": "guard/is-undefined",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "isUndefined",
      "namespacedName": "Guard.isUndefined",
      "slug": "guard/is-undefined",
      "title": "Guard.isUndefined",
      "@description": "Asserts that a value is `undefined`",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Truthiness"]
    },
    {
      "filePath": "guard/is",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "is",
      "namespacedName": "Guard.is",
      "slug": "guard/is",
      "title": "Guard.is",
      "@description": "Returns whether both values are referentially equal, ie. `a === b`. This will be the case when both values are\nprimitives (undefined, number, null, string, or boolean) or they are objects which both point to the same address in\nmemory.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Guard"]
    },
    {
      "filePath": "guard/index",
      "moduleName": "Guard",
      "moduleNameShort": "Guard",
      "name": "Guard",
      "namespacedName": "Guard.Guard",
      "slug": "guard/guard",
      "title": "Guard.Guard",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "number/clamp",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "clamp",
      "namespacedName": "N.clamp",
      "slug": "number/clamp",
      "title": "Number.clamp",
      "@description": "Returns a number within the specified range, if the original value is not already within that range.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Numbers", "Transform", "Transform Value"]
    },
    {
      "filePath": "number/divide",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "divide",
      "namespacedName": "N.divide",
      "slug": "number/divide",
      "title": "Number.divide",
      "@description": "Divide one number by another.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Numbers", "Transform", "Transform Value"]
    },
    {
      "filePath": "number/is-calculable",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isCalculable",
      "namespacedName": "N.isCalculable",
      "slug": "number/is-calculable",
      "title": "Number.isCalculable",
      "@description": "Assert value can be used in Mathemetic calculations despite not being a `Number`, for example `'1' * '2' === 2`\nwhereas `'wut?' * 2 === NaN`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Numbers", "Strings"]
    },
    {
      "filePath": "number/is-decimal-number",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isDecimalNumber",
      "namespacedName": "N.isDecimalNumber",
      "slug": "number/is-decimal-number",
      "title": "Number.isDecimalNumber",
      "@description": "Asserts that a value is a `Number` with positive decimal places.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Numbers"]
    },
    {
      "filePath": "number/is-divisible-by",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isDivisibleBy",
      "namespacedName": "N.isDivisibleBy",
      "slug": "number/is-divisible-by",
      "title": "Number.isDivisibleBy",
      "@description": "Asserts that a value is a `Number` which results in a whole number when divided by another.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Numbers"]
    },
    {
      "filePath": "number/is-even-number",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isEvenNumber",
      "namespacedName": "N.isEvenNumber",
      "slug": "number/is-even-number",
      "title": "Number.isEvenNumber",
      "@description": "Asserts that a value is an even `Number`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Numbers"]
    },
    {
      "filePath": "number/is-greater-than-or-equal-to",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isGreaterThanOrEqualTo",
      "namespacedName": "N.isGreaterThanOrEqualTo",
      "slug": "number/is-greater-than-or-equal-to",
      "title": "Number.isGreaterThanOrEqualTo",
      "@description": "Asserts that a value is greater than or equal to other.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Guard", "Numbers"]
    },
    {
      "filePath": "number/is-greater-than",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isGreaterThan",
      "namespacedName": "N.isGreaterThan",
      "slug": "number/is-greater-than",
      "title": "Number.isGreaterThan",
      "@description": "Asserts that a value is greater than another.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Guard", "Numbers"]
    },
    {
      "filePath": "number/is-js-nan",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "JsNaN",
      "namespacedName": "N.JsNaN",
      "slug": "number/js-na-n",
      "title": "Number.JsNaN",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "number/is-js-nan",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isJsNaN",
      "namespacedName": "N.isJsNaN",
      "slug": "number/is-js-na-n",
      "title": "Number.isJsNaN",
      "@description": "Asserts that a value is `NaN`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Numbers"]
    },
    {
      "filePath": "number/is-less-than-or-equal-to",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isLessThanOrEqualTo",
      "namespacedName": "N.isLessThanOrEqualTo",
      "slug": "number/is-less-than-or-equal-to",
      "title": "Number.isLessThanOrEqualTo",
      "@description": "Asserts that a value is less than or equal to another.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Guard", "Numbers"]
    },
    {
      "filePath": "number/is-less-than",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isLessThan",
      "namespacedName": "N.isLessThan",
      "slug": "number/is-less-than",
      "title": "Number.isLessThan",
      "@description": "Asserts that a value is less than another.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Guard", "Numbers"]
    },
    {
      "filePath": "number/is-near",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isNear",
      "namespacedName": "N.isNear",
      "slug": "number/is-near",
      "title": "Number.isNear",
      "@description": "Asserts that a value is a number within the given acceptable distance from another.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Guard", "Numbers"]
    },
    {
      "filePath": "number/is-negative-number",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isNegativeNumber",
      "namespacedName": "N.isNegativeNumber",
      "slug": "number/is-negative-number",
      "title": "Number.isNegativeNumber",
      "@description": "Asserts that a value is a `Number` less than 0.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Guard", "Numbers"]
    },
    {
      "filePath": "number/is-number",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isNumber",
      "namespacedName": "N.isNumber",
      "slug": "number/is-number",
      "title": "Number.isNumber",
      "@description": "Asserts that a value is a valid `Number` or `new Number()` and not `NaN`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Numbers"]
    },
    {
      "filePath": "number/is-odd-number",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "OddNumber",
      "namespacedName": "N.OddNumber",
      "slug": "number/odd-number",
      "title": "Number.OddNumber",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "number/is-odd-number",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isOddNumber",
      "namespacedName": "N.isOddNumber",
      "slug": "number/is-odd-number",
      "title": "Number.isOddNumber",
      "@description": "Asserts that a value is an odd `Number`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Numbers"]
    },
    {
      "filePath": "number/is-positive-number",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "PositiveNumber",
      "namespacedName": "N.PositiveNumber",
      "slug": "number/positive-number",
      "title": "Number.PositiveNumber",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "number/is-positive-number",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isPositiveNumber",
      "namespacedName": "N.isPositiveNumber",
      "slug": "number/is-positive-number",
      "title": "Number.isPositiveNumber",
      "@description": "Asserts that a value is a `Number` greater than 0.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Numbers"]
    },
    {
      "filePath": "number/is-whole-number",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "WholeNumber",
      "namespacedName": "N.WholeNumber",
      "slug": "number/whole-number",
      "title": "Number.WholeNumber",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "number/is-whole-number",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isWholeNumber",
      "namespacedName": "N.isWholeNumber",
      "slug": "number/is-whole-number",
      "title": "Number.isWholeNumber",
      "@description": "Asserts that a value is a `Number` with no positive decimal places, both `10`\nand `10.0` are considered whole numbers.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Numbers"]
    },
    {
      "filePath": "number/is-within-range",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "isWithinRange",
      "namespacedName": "N.isWithinRange",
      "slug": "number/is-within-range",
      "title": "Number.isWithinRange",
      "@description": "Asserts that a value is a `Number` which is both greater than or equal to `floor` and less than or equal to\n`ceiling`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Numbers"]
    },
    {
      "filePath": "number/multiply",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "multiply",
      "namespacedName": "N.multiply",
      "slug": "number/multiply",
      "title": "Number.multiply",
      "@description": "Multiply two numbers",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Numbers", "Transform", "Transform Value"]
    },
    {
      "filePath": "number/square",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "square",
      "namespacedName": "N.square",
      "slug": "number/square",
      "title": "Number.square",
      "@description": "Multiply a number by itself",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Numbers", "Transform", "Transform Value"]
    },
    {
      "filePath": "number/subtract",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "subtract",
      "namespacedName": "N.subtract",
      "slug": "number/subtract",
      "title": "Number.subtract",
      "@description": "Subtract one number from another",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Numbers", "Transform", "Transform Value"]
    },
    {
      "filePath": "number/sum",
      "moduleName": "Number",
      "moduleNameShort": "N",
      "name": "sum",
      "namespacedName": "N.sum",
      "slug": "number/sum",
      "title": "Number.sum",
      "@description": "Return the sum of two numbers",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Numbers", "Transform", "Transform Value"]
    },
    {
      "filePath": "option/and-then",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "andThen",
      "namespacedName": "O.andThen",
      "slug": "option/and-then",
      "title": "Option.andThen",
      "@description": "Applies a mapping function to the value of an `Option`, returning a new `Option`. If the input `Option` is `None`,\nthe function immediately returns `None` without calling the mapping function.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Option", "Right Biased", "Transform", "Transform Option"]
    },
    {
      "filePath": "option/and",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "and",
      "namespacedName": "O.and",
      "slug": "option/and",
      "title": "Option.and",
      "@description": "Combines two `Option`s, returning the second `Option` if both are `Some`, and `None` otherwise.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Option", "Transform", "Transform Option"]
    },
    {
      "filePath": "option/expect",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "expect",
      "namespacedName": "O.expect",
      "slug": "option/expect",
      "title": "Option.expect",
      "@description": "Unwraps an `Option` value, returning the underlying value if it is `Some`. If the value is `None`, this function\npanics with the provided error message.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
    },
    {
      "filePath": "option/filter",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "filter",
      "namespacedName": "O.filter",
      "slug": "option/filter",
      "title": "Option.filter",
      "@description": "Calls the provided predicate function on the contained value I if the `Option` is `Some(I)`, and returns `Some(I)` if\nthe function returns `true`; otherwise, returns `None`",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Filter", "Option", "Right Biased"]
    },
    {
      "filePath": "option/flatten",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "flatten",
      "namespacedName": "O.flatten",
      "slug": "option/flatten",
      "title": "Option.flatten",
      "@description": "Removes one level of nesting from an `Option<Option<T>>`",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Option", "Transform", "Transform Option"]
    },
    {
      "filePath": "option/from-guard",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "fromGuard",
      "namespacedName": "O.fromGuard",
      "slug": "option/from-guard",
      "title": "Option.fromGuard",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Invoke", "Option", "Wrap"]
    },
    {
      "filePath": "option/is-none",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "isNone",
      "namespacedName": "O.isNone",
      "slug": "option/is-none",
      "title": "Option.isNone",
      "@description": "Returns true if the given value is a `None` instance, false otherwise.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Errors", "Guard", "Option"]
    },
    {
      "filePath": "option/is-some",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "isSome",
      "namespacedName": "O.isSome",
      "slug": "option/is-some",
      "title": "Option.isSome",
      "@description": "Determine whether a value is an instance of `Some`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Option"]
    },
    {
      "filePath": "option/map-or-else",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "mapOrElse",
      "namespacedName": "O.mapOrElse",
      "slug": "option/map-or-else",
      "title": "Option.mapOrElse",
      "@description": "Applies the provided function to the contained value of `Some`, or returns the result of evaluating the provided\nfallback function if the `Option` is `None`",
      "@param": [
        {
          "name": "mapFn",
          "description": "The function to apply to the contained value of `Some`."
        },
        {
          "name": "defaultFn",
          "description": "The fallback function to evaluate if the `Option` is `None`."
        },
        {
          "name": "opt",
          "description": "The `Option` to apply the provided function to."
        }
      ],
      "@returns": "The result of applying the provided function to the contained value of `Some`, or the result of evaluating\n  the fallback function if the `Option` is `None`.",
      "@see": [],
      "@tags": [
        "Option",
        "Result",
        "Right Biased",
        "Transform",
        "Transform Option",
        "Unwrap"
      ]
    },
    {
      "filePath": "option/map-or",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "mapOr",
      "namespacedName": "O.mapOr",
      "slug": "option/map-or",
      "title": "Option.mapOr",
      "@description": "Applies the provided function to the contained value of `Some`, or returns the provided default value if the `Option`\nis `None`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": [
        "Option",
        "Right Biased",
        "Transform",
        "Transform Option",
        "Unwrap"
      ]
    },
    {
      "filePath": "option/map",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "map",
      "namespacedName": "O.map",
      "slug": "option/map",
      "title": "Option.map",
      "@description": "Transforms `Option<T>` to `Option<U>` by applying the provided function to the contained value of `Some` and leaving\n`None` values unchanged.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Option", "Right Biased", "Transform", "Transform Value"]
    },
    {
      "filePath": "option/match",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "match",
      "namespacedName": "O.match",
      "slug": "option/match",
      "title": "Option.match",
      "@description": "Extract value from both a `Some` or a `None`.\n\nThe match function takes an object containing two functions: `Some` and `None`, which are used to handle the values\nof the `Some` and `None` variants of an `Option` object. It then returns a new function that takes an `Option` object\nand returns the result of applying either the `Some` or `None` function to the value inside the `Option`, depending\non which variant it contains.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Option", "Unwrap"]
    },
    {
      "filePath": "option/ok-or-else",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "okOrElse",
      "namespacedName": "O.okOrElse",
      "slug": "option/ok-or-else",
      "title": "Option.okOrElse",
      "@description": "Transforms an `Option` to a `Result`. A `Some(v)` becomes `Ok(v)` and `None` becomes `Err` using the provided\nfunction.",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else"
      ],
      "@tags": ["Option", "Result", "Transform"]
    },
    {
      "filePath": "option/ok-or",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "okOr",
      "namespacedName": "O.okOr",
      "slug": "option/ok-or",
      "title": "Option.okOr",
      "@description": "Transforms `Some(v)` to `Ok(v)`, and `None` to a value of `Err` using the provided default error value.",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or"
      ],
      "@tags": [
        "Option",
        "Result",
        "Right Biased",
        "Transform",
        "Transform Option",
        "Unwrap"
      ]
    },
    {
      "filePath": "option/option",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "Option",
      "namespacedName": "O.Option",
      "slug": "option/option",
      "title": "Option.Option",
      "@description": "`Option` is a type that represents either a value (`Some`) or the absence of a value (`None`).\n\n`Option<T>` is the type used for expressing the possibility of the absence of a value. It is an enum with the\nvariants, `Some(T)`, representing the presence of a value, and `None`, representing the absence of a value.\n\n:::info\n\n`Option` allows you to construct a pipeline of commands that handle both the `Some` and `None` variants. This is\nuseful for handling cases where a value might be missing or undefined, and branching based on whether the previous\noperation returned a value or not.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `Option` is sometimes referred to as `Maybe`.\n- `Some` is sometimes referred to as `Just` or \"the value path\".\n- `None` is sometimes referred to as `Nothing` or \"the empty path\".\n\n:::",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Option", "Type"]
    },
    {
      "filePath": "option/option",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "Option",
      "namespacedName": "O.Option",
      "slug": "option/option",
      "title": "Option.Option",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "option/option",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "Some",
      "namespacedName": "O.Some",
      "slug": "option/some",
      "title": "Option.Some",
      "@description": "Represent a value in the `Option` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Some } from 'tightrope/option';\n\nconst value = Some.create('Hello, world!');\n```\n\nYou can check if a value is a `Some` instance by using the `isSome` function.\n\n```ts\nimport { isSome } from 'tightrope/option/is-some';\n\nconst value = Some.create('Hello, world!');\nconsole.log(isSome(value)); // true\nconsole.log(isSome('foo')); // false\nconsole.log(isSome('Hello, world! but this is not inside a Some')); // false\n```\n\n`Some` instances are usually returned from functions that might not return a value, and are combined with `None`\ninstances using the `Option` type.\n\n## Use Cases\n\nCreating a `Some` instance directly is useful when you want to represent a value in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom value handler for your application and you need to represent a specific value\ncondition, you can create a `Some` instance directly with the value you want to use. This can give you more control\nover the specific values that your application can encounter and how they are handled.\n\nAnother use case for creating a `Some` instance directly is when you are writing tests for your application and you\nwant to simulate a value condition. By creating a `Some` instance directly with a specific value, you can test how\nyour application handles that value condition and ensure that it behaves as expected.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Class", "Option", "Wrap"]
    },
    {
      "filePath": "option/option",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "None",
      "namespacedName": "O.None",
      "slug": "option/none",
      "title": "Option.None",
      "@description": "Represent an absence of value in the `Option` type.\n\n## Example\n\nYou can check if a value is a `None` instance by using the `isNone` function.\n\n```ts\nimport { isNone } from 'tightrope/option/is-none';\n\nconsole.log(isNone(none)); // true\nconsole.log(isNone('foo')); // false\nconsole.log(isNone(null)); // false\n```\n\n`None` instances are usually returned from functions that might not return a value, and are combined with `Some`\ninstances using the `Option` type.\n\n## Use Cases\n\nReferencing the `None` instance is useful when you want to represent an absence of value in your program without\nhaving to go through a pipeline or helper method that might not always be available or suitable for your specific use\ncase.\n\nFor example, if you're writing a custom value handler for your application and you need to represent a specific\nabsence of value condition, you can reference the `None` instance. This can give you more control over the specific\nvalue absences that your application can encounter and how they are handled.\n\nAnother use case for referencing the `None` instance is when you are writing tests for your application and you want\nto simulate a value absence condition. By referencing the `None` instance, you can test how your application handles\nthat value absence condition and ensure that it behaves as expected.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Class", "Errors", "Option", "Wrap"]
    },
    {
      "filePath": "option/option",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "none",
      "namespacedName": "O.none",
      "slug": "option/none",
      "title": "Option.none",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "option/or-else",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "orElse",
      "namespacedName": "O.orElse",
      "slug": "option/or-else",
      "title": "Option.orElse",
      "@description": "Transforms `Some(v)` to `Some(v)`, and `None` to a new `Option` using the provided function.\n\nThe `orElse` function takes a function `orElseFn` and an `Option` object as its arguments. If the input `Option`\nobject is a `Some`, it returns the same `Some` object. If the input `Option` object is a `None`, it calls the\nprovided `orElseFn` function and returns the resulting `Option`.\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { Option } from 'tightrope/option';\nimport { none } from 'tightrope/option';\nimport { Some } from 'tightrope/option';\nimport { orElse } from 'tightrope/option/or-else';\n\nconst defaultOption = () => Some.create(42);\n\nconst option1 = pipe(Some.create(5), orElse(defaultOption));\n// Output: Some(5)\n\nconst option2 = pipe(none, orElse(defaultOption));\n// Output: Some(42)\n```\n\n## Use Cases\n\nThe `orElse` function is useful when you want to provide a fallback `Option` object in case the input `Option` is a\n`None`. It allows you to handle both cases of `Some` and `None` in a more flexible way.\n\nSome use cases of `orElse` include:\n\n- Providing a default value for cases when a value is not found in a collection or when an operation fails.\n- Mapping over a collection and returning the first element that meets a specific criteria. If no element is found,\n  returning a default `Option`.\n- Handling errors in a way that gracefully falls back to a default value, such as when making API calls and the server\n  returns an error response.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": [
        "Errors",
        "Left Biased",
        "Option",
        "Recover",
        "Transform",
        "Transform Option"
      ]
    },
    {
      "filePath": "option/or",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "or",
      "namespacedName": "O.or",
      "slug": "option/or",
      "title": "Option.or",
      "@description": "Like the `||` operator, but applied to `Option` types.\n\n| Scenario         | Pseudocode               | Outcome                   |\n| :--------------- | :----------------------- | ------------------------- |\n| `Some OR None`   | `pipe(Some, or(None))`   | `Some`                    |\n| `None OR Some`   | `pipe(None, or(Some))`   | `Some`                    |\n| `None1 OR None2` | `pipe(None1, or(None2))` | `None2`                   |\n| `Some1 OR Some2` | `pipe(Some1, or(Some2))` | `Some1` (first Some wins) |",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": [
        "Errors",
        "Left Biased",
        "Option",
        "Recover",
        "Transform",
        "Transform Option"
      ]
    },
    {
      "filePath": "option/unwrap-or-else",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "unwrapOrElse",
      "namespacedName": "O.unwrapOrElse",
      "slug": "option/unwrap-or-else",
      "title": "Option.unwrapOrElse",
      "@description": "Extract value from a `Some` or from a fallback `() => value` if a `None`",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
      ],
      "@tags": [
        "Errors",
        "Left Biased",
        "Result",
        "Transform",
        "Transform Result",
        "Unwrap"
      ]
    },
    {
      "filePath": "option/unwrap-or",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "unwrapOr",
      "namespacedName": "O.unwrapOr",
      "slug": "option/unwrap-or",
      "title": "Option.unwrapOr",
      "@description": "Extract value from a `Some` or use a fallback value if a `None`",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap_or"
      ],
      "@tags": [
        "Errors",
        "Left Biased",
        "Option",
        "Recover",
        "Transform",
        "Transform Option",
        "Unwrap"
      ]
    },
    {
      "filePath": "option/unwrap",
      "moduleName": "Option",
      "moduleNameShort": "O",
      "name": "unwrap",
      "namespacedName": "O.unwrap",
      "slug": "option/unwrap",
      "title": "Option.unwrap",
      "@description": "Extract value from a `Some` or throw on a `None`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
    },
    {
      "filePath": "object/is-empty-object",
      "moduleName": "Object",
      "moduleNameShort": "Obj",
      "name": "isEmptyObject",
      "namespacedName": "Obj.isEmptyObject",
      "slug": "object/is-empty-object",
      "title": "Object.isEmptyObject",
      "@description": "Asserts that a value is a valid `Object` containing no instance members.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Emptiness", "Guard", "Objects"]
    },
    {
      "filePath": "object/is-non-empty-object",
      "moduleName": "Object",
      "moduleNameShort": "Obj",
      "name": "isNonEmptyObject",
      "namespacedName": "Obj.isNonEmptyObject",
      "slug": "object/is-non-empty-object",
      "title": "Object.isNonEmptyObject",
      "@description": "Asserts that a value is an `Object` containing at least one own member.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Emptiness", "Guard", "Objects"]
    },
    {
      "filePath": "object/is-null",
      "moduleName": "Object",
      "moduleNameShort": "Obj",
      "name": "isNull",
      "namespacedName": "Obj.isNull",
      "slug": "object/is-null",
      "title": "Object.isNull",
      "@description": "Asserts that a value is `null`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Truthiness"]
    },
    {
      "filePath": "object/is-object",
      "moduleName": "Object",
      "moduleNameShort": "Obj",
      "name": "isObject",
      "namespacedName": "Obj.isObject",
      "slug": "object/is-object",
      "title": "Object.isObject",
      "@description": "Asserts that a value is an `Object`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Objects"]
    },
    {
      "filePath": "object/index",
      "moduleName": "Object",
      "moduleNameShort": "Obj",
      "name": "AnyRecord",
      "namespacedName": "Obj.AnyRecord",
      "slug": "object/any-record",
      "title": "Object.AnyRecord",
      "@description": "Misc Object",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "result/all",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "all",
      "namespacedName": "R.all",
      "slug": "result/all",
      "title": "Result.all",
      "@description": "Takes an array of `Result` values and returns a `Result` containing an array of `Ok` values if all input values are\n`Ok`. If any input value is an `Err`, returns an `Err` containing an array of all encountered `Err` values.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Array", "Result"]
    },
    {
      "filePath": "result/and-then",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "andThen",
      "namespacedName": "R.andThen",
      "slug": "result/and-then",
      "title": "Result.andThen",
      "@description": "Same as `flatMap` or `chain`, transform a `Result` with the value of another.\n\nWhen your function returns a `Result` object, you can use `andThen` to transform the `Ok` variant itself.\n\n::: tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\n:::\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport type { Result } from 'tightrope/result';\nimport { Err, Ok } from 'tightrope/result';\nimport { andThen } from 'tightrope/result/and-then';\nimport { map } from 'tightrope/result/map';\nimport { multiply } from 'tightrope/number/multiply';\nimport { unwrapOr } from 'tightrope/result/unwrap-or';\n\nfunction divide(x: number, y: number): Result<number, Error> {\n  if (y === 0) {\n    return new Err(new Error('Division by zero'));\n  }\n  return new Ok(x / y);\n}\n\nconst amount = pipe(\n  Ok.create<number, Error>(16),\n  andThen((n) => divide(n, 2)),\n  andThen((n) => divide(n, 4)),\n  map(multiply(100)),\n  unwrapOr(0),\n);\n\nconsole.log(amount); // 200\n```\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`andThen` runs on the `Ok` variant. If any of the operations return an `Err` object then `andThen` will skip and\nreturn the `Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `andThen` is sometimes referred to as `chain` or `flatMap`.\n- `Result` is sometimes referred to as `Either`.\n- `Ok` is sometimes referred to as `Right` or \"the happy path\".\n- `Err` is sometimes referred to as `Left` or \"the sad path\".\n\n:::",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.and_then"
      ],
      "@tags": ["Result", "Right Biased", "Transform", "Transform Result"]
    },
    {
      "filePath": "result/and",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "and",
      "namespacedName": "R.and",
      "slug": "result/and",
      "title": "Result.and",
      "@description": "Like the `&&` operator, but applied to `Result` types.\n\nThe `and` function is used to combine two `Result` objects, returning either the first error encountered, or the\nsecond `Ok` value if both `Result` objects are successful.\n\n## Behaviour\n\n`and` behaves just like the `&&` operator, but for support of `Result` types:\n\n| Scenario       | Pseudocode              | Outcome |\n| :------------- | :---------------------- | :------ |\n| `Ok && Err`    | `pipe(Ok, and(Err))`    | `Err`   |\n| `Err && Ok`    | `pipe(Err, and(Ok))`    | `Err`   |\n| `Err1 && Err2` | `pipe(Err1, and(Err2))` | `Err1`  |\n| `Ok1 && Ok2`   | `pipe(Ok1, and(Ok2))`   | `Ok2`   |\n\n## Examples\n\nIn this example, the `and` function is used to combine two `Result` objects (`result1` and `result2`). Since\n`result2` is an `Err` object, the final result is also an `Err` object containing the error message.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { and } from 'tightrope/result/and';\nimport { divide } from 'tightrope/number/divide';\n\nconst result1 = divide(10, 5); // returns Ok(2)\nconst result2 = divide(20, 0); // returns Err(\"Cannot divide by zero\")\n\nconst finalResult = pipe(result1, and(result2));\n\nconsole.log(finalResult); // Err(\"Cannot divide by zero\")\n```\n\nIn this example, the `and` function is used to combine two `Result` objects (`result1` and `result2`). Since both\n`Result` objects are successful, the final result is the second `Ok` value (`Ok(5)`).\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { and } from 'tightrope/result/and';\nimport { divide } from 'tightrope/number/divide';\n\nconst result1 = divide(10, 5); // returns Ok(2)\nconst result2 = divide(20, 4); // returns Ok(5)\n\nconst finalResult = pipe(result1, and(result2)); // returns Ok(5)\n\nconsole.log(finalResult); // Ok(5)\n```",
      "@param": [],
      "@returns": "",
      "@see": ["http://jamiemason.github.io/tightrope/api/result/or"],
      "@tags": ["Result", "Transform", "Transform Result"]
    },
    {
      "filePath": "result/expect-err",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "expectErr",
      "namespacedName": "R.expectErr",
      "slug": "result/expect-err",
      "title": "Result.expectErr",
      "@description": "Unwrap an expected `Err` value from a `Result`, or throw if it is an `Ok`.",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect_err"
      ],
      "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
    },
    {
      "filePath": "result/expect",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "expect",
      "namespacedName": "R.expect",
      "slug": "result/expect",
      "title": "Result.expect",
      "@description": "Extract value from an `Ok` or throw with the given message on an `Err`.\n\nUse `expect` to unwrap a `Result` when you are \"certain\" that the `Result` value will be an `Ok`, and you want to\nextract the value contained in it.\n\nIf the `Result` value ever turns out to be an `Err`, it will throw an `Error` with the given message.\n\n:::warning\n\n`expect` will throw if the `Result` is an `Err`.\n\n:::",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect"
      ],
      "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
    },
    {
      "filePath": "result/filter",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "filter",
      "namespacedName": "R.filter",
      "slug": "result/filter",
      "title": "Result.filter",
      "@description": "Keep an `Ok` if its value passes the guard function, or return an `Err`\ncontaining the result of `getErrValue()`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Result", "Right Biased"]
    },
    {
      "filePath": "result/flatten",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "flatten",
      "namespacedName": "R.flatten",
      "slug": "result/flatten",
      "title": "Result.flatten",
      "@description": "Replace nested Results with one `Result` of the inner value.\n\nFlattening only removes one level of nesting at a time\n\n- If given an `Ok` with a normal value, returns the `Ok` as is.\n- If given an `Err` with a normal value, returns the `Err` as is.\n- If given a `Result` with a `Result` value, returns the inner `Result`.",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.flatten"
      ],
      "@tags": ["Result", "Transform", "Transform Result"]
    },
    {
      "filePath": "result/from-guard",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "fromGuard",
      "namespacedName": "R.fromGuard",
      "slug": "result/from-guard",
      "title": "Result.fromGuard",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Invoke", "Result", "Wrap"]
    },
    {
      "filePath": "result/from-try",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "fromTry",
      "namespacedName": "R.fromTry",
      "slug": "result/from-try",
      "title": "Result.fromTry",
      "@description": "Create an `Ok` or `Err` from `try...catch`.\n\nThe purpose of `fromTry` is to safely execute a given function and return either an `Ok` instance with the result or\nan `Err` instance with the caught error.\n\nThe function is executed inside a try-catch block and if it runs without errors, `fromTry` returns an `Ok` instance\nwith the result. Otherwise, `fromTry` returns an `Err` instance with the caught error.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Invoke", "Result", "Wrap"]
    },
    {
      "filePath": "result/is-err",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "isErr",
      "namespacedName": "R.isErr",
      "slug": "result/is-err",
      "title": "Result.isErr",
      "@description": "Check if value is an instance of the `Err` class.\n\nThis can be used to handle error cases in a program flow that uses the `Result` type.\n\nFor example, it can be used to check if the result of a function that returns a `Result` is an `Err` or an `Ok`, and\ntake different actions depending on the outcome.\n\nIt can also be used for validation or error checking, to make sure that the value passed to a function or module is\nof the expected type.",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.is_err"
      ],
      "@tags": ["Errors", "Guard", "Result"]
    },
    {
      "filePath": "result/is-ok",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "isOk",
      "namespacedName": "R.isOk",
      "slug": "result/is-ok",
      "title": "Result.isOk",
      "@description": "Check if value is an instance of the `Ok` class.",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.is_ok"
      ],
      "@tags": ["Guard", "Result"]
    },
    {
      "filePath": "result/is-result",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "isResult",
      "namespacedName": "R.isResult",
      "slug": "result/is-result",
      "title": "Result.isResult",
      "@description": "Check if value is an instance of either the `Ok` or `Err` classes.\n\nYou would use `isResult` when you want to check if a value is a `Result` instance, regardless of whether it contains\nan `Ok` or `Err` variant.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Result"]
    },
    {
      "filePath": "result/map-err",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "mapErr",
      "namespacedName": "R.mapErr",
      "slug": "result/map-err",
      "title": "Result.mapErr",
      "@description": "Transform the value inside the `Err` variant of a `Result`.\n\nIf the input `Result` is an `Err`, the function applies `mapFn` to the error value and returns a new `Result` object\nwith the transformed error value. If the input `Result` is an `Ok`, it simply returns the input `Result` object\nunmodified.\n\nThis function is similar to `map`, but instead of transforming the `Ok` value, it transforms the `Err` value.",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.map_err"
      ],
      "@tags": [
        "Errors",
        "Left Biased",
        "Result",
        "Transform",
        "Transform Value"
      ]
    },
    {
      "filePath": "result/map-or-else",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "mapOrElse",
      "namespacedName": "R.mapOrElse",
      "slug": "result/map-or-else",
      "title": "Result.mapOrElse",
      "@description": "Maps a `Result` by applying fallback function default to a contained `Err` value, or a function to a contained `Ok`\nvalue.\n\nThis function can be used to unpack a successful result while handling an error.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": [
        "Result",
        "Right Biased",
        "Transform",
        "Transform Result",
        "Unwrap"
      ]
    },
    {
      "filePath": "result/map-or",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "mapOr",
      "namespacedName": "R.mapOr",
      "slug": "result/map-or",
      "title": "Result.mapOr",
      "@description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": [
        "Result",
        "Right Biased",
        "Transform",
        "Transform Result",
        "Unwrap"
      ]
    },
    {
      "filePath": "result/map",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "map",
      "namespacedName": "R.map",
      "slug": "result/map",
      "title": "Result.map",
      "@description": "Transform the value inside the `Ok` variant of a `Result`.\n\nIt takes a `mapFn` function as its argument, which takes the current `Ok` value and returns a new value. The `map`\nfunction then returns a new `Result` object containing the transformed value. If the original `Result` object was an\n`Err`, `map` will return the original `Err` without calling the `mapFn` function.\n\nIn other words, `map` allows you to transform the contents of an `Ok` variant of a `Result` object, while leaving an\n`Err` variant unchanged. It's useful when you need to apply a function to a value inside a `Result` object without\nchanging the structure of the `Result` object itself.\n\n## Example\n\nIn this example, `map` is used twice in the `pipe` function to transform the value inside the `Ok` variant of the\n`Result` object. The final `Result` object contains the result of applying both functions to the original value.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { multiply } from 'tightrope/number/multiply';\nimport { sum } from 'tightrope/number/sum';\nimport { Ok } from 'tightrope/result';\nimport { map } from 'tightrope/result/map';\nimport { unwrap } from 'tightrope/result/unwrap';\n\nconst value: number = pipe(Ok.create(2), map(sum(5)), map(multiply(2)), unwrap);\n\nconsole.log(value); // Output: 14\n```\n\n:::tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\nWhen your function returns a value, you can use `map` to transform the value inside an `Ok` variant.\n\n:::\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`map` runs on the `Ok` variant. If any of the operations return an `Err` object then `map` will skip and return the\n`Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.map"
      ],
      "@tags": ["Result", "Right Biased", "Transform", "Transform Value"]
    },
    {
      "filePath": "result/match",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "match",
      "namespacedName": "R.match",
      "slug": "result/match",
      "title": "Result.match",
      "@description": "Extract value from both an `Ok` or an `Err`.\n\nThe match function takes an object containing two functions: `Ok` and `Err`, which are used to handle the values of\nthe `Ok` and `Err` variants of a `Result` object. It then returns a new function that takes a `Result` object and\nreturns the result of applying either the `Ok` or `Err` function to the value inside the `Result`, depending on which\nvariant it contains.\n\n## Example\n\nIn this example, `andThen` is used to transform the `Ok` variant of the `Result` object.\n\n- If the value inside the `Ok` variant is greater than `50`, an `Err` variant containing the error message `\"Value too\n  high\"` is returned.\n- If the value is less than or equal to `50`, an `Ok` variant containing the original value is returned.\n\nThe `match` function is then used to handle the two possible variants of the `Result` object, printing the\nappropriate message to the console.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { andThen } from 'tightrope/result/and-then';\nimport { Err } from 'tightrope/result';\nimport { match } from 'tightrope/result/match';\nimport { Ok } from 'tightrope/result';\n\nconst result = pipe(\n  60,\n  Ok.create,\n  andThen((value) => (value > 50 ? new Err('Value too high') : new Ok(value))),\n  match({\n    Ok: (value) => `The value is ${value}`,\n    Err: (err) => `Error: ${err}`,\n  }),\n);\n\nconsole.log(result); // Outputs: \"Error: Value too high\"\n```\n\n## Use Cases\n\n`match` is used to destructure and extract the value from a `Result` object and perform different actions based on\nwhether it is an `Ok` or `Err`. This is useful when handling errors or when processing data that may or may not\ncontain errors.\n\nOne common use case for `match` is error handling. When an operation can result in an error, it can return a `Result`\nobject that either contains an `Ok` value or an `Err` value. `match` can be used to handle each case separately, for\nexample to log the error message in case of an `Err` or continue processing with the `Ok` value.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Result", "Unwrap"]
    },
    {
      "filePath": "result/ok",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "ok",
      "namespacedName": "R.ok",
      "slug": "result/ok",
      "title": "Result.ok",
      "@description": "Transforms `Result<T, E>` into `Option<T>`, mapping `Ok(v)` to `Some(v)` and `Err(e)` to `None`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Option", "Result", "Transform", "Transform Result"]
    },
    {
      "filePath": "result/or-else",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "orElse",
      "namespacedName": "R.orElse",
      "slug": "result/or-else",
      "title": "Result.orElse",
      "@description": "Like the `||` operator, but applied to `Result` types with an `() => Ok`.",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.or_else"
      ],
      "@tags": [
        "Errors",
        "Left Biased",
        "Recover",
        "Result",
        "Transform",
        "Transform Result"
      ]
    },
    {
      "filePath": "result/or",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "or",
      "namespacedName": "R.or",
      "slug": "result/or",
      "title": "Result.or",
      "@description": "Like the `||` operator, but applied to `Result` types.\n\n| Scenario       | Pseudocode             | Outcome               |\n| :------------- | :--------------------- | --------------------- |\n| `Ok OR Err`    | `pipe(Ok, or(Err))`    | `Ok`                  |\n| `Err OR Ok`    | `pipe(Err, or(Ok))`    | `Ok`                  |\n| `Err1 OR Err2` | `pipe(Err1, or(Err2))` | `Err2`                |\n| `Ok1 OR Ok2`   | `pipe(Ok1, or(Ok2))`   | `Ok1` (first Ok wins) |",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.or"
      ],
      "@tags": [
        "Errors",
        "Left Biased",
        "Recover",
        "Result",
        "Transform",
        "Transform Result"
      ]
    },
    {
      "filePath": "result/result",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "Result",
      "namespacedName": "R.Result",
      "slug": "result/result",
      "title": "Result.Result",
      "@description": "`Result` is a type that represents either success (`Ok`) or failure (`Err`).\n\n`Result<T, E>` is the type used for returning and propagating errors. It is an enum with the variants, `Ok(T)`,\nrepresenting success and containing a value, and `Err(E)`, representing error and containing an error value.\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `Result` is sometimes referred to as `Either`.\n- `Ok` is sometimes referred to as `Right` or \"the happy path\".\n- `Err` is sometimes referred to as `Left` or \"the sad path\".\n\n:::",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Result", "Type"]
    },
    {
      "filePath": "result/result",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "Result",
      "namespacedName": "R.Result",
      "slug": "result/result",
      "title": "Result.Result",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "result/result",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "Ok",
      "namespacedName": "R.Ok",
      "slug": "result/ok",
      "title": "Result.Ok",
      "@description": "Represent a correct value in the `Result` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Ok } from 'tightrope/result';\n\nconst value = new Ok('Success!');\n```\n\nYou can check if a value is an `Ok` instance by using the `isOk` function.\n\n```ts\nimport { isOk } from 'tightrope/result/is-ok';\n\nconst value = new Ok('Success!');\nconsole.log(isOk(value)); // true\nconsole.log(isOk('foo')); // false\nconsole.log(isOk('Success! but this is not inside an Ok')); // false\n```\n\n`Ok` instances are usually returned from functions that can fail or encounter an error, and are combined with `Ok`\ninstances using the `Result` type.\n\n## Use Cases\n\nCreating an `Ok` instance directly is useful when you want to represent an error in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an `Ok` instance directly with the error message or code you want to use. This can give you\nmore control over the specific errors that your application can encounter and how they are handled.\n\nAnother use case for creating an `Ok` instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an `Ok` instance directly with a specific error message or code, you\ncan test how your application handles that error condition and ensure that it behaves as expected.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Class", "Result", "Wrap"]
    },
    {
      "filePath": "result/result",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "Err",
      "namespacedName": "R.Err",
      "slug": "result/err",
      "title": "Result.Err",
      "@description": "Represent an erroneous value in the `Result` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Err } from 'tightrope/result';\n\nconst error = new Err(new Error('Something went wrong.'));\n```\n\nYou can check if a value is an `Err` instance by using the `isErr` function.\n\n```ts\nimport { isErr } from 'tightrope/result/is-err';\n\nconst error = new Err(new Error('Something went wrong.'));\nconsole.log(isErr(error)); // true\nconsole.log(isErr('foo')); // false\nconsole.log(isErr(new Error('not the same thing'))); // false\n```\n\n`Err` instances are usually returned from functions that can fail or encounter an error, and are combined with `Ok`\ninstances using the `Result` type.\n\n## Use Cases\n\nCreating an `Err` instance directly is useful when you want to represent an error in your program without having to\ngo through a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an `Err` instance directly with the error message or code you want to use. This can give\nyou more control over the specific errors that your application can encounter and how they are handled.\n\nAnother use case for creating an `Err` instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an `Err` instance directly with a specific error message or code,\nyou can test how your application handles that error condition and ensure that it behaves as expected.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Class", "Errors", "Result", "Wrap"]
    },
    {
      "filePath": "result/sequence",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "sequence",
      "namespacedName": "R.sequence",
      "slug": "result/sequence",
      "title": "Result.sequence",
      "@description": "Takes an array of `Result` values and returns a `Result` containing an array\nof values if all Results are `Ok`. If any input value is an `Err`, returns\nthe first encountered `Err`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Array", "Result"]
    },
    {
      "filePath": "result/tap",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "tap",
      "namespacedName": "R.tap",
      "slug": "result/tap",
      "title": "Result.tap",
      "@description": "Execute a side effect on the value of an `Ok` or skip if an `Err`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Effect"]
    },
    {
      "filePath": "result/unwrap-err",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "unwrapErr",
      "namespacedName": "R.unwrapErr",
      "slug": "result/unwrap-err",
      "title": "Result.unwrapErr",
      "@description": "Extract value from an `Err` or throw on an `Ok`.",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_err"
      ],
      "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
    },
    {
      "filePath": "result/unwrap-or-else",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "unwrapOrElse",
      "namespacedName": "R.unwrapOrElse",
      "slug": "result/unwrap-or-else",
      "title": "Result.unwrapOrElse",
      "@description": "Extract value from an `Ok` or from a fallback `() => Ok` if an `Err`",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
      ],
      "@tags": [
        "Errors",
        "Left Biased",
        "Result",
        "Transform",
        "Transform Result",
        "Unwrap"
      ]
    },
    {
      "filePath": "result/unwrap-or",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "unwrapOr",
      "namespacedName": "R.unwrapOr",
      "slug": "result/unwrap-or",
      "title": "Result.unwrapOr",
      "@description": "Extract value from an `Ok` or use a fallback value if an `Err`",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or"
      ],
      "@tags": [
        "Errors",
        "Recover",
        "Result",
        "Transform",
        "Transform Result",
        "Unwrap"
      ]
    },
    {
      "filePath": "result/unwrap",
      "moduleName": "Result",
      "moduleNameShort": "R",
      "name": "unwrap",
      "namespacedName": "R.unwrap",
      "slug": "result/unwrap",
      "title": "Result.unwrap",
      "@description": "Extract value from an `Ok` or throw on an `Err`.",
      "@param": [],
      "@returns": "",
      "@see": [
        "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap"
      ],
      "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
    },
    {
      "filePath": "string/ends-with",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "endsWith",
      "namespacedName": "S.endsWith",
      "slug": "string/ends-with",
      "title": "String.endsWith",
      "@description": "Return true if a given value ends with a specific string.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Guard", "String Length", "Strings"]
    },
    {
      "filePath": "string/is-empty-string",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "isEmptyString",
      "namespacedName": "S.isEmptyString",
      "slug": "string/is-empty-string",
      "title": "String.isEmptyString",
      "@description": "Asserts that a value is a valid `String` containing no characters.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Emptiness", "Guard", "String Length", "Strings", "Truthiness"]
    },
    {
      "filePath": "string/is-iso8601",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "Iso8601",
      "namespacedName": "S.Iso8601",
      "slug": "string/iso8601",
      "title": "String.Iso8601",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "string/is-iso8601",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "isIso8601",
      "namespacedName": "S.isIso8601",
      "slug": "string/is-iso8601",
      "title": "String.isIso8601",
      "@description": "Asserts that a value is a String which conforms to common use-cases of the ISO 8601 standard representation of dates\nand times.\n\n- '1999-12-31'\n- '1999-12-31T23:59'\n- '1999-12-31T23:59:59'\n- '1999-12-31T23:59:59.000'\n- '1999-12-31T23:59:59.000Z'\n- '1999-12-31T23:59:59+01:00'\n- '1999-12-31T23:59:59-01:00'\n- '1999-12-31T23:59:59.000+01:00'\n- '1999-12-31T23:59:59.000-01:00'",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Dates", "Guard", "Strings"]
    },
    {
      "filePath": "string/is-json-string",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "JsonString",
      "namespacedName": "S.JsonString",
      "slug": "string/json-string",
      "title": "String.JsonString",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "string/is-json-string",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "isJsonString",
      "namespacedName": "S.isJsonString",
      "slug": "string/is-json-string",
      "title": "String.isJsonString",
      "@description": "Asserts that a value is a `String` of valid JSON.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "JSON", "Strings"]
    },
    {
      "filePath": "string/is-non-empty-string",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "NonEmptyString",
      "namespacedName": "S.NonEmptyString",
      "slug": "string/non-empty-string",
      "title": "String.NonEmptyString",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "string/is-non-empty-string",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "isNonEmptyString",
      "namespacedName": "S.isNonEmptyString",
      "slug": "string/is-non-empty-string",
      "title": "String.isNonEmptyString",
      "@description": "Asserts that a value is a valid `String` containing at least one character.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Emptiness", "Guard", "Strings", "Truthiness"]
    },
    {
      "filePath": "string/is-string",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "isString",
      "namespacedName": "S.isString",
      "slug": "string/is-string",
      "title": "String.isString",
      "@description": "Asserts that a value is a `String` or `new String()`.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Strings"]
    },
    {
      "filePath": "string/is-visible-string",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "VisibleString",
      "namespacedName": "S.VisibleString",
      "slug": "string/visible-string",
      "title": "String.VisibleString",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "string/is-visible-string",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "isVisibleString",
      "namespacedName": "S.isVisibleString",
      "slug": "string/is-visible-string",
      "title": "String.isVisibleString",
      "@description": "Asserts that a value is a valid `String` containing at least one character which is not whitespace.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Strings"]
    },
    {
      "filePath": "string/is-whitespace",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "Whitespace",
      "namespacedName": "S.Whitespace",
      "slug": "string/whitespace",
      "title": "String.Whitespace",
      "@description": "",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": []
    },
    {
      "filePath": "string/is-whitespace",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "isWhitespace",
      "namespacedName": "S.isWhitespace",
      "slug": "string/is-whitespace",
      "title": "String.isWhitespace",
      "@description": "Asserts that a value is a `String` containing only whitespace characters.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Guard", "Strings"]
    },
    {
      "filePath": "string/starts-with",
      "moduleName": "String",
      "moduleNameShort": "S",
      "name": "startsWith",
      "namespacedName": "S.startsWith",
      "slug": "string/starts-with",
      "title": "String.startsWith",
      "@description": "Asserts that value is a string whose trailing characters are equal to those of the provided string.",
      "@param": [],
      "@returns": "",
      "@see": [],
      "@tags": ["Comparator", "Guard", "String Length", "Strings"]
    }
  ],
  "byTag": {
    "Guard": [
      {
        "filePath": "array/every",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "every",
        "namespacedName": "A.every",
        "slug": "array/every",
        "title": "Array.every",
        "@description": "Return true if `value` is a non-empty array and every member passes the given guard.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-including-all-of",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingAllOf",
        "namespacedName": "A.isArrayIncludingAllOf",
        "slug": "array/is-array-including-all-of",
        "title": "Array.isArrayIncludingAllOf",
        "@description": "Asserts that `value` is an `Array` including all of the values provided in `allowedValues`. It could also include\nadditional values or be in a different order, but if every value in `allowedValues` features in `value` then this\nwill return `true`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-including-any-of",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingAnyOf",
        "namespacedName": "A.isArrayIncludingAnyOf",
        "slug": "array/is-array-including-any-of",
        "title": "Array.isArrayIncludingAnyOf",
        "@description": "Asserts that `value` is an `Array` including at least one of the members of `allowedValues`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-including-only",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingOnly",
        "namespacedName": "A.isArrayIncludingOnly",
        "slug": "array/is-array-including-only",
        "title": "Array.isArrayIncludingOnly",
        "@description": "Asserts that a value is an `Array` including only the values provided in the given `allowedValues` array and no\nothers. The order and number of times each value appears in either array does not matter. Returns true unless `value`\ncontains a value which does not feature in `allowedValues`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-of-booleans",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfBooleans",
        "namespacedName": "A.isArrayOfBooleans",
        "slug": "array/is-array-of-booleans",
        "title": "Array.isArrayOfBooleans",
        "@description": "Asserts that a value is an `Array` containing only `Boolean` values.\n\n## Examples\n\n```ts\nisArrayOfBooleans([true, false, new Boolean(true)]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Booleans", "Guard"]
      },
      {
        "filePath": "array/is-array-of-numbers",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfNumbers",
        "namespacedName": "A.isArrayOfNumbers",
        "slug": "array/is-array-of-numbers",
        "title": "Array.isArrayOfNumbers",
        "@description": "Asserts that a value is an `Array` containing only `Number` values.\n\n## Examples\n\n```ts\nisArrayOfNumbers([12, 0, 14]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Numbers"]
      },
      {
        "filePath": "array/is-array-of-objects",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfObjects",
        "namespacedName": "A.isArrayOfObjects",
        "slug": "array/is-array-of-objects",
        "title": "Array.isArrayOfObjects",
        "@description": "Asserts that a value is an `Array` containing only `Object` values.\n\n## Examples\n\n```ts\nisArrayOfObjects([{}, new Object()]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      },
      {
        "filePath": "array/is-array-of-size",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfSize",
        "namespacedName": "A.isArrayOfSize",
        "slug": "array/is-array-of-size",
        "title": "Array.isArrayOfSize",
        "@description": "Asserts that a value is an `Array` containing a specific number of values.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array Length", "Arrays", "Guard"]
      },
      {
        "filePath": "array/is-array-of-strings",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfStrings",
        "namespacedName": "A.isArrayOfStrings",
        "slug": "array/is-array-of-strings",
        "title": "Array.isArrayOfStrings",
        "@description": "Asserts that a value is an `Array` containing only `String` values.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Strings"]
      },
      {
        "filePath": "array/is-array-of",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOf",
        "namespacedName": "A.isArrayOf",
        "slug": "array/is-array-of",
        "title": "Array.isArrayOf",
        "@description": "Does every value pass the given Guard?\n\n## Examples\n\n```ts\nisArrayOf(isNonEmptyString, ['click', 'mousedown', 'load']);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard"]
      },
      {
        "filePath": "array/is-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArray",
        "namespacedName": "A.isArray",
        "slug": "array/is-array",
        "title": "Array.isArray",
        "@description": "Asserts that a value is a valid `Array` containing none or any number of items of any type.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard"]
      },
      {
        "filePath": "array/is-empty-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isEmptyArray",
        "namespacedName": "A.isEmptyArray",
        "slug": "array/is-empty-array",
        "title": "Array.isEmptyArray",
        "@description": "Asserts that a value is a valid `Array` containing no items.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array Length", "Arrays", "Emptiness", "Guard"]
      },
      {
        "filePath": "array/is-non-empty-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isNonEmptyArray",
        "namespacedName": "A.isNonEmptyArray",
        "slug": "array/is-non-empty-array",
        "title": "Array.isNonEmptyArray",
        "@description": "Asserts that a value is an `Array` containing at least one value.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Emptiness", "Guard"]
      },
      {
        "filePath": "array/some",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "some",
        "namespacedName": "A.some",
        "slug": "array/some",
        "title": "Array.some",
        "@description": "Returns true if array is not empty and any member of the array passes the guard",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard"]
      },
      {
        "filePath": "date/is-after",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isAfter",
        "namespacedName": "D.isAfter",
        "slug": "date/is-after",
        "title": "Date.isAfter",
        "@description": "Asserts that a value is a valid instance of `Date` whose value occurs after that of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-before",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isBefore",
        "namespacedName": "D.isBefore",
        "slug": "date/is-before",
        "title": "Date.isBefore",
        "@description": "Asserts that a value is a valid instance of `Date` whose value occurs before that of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-between",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateBetween",
        "namespacedName": "D.isDateBetween",
        "slug": "date/is-date-between",
        "title": "Date.isDateBetween",
        "@description": "Asserts that a value is an instance of `Date` occurring on or after `floor` and on or before `ceiling`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-in-month",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateInMonth",
        "namespacedName": "D.isDateInMonth",
        "slug": "date/is-date-in-month",
        "title": "Date.isDateInMonth",
        "@description": "Asserts that a value is an instance of `Date` occurring on the given month of the year, where January is `0` and\nDecember is `11`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-in-year",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateInYear",
        "namespacedName": "D.isDateInYear",
        "slug": "date/is-date-in-year",
        "title": "Date.isDateInYear",
        "@description": "Asserts that a value is an instance of `Date` occurring in the given year.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-day-of-month",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnDayOfMonth",
        "namespacedName": "D.isDateOnDayOfMonth",
        "slug": "date/is-date-on-day-of-month",
        "title": "Date.isDateOnDayOfMonth",
        "@description": "Asserts that a value is an instance of `Date` occurring on the given day of the month, where the first day of the\nmonth is `1` and last is `31`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-day-of-week",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnDayOfWeek",
        "namespacedName": "D.isDateOnDayOfWeek",
        "slug": "date/is-date-on-day-of-week",
        "title": "Date.isDateOnDayOfWeek",
        "@description": "Asserts that a value is an instance of `Date` occurring on the day of the week with the given index, where Sunday is\n`0` and Saturday is `6`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-or-after",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnOrAfter",
        "namespacedName": "D.isDateOnOrAfter",
        "slug": "date/is-date-on-or-after",
        "title": "Date.isDateOnOrAfter",
        "@description": "Asserts that a value is an instance of `Date` occurring on or after the exact date and time of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-or-before",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnOrBefore",
        "namespacedName": "D.isDateOnOrBefore",
        "slug": "date/is-date-on-or-before",
        "title": "Date.isDateOnOrBefore",
        "@description": "Asserts that a value is an instance of `Date` occurring on or before the exact date and time of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDate",
        "namespacedName": "D.isDate",
        "slug": "date/is-date",
        "title": "Date.isDate",
        "@description": "Asserts that a value is an instance of `Date`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Dates", "Guard"]
      },
      {
        "filePath": "date/is-valid-date",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isValidDate",
        "namespacedName": "D.isValidDate",
        "slug": "date/is-valid-date",
        "title": "Date.isValidDate",
        "@description": "Asserts that a value is an instance of `Date` whose internal value is valid. `Date` is little like `Promise` in that\nit is a container for a value. For example, `new Date('wut?')` is a valid `Date` which wraps a value that is not\nvalid.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Dates", "Guard"]
      },
      {
        "filePath": "fn/is-async-function",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "isAsyncFunction",
        "namespacedName": "Fn.isAsyncFunction",
        "slug": "fn/is-async-function",
        "title": "Fn.isAsyncFunction",
        "@description": "Asserts that a value is a function using `async` and `await` syntax.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Async", "Functions", "Guard"]
      },
      {
        "filePath": "fn/is-function",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "isFunction",
        "namespacedName": "Fn.isFunction",
        "slug": "fn/is-function",
        "title": "Fn.isFunction",
        "@description": "Asserts that a value is a `Function`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Functions", "Guard"]
      },
      {
        "filePath": "fn/is-generator-function",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "isGeneratorFunction",
        "namespacedName": "Fn.isGeneratorFunction",
        "slug": "fn/is-generator-function",
        "title": "Fn.isGeneratorFunction",
        "@description": "Asserts that a value is a `Function` using `yield` syntax.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Functions", "Generator", "Guard"]
      },
      {
        "filePath": "fn/throws-any-error",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "throwsAnyError",
        "namespacedName": "Fn.throwsAnyError",
        "slug": "fn/throws-any-error",
        "title": "Fn.throwsAnyError",
        "@description": "Asserts that a value is a `Function` which throws when invoked.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Functions", "Guard"]
      },
      {
        "filePath": "fn/throws-error-of-type",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "throwsErrorOfType",
        "namespacedName": "Fn.throwsErrorOfType",
        "slug": "fn/throws-error-of-type",
        "title": "Fn.throwsErrorOfType",
        "@description": "Asserts that a value is a `Function` which throws an `Error` of the given type.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Functions", "Guard"]
      },
      {
        "filePath": "guard/has-property",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "hasProperty",
        "namespacedName": "Guard.hasProperty",
        "slug": "guard/has-property",
        "title": "Guard.hasProperty",
        "@description": "Returns true if a value has a property of the given name, even if the value of that property is `undefined`.\n\nThis assertion describes the shape of the given value. For example, value.prop is `undefined` in both of the\nfollowing scenarios, but `{ prop: undefined }` and `{ }` do not have the same shape.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      },
      {
        "filePath": "guard/is-boolean",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isBoolean",
        "namespacedName": "Guard.isBoolean",
        "slug": "guard/is-boolean",
        "title": "Guard.isBoolean",
        "@description": "Asserts that a value is `true`, `false`, `new Boolean(true)`, or `new Boolean(false)`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Booleans", "Guard"]
      },
      {
        "filePath": "guard/is-false",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isFalse",
        "namespacedName": "Guard.isFalse",
        "slug": "guard/is-false",
        "title": "Guard.isFalse",
        "@description": "Asserts that a value is `false` or `new Boolean(false)`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Booleans", "Guard"]
      },
      {
        "filePath": "guard/is-nil",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isNil",
        "namespacedName": "Guard.isNil",
        "slug": "guard/is-nil",
        "title": "Guard.isNil",
        "@description": "Asserts that a value is `null` or `undefined`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "guard/is-primitive",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isPrimitive",
        "namespacedName": "Guard.isPrimitive",
        "slug": "guard/is-primitive",
        "title": "Guard.isPrimitive",
        "@description": "Return true if value is `null`, `undefined`, `number`, `string`, or `boolean`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Primitives"]
      },
      {
        "filePath": "guard/is-readable",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isReadable",
        "namespacedName": "Guard.isReadable",
        "slug": "guard/is-readable",
        "title": "Guard.isReadable",
        "@description": "Asserts that a value is safe to attempt to read property values from.\n\nOnly `null` and `undefined` will error if you try to read a property on them using dot notation.\n\n## Example",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      },
      {
        "filePath": "guard/is-reg-exp",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isRegExp",
        "namespacedName": "Guard.isRegExp",
        "slug": "guard/is-reg-exp",
        "title": "Guard.isRegExp",
        "@description": "Asserts that a value is a `RegExp`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Regexp"]
      },
      {
        "filePath": "guard/is-true",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isTrue",
        "namespacedName": "Guard.isTrue",
        "slug": "guard/is-true",
        "title": "Guard.isTrue",
        "@description": "Asserts that a value is `true` or `new Boolean(true)`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Booleans", "Guard"]
      },
      {
        "filePath": "guard/is-truthy",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isTruthy",
        "namespacedName": "Guard.isTruthy",
        "slug": "guard/is-truthy",
        "title": "Guard.isTruthy",
        "@description": "Asserts that a value is not falsy.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "guard/is-undefined",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isUndefined",
        "namespacedName": "Guard.isUndefined",
        "slug": "guard/is-undefined",
        "title": "Guard.isUndefined",
        "@description": "Asserts that a value is `undefined`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "guard/is",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "is",
        "namespacedName": "Guard.is",
        "slug": "guard/is",
        "title": "Guard.is",
        "@description": "Returns whether both values are referentially equal, ie. `a === b`. This will be the case when both values are\nprimitives (undefined, number, null, string, or boolean) or they are objects which both point to the same address in\nmemory.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard"]
      },
      {
        "filePath": "number/is-calculable",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isCalculable",
        "namespacedName": "N.isCalculable",
        "slug": "number/is-calculable",
        "title": "Number.isCalculable",
        "@description": "Assert value can be used in Mathemetic calculations despite not being a `Number`, for example `'1' * '2' === 2`\nwhereas `'wut?' * 2 === NaN`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers", "Strings"]
      },
      {
        "filePath": "number/is-decimal-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isDecimalNumber",
        "namespacedName": "N.isDecimalNumber",
        "slug": "number/is-decimal-number",
        "title": "Number.isDecimalNumber",
        "@description": "Asserts that a value is a `Number` with positive decimal places.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-divisible-by",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isDivisibleBy",
        "namespacedName": "N.isDivisibleBy",
        "slug": "number/is-divisible-by",
        "title": "Number.isDivisibleBy",
        "@description": "Asserts that a value is a `Number` which results in a whole number when divided by another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-even-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isEvenNumber",
        "namespacedName": "N.isEvenNumber",
        "slug": "number/is-even-number",
        "title": "Number.isEvenNumber",
        "@description": "Asserts that a value is an even `Number`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-greater-than-or-equal-to",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isGreaterThanOrEqualTo",
        "namespacedName": "N.isGreaterThanOrEqualTo",
        "slug": "number/is-greater-than-or-equal-to",
        "title": "Number.isGreaterThanOrEqualTo",
        "@description": "Asserts that a value is greater than or equal to other.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-greater-than",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isGreaterThan",
        "namespacedName": "N.isGreaterThan",
        "slug": "number/is-greater-than",
        "title": "Number.isGreaterThan",
        "@description": "Asserts that a value is greater than another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-js-nan",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isJsNaN",
        "namespacedName": "N.isJsNaN",
        "slug": "number/is-js-na-n",
        "title": "Number.isJsNaN",
        "@description": "Asserts that a value is `NaN`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-less-than-or-equal-to",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isLessThanOrEqualTo",
        "namespacedName": "N.isLessThanOrEqualTo",
        "slug": "number/is-less-than-or-equal-to",
        "title": "Number.isLessThanOrEqualTo",
        "@description": "Asserts that a value is less than or equal to another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-less-than",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isLessThan",
        "namespacedName": "N.isLessThan",
        "slug": "number/is-less-than",
        "title": "Number.isLessThan",
        "@description": "Asserts that a value is less than another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-near",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isNear",
        "namespacedName": "N.isNear",
        "slug": "number/is-near",
        "title": "Number.isNear",
        "@description": "Asserts that a value is a number within the given acceptable distance from another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-negative-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isNegativeNumber",
        "namespacedName": "N.isNegativeNumber",
        "slug": "number/is-negative-number",
        "title": "Number.isNegativeNumber",
        "@description": "Asserts that a value is a `Number` less than 0.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isNumber",
        "namespacedName": "N.isNumber",
        "slug": "number/is-number",
        "title": "Number.isNumber",
        "@description": "Asserts that a value is a valid `Number` or `new Number()` and not `NaN`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-odd-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isOddNumber",
        "namespacedName": "N.isOddNumber",
        "slug": "number/is-odd-number",
        "title": "Number.isOddNumber",
        "@description": "Asserts that a value is an odd `Number`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-positive-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isPositiveNumber",
        "namespacedName": "N.isPositiveNumber",
        "slug": "number/is-positive-number",
        "title": "Number.isPositiveNumber",
        "@description": "Asserts that a value is a `Number` greater than 0.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-whole-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isWholeNumber",
        "namespacedName": "N.isWholeNumber",
        "slug": "number/is-whole-number",
        "title": "Number.isWholeNumber",
        "@description": "Asserts that a value is a `Number` with no positive decimal places, both `10`\nand `10.0` are considered whole numbers.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-within-range",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isWithinRange",
        "namespacedName": "N.isWithinRange",
        "slug": "number/is-within-range",
        "title": "Number.isWithinRange",
        "@description": "Asserts that a value is a `Number` which is both greater than or equal to `floor` and less than or equal to\n`ceiling`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "option/is-none",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "isNone",
        "namespacedName": "O.isNone",
        "slug": "option/is-none",
        "title": "Option.isNone",
        "@description": "Returns true if the given value is a `None` instance, false otherwise.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Guard", "Option"]
      },
      {
        "filePath": "option/is-some",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "isSome",
        "namespacedName": "O.isSome",
        "slug": "option/is-some",
        "title": "Option.isSome",
        "@description": "Determine whether a value is an instance of `Some`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Option"]
      },
      {
        "filePath": "object/is-empty-object",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isEmptyObject",
        "namespacedName": "Obj.isEmptyObject",
        "slug": "object/is-empty-object",
        "title": "Object.isEmptyObject",
        "@description": "Asserts that a value is a valid `Object` containing no instance members.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Objects"]
      },
      {
        "filePath": "object/is-non-empty-object",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isNonEmptyObject",
        "namespacedName": "Obj.isNonEmptyObject",
        "slug": "object/is-non-empty-object",
        "title": "Object.isNonEmptyObject",
        "@description": "Asserts that a value is an `Object` containing at least one own member.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Objects"]
      },
      {
        "filePath": "object/is-null",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isNull",
        "namespacedName": "Obj.isNull",
        "slug": "object/is-null",
        "title": "Object.isNull",
        "@description": "Asserts that a value is `null`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "object/is-object",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isObject",
        "namespacedName": "Obj.isObject",
        "slug": "object/is-object",
        "title": "Object.isObject",
        "@description": "Asserts that a value is an `Object`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Objects"]
      },
      {
        "filePath": "result/is-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "isErr",
        "namespacedName": "R.isErr",
        "slug": "result/is-err",
        "title": "Result.isErr",
        "@description": "Check if value is an instance of the `Err` class.\n\nThis can be used to handle error cases in a program flow that uses the `Result` type.\n\nFor example, it can be used to check if the result of a function that returns a `Result` is an `Err` or an `Ok`, and\ntake different actions depending on the outcome.\n\nIt can also be used for validation or error checking, to make sure that the value passed to a function or module is\nof the expected type.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.is_err"
        ],
        "@tags": ["Errors", "Guard", "Result"]
      },
      {
        "filePath": "result/is-ok",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "isOk",
        "namespacedName": "R.isOk",
        "slug": "result/is-ok",
        "title": "Result.isOk",
        "@description": "Check if value is an instance of the `Ok` class.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.is_ok"
        ],
        "@tags": ["Guard", "Result"]
      },
      {
        "filePath": "result/is-result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "isResult",
        "namespacedName": "R.isResult",
        "slug": "result/is-result",
        "title": "Result.isResult",
        "@description": "Check if value is an instance of either the `Ok` or `Err` classes.\n\nYou would use `isResult` when you want to check if a value is a `Result` instance, regardless of whether it contains\nan `Ok` or `Err` variant.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Result"]
      },
      {
        "filePath": "string/ends-with",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "endsWith",
        "namespacedName": "S.endsWith",
        "slug": "string/ends-with",
        "title": "String.endsWith",
        "@description": "Return true if a given value ends with a specific string.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "String Length", "Strings"]
      },
      {
        "filePath": "string/is-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isEmptyString",
        "namespacedName": "S.isEmptyString",
        "slug": "string/is-empty-string",
        "title": "String.isEmptyString",
        "@description": "Asserts that a value is a valid `String` containing no characters.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Emptiness",
          "Guard",
          "String Length",
          "Strings",
          "Truthiness"
        ]
      },
      {
        "filePath": "string/is-iso8601",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isIso8601",
        "namespacedName": "S.isIso8601",
        "slug": "string/is-iso8601",
        "title": "String.isIso8601",
        "@description": "Asserts that a value is a String which conforms to common use-cases of the ISO 8601 standard representation of dates\nand times.\n\n- '1999-12-31'\n- '1999-12-31T23:59'\n- '1999-12-31T23:59:59'\n- '1999-12-31T23:59:59.000'\n- '1999-12-31T23:59:59.000Z'\n- '1999-12-31T23:59:59+01:00'\n- '1999-12-31T23:59:59-01:00'\n- '1999-12-31T23:59:59.000+01:00'\n- '1999-12-31T23:59:59.000-01:00'",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Dates", "Guard", "Strings"]
      },
      {
        "filePath": "string/is-json-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isJsonString",
        "namespacedName": "S.isJsonString",
        "slug": "string/is-json-string",
        "title": "String.isJsonString",
        "@description": "Asserts that a value is a `String` of valid JSON.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "JSON", "Strings"]
      },
      {
        "filePath": "string/is-non-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isNonEmptyString",
        "namespacedName": "S.isNonEmptyString",
        "slug": "string/is-non-empty-string",
        "title": "String.isNonEmptyString",
        "@description": "Asserts that a value is a valid `String` containing at least one character.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Strings", "Truthiness"]
      },
      {
        "filePath": "string/is-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isString",
        "namespacedName": "S.isString",
        "slug": "string/is-string",
        "title": "String.isString",
        "@description": "Asserts that a value is a `String` or `new String()`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Strings"]
      },
      {
        "filePath": "string/is-visible-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isVisibleString",
        "namespacedName": "S.isVisibleString",
        "slug": "string/is-visible-string",
        "title": "String.isVisibleString",
        "@description": "Asserts that a value is a valid `String` containing at least one character which is not whitespace.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Strings"]
      },
      {
        "filePath": "string/is-whitespace",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isWhitespace",
        "namespacedName": "S.isWhitespace",
        "slug": "string/is-whitespace",
        "title": "String.isWhitespace",
        "@description": "Asserts that a value is a `String` containing only whitespace characters.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Strings"]
      },
      {
        "filePath": "string/starts-with",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "startsWith",
        "namespacedName": "S.startsWith",
        "slug": "string/starts-with",
        "title": "String.startsWith",
        "@description": "Asserts that value is a string whose trailing characters are equal to those of the provided string.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "String Length", "Strings"]
      }
    ],
    "Multiple Conditions": [
      {
        "filePath": "array/every",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "every",
        "namespacedName": "A.every",
        "slug": "array/every",
        "title": "Array.every",
        "@description": "Return true if `value` is a non-empty array and every member passes the given guard.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-including-all-of",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingAllOf",
        "namespacedName": "A.isArrayIncludingAllOf",
        "slug": "array/is-array-including-all-of",
        "title": "Array.isArrayIncludingAllOf",
        "@description": "Asserts that `value` is an `Array` including all of the values provided in `allowedValues`. It could also include\nadditional values or be in a different order, but if every value in `allowedValues` features in `value` then this\nwill return `true`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-including-any-of",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingAnyOf",
        "namespacedName": "A.isArrayIncludingAnyOf",
        "slug": "array/is-array-including-any-of",
        "title": "Array.isArrayIncludingAnyOf",
        "@description": "Asserts that `value` is an `Array` including at least one of the members of `allowedValues`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-including-only",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingOnly",
        "namespacedName": "A.isArrayIncludingOnly",
        "slug": "array/is-array-including-only",
        "title": "Array.isArrayIncludingOnly",
        "@description": "Asserts that a value is an `Array` including only the values provided in the given `allowedValues` array and no\nothers. The order and number of times each value appears in either array does not matter. Returns true unless `value`\ncontains a value which does not feature in `allowedValues`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      }
    ],
    "Arrays": [
      {
        "filePath": "array/flat",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "flat",
        "namespacedName": "A.flat",
        "slug": "array/flat",
        "title": "Array.flat",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Transform"]
      },
      {
        "filePath": "array/is-array-including-all-of",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingAllOf",
        "namespacedName": "A.isArrayIncludingAllOf",
        "slug": "array/is-array-including-all-of",
        "title": "Array.isArrayIncludingAllOf",
        "@description": "Asserts that `value` is an `Array` including all of the values provided in `allowedValues`. It could also include\nadditional values or be in a different order, but if every value in `allowedValues` features in `value` then this\nwill return `true`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-including-any-of",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingAnyOf",
        "namespacedName": "A.isArrayIncludingAnyOf",
        "slug": "array/is-array-including-any-of",
        "title": "Array.isArrayIncludingAnyOf",
        "@description": "Asserts that `value` is an `Array` including at least one of the members of `allowedValues`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-including-only",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingOnly",
        "namespacedName": "A.isArrayIncludingOnly",
        "slug": "array/is-array-including-only",
        "title": "Array.isArrayIncludingOnly",
        "@description": "Asserts that a value is an `Array` including only the values provided in the given `allowedValues` array and no\nothers. The order and number of times each value appears in either array does not matter. Returns true unless `value`\ncontains a value which does not feature in `allowedValues`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-of-booleans",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfBooleans",
        "namespacedName": "A.isArrayOfBooleans",
        "slug": "array/is-array-of-booleans",
        "title": "Array.isArrayOfBooleans",
        "@description": "Asserts that a value is an `Array` containing only `Boolean` values.\n\n## Examples\n\n```ts\nisArrayOfBooleans([true, false, new Boolean(true)]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Booleans", "Guard"]
      },
      {
        "filePath": "array/is-array-of-numbers",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfNumbers",
        "namespacedName": "A.isArrayOfNumbers",
        "slug": "array/is-array-of-numbers",
        "title": "Array.isArrayOfNumbers",
        "@description": "Asserts that a value is an `Array` containing only `Number` values.\n\n## Examples\n\n```ts\nisArrayOfNumbers([12, 0, 14]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Numbers"]
      },
      {
        "filePath": "array/is-array-of-objects",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfObjects",
        "namespacedName": "A.isArrayOfObjects",
        "slug": "array/is-array-of-objects",
        "title": "Array.isArrayOfObjects",
        "@description": "Asserts that a value is an `Array` containing only `Object` values.\n\n## Examples\n\n```ts\nisArrayOfObjects([{}, new Object()]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      },
      {
        "filePath": "array/is-array-of-size",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfSize",
        "namespacedName": "A.isArrayOfSize",
        "slug": "array/is-array-of-size",
        "title": "Array.isArrayOfSize",
        "@description": "Asserts that a value is an `Array` containing a specific number of values.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array Length", "Arrays", "Guard"]
      },
      {
        "filePath": "array/is-array-of-strings",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfStrings",
        "namespacedName": "A.isArrayOfStrings",
        "slug": "array/is-array-of-strings",
        "title": "Array.isArrayOfStrings",
        "@description": "Asserts that a value is an `Array` containing only `String` values.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Strings"]
      },
      {
        "filePath": "array/is-array-of",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOf",
        "namespacedName": "A.isArrayOf",
        "slug": "array/is-array-of",
        "title": "Array.isArrayOf",
        "@description": "Does every value pass the given Guard?\n\n## Examples\n\n```ts\nisArrayOf(isNonEmptyString, ['click', 'mousedown', 'load']);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard"]
      },
      {
        "filePath": "array/is-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArray",
        "namespacedName": "A.isArray",
        "slug": "array/is-array",
        "title": "Array.isArray",
        "@description": "Asserts that a value is a valid `Array` containing none or any number of items of any type.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard"]
      },
      {
        "filePath": "array/is-empty-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isEmptyArray",
        "namespacedName": "A.isEmptyArray",
        "slug": "array/is-empty-array",
        "title": "Array.isEmptyArray",
        "@description": "Asserts that a value is a valid `Array` containing no items.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array Length", "Arrays", "Emptiness", "Guard"]
      },
      {
        "filePath": "array/is-non-empty-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isNonEmptyArray",
        "namespacedName": "A.isNonEmptyArray",
        "slug": "array/is-non-empty-array",
        "title": "Array.isNonEmptyArray",
        "@description": "Asserts that a value is an `Array` containing at least one value.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Emptiness", "Guard"]
      },
      {
        "filePath": "array/uniq",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "uniq",
        "namespacedName": "A.uniq",
        "slug": "array/uniq",
        "title": "Array.uniq",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Filter"]
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "Return an `Ok` containing a deeply nested value from an object, or an `Err`.\n\nA curried function that takes two arguments: a string `path` and an `origin` object. It returns an `Ok` containing\nthe value at the specified path in the object, or an `Err` if the path does not exist.\n\n## Example\n\nIn this example, we first define an object `obj` that has a nested property `foo.bar` with a value of `42`. We then\nuse the `get` function to retrieve the value at this path in the object by passing the path and object as arguments.\nNote that we also specify the type of the expected value (`number` in this case) as a type argument to the `get`\nfunction.\n\n```ts\nimport { get } from 'tightrope/fn/get';\n\n// Define an object to query\nconst obj = {\n  foo: {\n    bar: 42,\n  },\n};\n\n// Use get to retrieve a value from the object\nconst result = get<number>('foo.bar', obj); // returns Ok(42)\n```\n\nThe `get` function works by splitting the `path` argument on the `.` character, then using the resulting array of\nproperty names to recursively access nested properties in the `origin` object. If any of the intermediate properties\ndo not exist or are not objects, the function returns `Err`.\n\nThe `get` function is implemented using the `curry` function, which allows us to partially apply the `path` argument\nand reuse the function with different `origin` objects.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Objects", "Read", "Result"]
      },
      {
        "filePath": "guard/has-property",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "hasProperty",
        "namespacedName": "Guard.hasProperty",
        "slug": "guard/has-property",
        "title": "Guard.hasProperty",
        "@description": "Returns true if a value has a property of the given name, even if the value of that property is `undefined`.\n\nThis assertion describes the shape of the given value. For example, value.prop is `undefined` in both of the\nfollowing scenarios, but `{ prop: undefined }` and `{ }` do not have the same shape.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      },
      {
        "filePath": "guard/is-readable",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isReadable",
        "namespacedName": "Guard.isReadable",
        "slug": "guard/is-readable",
        "title": "Guard.isReadable",
        "@description": "Asserts that a value is safe to attempt to read property values from.\n\nOnly `null` and `undefined` will error if you try to read a property on them using dot notation.\n\n## Example",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      }
    ],
    "Transform": [
      {
        "filePath": "array/flat",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "flat",
        "namespacedName": "A.flat",
        "slug": "array/flat",
        "title": "Array.flat",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Transform"]
      },
      {
        "filePath": "gen/map",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "map",
        "namespacedName": "Gen.map",
        "slug": "gen/map",
        "title": "Gen.map",
        "@description": "Transform and `yield` each value produced by a generator.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator", "Transform"]
      },
      {
        "filePath": "gen/reduce-each",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "reduceEach",
        "namespacedName": "Gen.reduceEach",
        "slug": "gen/reduce-each",
        "title": "Gen.reduceEach",
        "@description": "Reduce and `yield` each value produced by a generator.\n\nA higher-order function that takes a `reducer` function as its argument and returns a new function that can be used\nto reduce the values generated by a generator.\n\nThe returned function takes a generator as its argument and returns a new generator that yields the partial results\nof the reduction operation. It works by applying the `reducer` function to each pair of values generated by the input\ngenerator, and yielding the partial results of the reduction operation.\n\nThe `reducer` function takes two arguments: an `accumulator` value that represents the current state of the reduction\noperation, and a `value` generated by the input generator. The reducer function applies some operation to the\naccumulator value and the input value, and returns a new accumulator value that represents the updated state of the\nreduction operation.\n\nIn summary, `reduceEach` is a powerful tool for working with generators in JavaScript and TypeScript. It can be used\nto perform complex reduction operations on large or complex data sets, and can help us write more efficient and\nfocused code.\n\n## Example\n\nIn this example, we use the `range` function to generate a sequence of numbers from `1` to `10`, the `map` function\nto double each value in the sequence, and the `take` function to select the first `5` values in the sequence.\nFinally, we apply the `reduceEach` function with the `sum` function as its argument to generate the partial sums of\nthe remaining values in the sequence.\n\nWe then use a `for...of` loop to iterate over the partial sums generated by the `partialSums` generator, and log them\nto the console.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { map } from 'tightrope/gen/map';\nimport { range } from 'tightrope/gen/range';\nimport { reduceEach } from 'tightrope/gen/reduce-each';\nimport { take } from 'tightrope/gen/take';\nimport { multiply } from 'tightrope/number/multiply';\n\nfunction sum(acc: number, curr: number): number {\n  return acc + curr;\n}\n\nconst partialSums = pipe(range(1, 10), map(multiply(2)), take(5), reduceEach(sum));\n\nfor (const value of partialSums) {\n  console.log(value);\n  //  6\n  // 12\n  // 20\n  // 30\n}\n```\n\n## Use Cases\n\nCommon use cases for `reduceEach`:\n\n1. **Summing values**: calculate the sum of a series of numbers generated by a generator.\n2. **Counting values**: count the number of values generated by a generator that satisfy a given condition.\n3. **Finding minimum or maximum values**: find the minimum or maximum value generated by a generator.\n4. **Concatenating strings**: concatenate a series of strings generated by a generator.\n5. **Grouping values**: group a series of values generated by a generator into a nested structure, such as an object or\n   an array.\n6. **Filtering values**: filter the values generated by a generator based on a given condition.\n7. **Computing averages**: compute the average of a series of numbers generated by a generator.\n8. **Building up an object**: build up an object by accumulating properties and values generated by a generator.\n\nIn general, `reduceEach` can be used in any situation where we need to perform some kind of reduction operation on a\nseries of values generated by a generator. Its flexibility and power make it a versatile tool for working with\ngenerators in JavaScript and TypeScript.\n\n## `reduce` or `reduceEach`?\n\n`reduce` and `reduceEach` are very similar functions, and it can be difficult to decide which one to use in a given\nsituation. Here are some guidelines to help you decide:\n\n1. Use `reduce` if you want to perform a reduction operation on the entire sequence of values generated by a generator,\n   and you only need to return a single value.\n2. Use `reduceEach` if you want to perform a reduction operation on each individual value generated by a generator, and\n   you need to return a sequence of partial results.\n\nIn general, the choice between `reduce` and `reduceEach` will depend on the specific requirements of your problem, as\nwell as the nature of the data you are working with.\n\n- If you need to perform a simple reduction operation on a single sequence of values, `reduce` may be the better\n  choice.\n- If you need to perform a more complex reduction operation that involves multiple sequences of values, or if you need\n  to return a sequence of partial results, `reduceEach` may be the better choice.",
        "@param": [],
        "@returns": "",
        "@see": ["https://jamiemason.github.io/tightrope/api/gen/reduce"],
        "@tags": ["Generator", "Transform", "Transform Value"]
      },
      {
        "filePath": "gen/reduce",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "reduce",
        "namespacedName": "Gen.reduce",
        "slug": "gen/reduce",
        "title": "Gen.reduce",
        "@description": "Reduce every value produced by a generator and `yield` the final result.\n\nA higher-order function that takes a reducer function as its argument and returns a new function that can be used to\nreduce the values generated by a generator to a single value.\n\nThe returned function takes a generator as its argument and returns a new generator that yields the final result of\nthe reduction operation.\n\nThe `reduce` function works by using the `reduceEach` function to generate a sequence of partial results for the\nreduction operation, and then returning the final result of the reduction operation.\n\nThe `reducer` function takes two arguments: an `accumulator` value that represents the current state of the reduction\noperation, and a `value` generated by the input generator. The reducer function applies some operation to the\naccumulator value and the input value, and returns a new accumulator value that represents the updated state of the\nreduction operation.\n\nIf an initial value is provided, it will be used as the initial state of the reduction operation. If no initial value\nis provided, the first value generated by the input generator will be used as the initial state.\n\n## Example\n\nIn this example, we use the pipe function to create a pipeline of functions that generate a series of numbers, double\neach number using `multiply(2)`, and then calculate the sum of the resulting values.\n\n1. We define a `sum` function that takes two numbers as input and returns their sum.\n2. We use the `range` function to generate a series of numbers from `1` to `10`.\n3. We use the `map` function with `multiply(2)` to double each number in the series.\n4. We use the `reduce` function to calculate the sum of the resulting values.\n5. We use a `for...of` loop to iterate over the values generated by `doubledSum`, which will be one value, the final\n   total, which should be `110`.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { map } from 'tightrope/gen/map';\nimport { range } from 'tightrope/gen/range';\nimport { reduce } from 'tightrope/gen/reduce';\nimport { multiply } from 'tightrope/number/multiply';\n\nfunction sum(acc: number, curr: number): number {\n  return acc + curr;\n}\n\nconst doubledSum = pipe(range(1, 10), map(multiply(2)), reduce(sum));\n\nfor (const value of doubledSum) {\n  console.log(value); // 110\n}\n```\n\n## `reduce` or `reduceEach`?\n\n`reduce` and `reduceEach` are very similar functions, and it can be difficult to decide which one to use in a given\nsituation. Here are some guidelines to help you decide:\n\n1. Use `reduce` if you want to perform a reduction operation on the entire sequence of values generated by a generator,\n   and you only need to return a single value.\n2. Use `reduceEach` if you want to perform a reduction operation on each individual value generated by a generator, and\n   you need to return a sequence of partial results.\n\nIn general, the choice between `reduce` and `reduceEach` will depend on the specific requirements of your problem, as\nwell as the nature of the data you are working with.\n\n- If you need to perform a simple reduction operation on a single sequence of values, `reduce` may be the better\n  choice.\n- If you need to perform a more complex reduction operation that involves multiple sequences of values, or if you need\n  to return a sequence of partial results, `reduceEach` may be the better choice.",
        "@param": [],
        "@returns": "",
        "@see": ["https://jamiemason.github.io/tightrope/api/gen/reduce-each"],
        "@tags": ["Generator", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/clamp",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "clamp",
        "namespacedName": "N.clamp",
        "slug": "number/clamp",
        "title": "Number.clamp",
        "@description": "Returns a number within the specified range, if the original value is not already within that range.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/divide",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "divide",
        "namespacedName": "N.divide",
        "slug": "number/divide",
        "title": "Number.divide",
        "@description": "Divide one number by another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/multiply",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "multiply",
        "namespacedName": "N.multiply",
        "slug": "number/multiply",
        "title": "Number.multiply",
        "@description": "Multiply two numbers",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/square",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "square",
        "namespacedName": "N.square",
        "slug": "number/square",
        "title": "Number.square",
        "@description": "Multiply a number by itself",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/subtract",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "subtract",
        "namespacedName": "N.subtract",
        "slug": "number/subtract",
        "title": "Number.subtract",
        "@description": "Subtract one number from another",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/sum",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "sum",
        "namespacedName": "N.sum",
        "slug": "number/sum",
        "title": "Number.sum",
        "@description": "Return the sum of two numbers",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "option/and-then",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "andThen",
        "namespacedName": "O.andThen",
        "slug": "option/and-then",
        "title": "Option.andThen",
        "@description": "Applies a mapping function to the value of an `Option`, returning a new `Option`. If the input `Option` is `None`,\nthe function immediately returns `None` without calling the mapping function.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/and",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "and",
        "namespacedName": "O.and",
        "slug": "option/and",
        "title": "Option.and",
        "@description": "Combines two `Option`s, returning the second `Option` if both are `Some`, and `None` otherwise.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/flatten",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "flatten",
        "namespacedName": "O.flatten",
        "slug": "option/flatten",
        "title": "Option.flatten",
        "@description": "Removes one level of nesting from an `Option<Option<T>>`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/map-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOrElse",
        "namespacedName": "O.mapOrElse",
        "slug": "option/map-or-else",
        "title": "Option.mapOrElse",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the result of evaluating the provided\nfallback function if the `Option` is `None`",
        "@param": [
          {
            "name": "mapFn",
            "description": "The function to apply to the contained value of `Some`."
          },
          {
            "name": "defaultFn",
            "description": "The fallback function to evaluate if the `Option` is `None`."
          },
          {
            "name": "opt",
            "description": "The `Option` to apply the provided function to."
          }
        ],
        "@returns": "The result of applying the provided function to the contained value of `Some`, or the result of evaluating\n  the fallback function if the `Option` is `None`.",
        "@see": [],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/map-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOr",
        "namespacedName": "O.mapOr",
        "slug": "option/map-or",
        "title": "Option.mapOr",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the provided default value if the `Option`\nis `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Option",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/map",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "map",
        "namespacedName": "O.map",
        "slug": "option/map",
        "title": "Option.map",
        "@description": "Transforms `Option<T>` to `Option<U>` by applying the provided function to the contained value of `Some` and leaving\n`None` values unchanged.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Transform", "Transform Value"]
      },
      {
        "filePath": "option/ok-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "okOrElse",
        "namespacedName": "O.okOrElse",
        "slug": "option/ok-or-else",
        "title": "Option.okOrElse",
        "@description": "Transforms an `Option` to a `Result`. A `Some(v)` becomes `Ok(v)` and `None` becomes `Err` using the provided\nfunction.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else"
        ],
        "@tags": ["Option", "Result", "Transform"]
      },
      {
        "filePath": "option/ok-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "okOr",
        "namespacedName": "O.okOr",
        "slug": "option/ok-or",
        "title": "Option.okOr",
        "@description": "Transforms `Some(v)` to `Ok(v)`, and `None` to a value of `Err` using the provided default error value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or"
        ],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "orElse",
        "namespacedName": "O.orElse",
        "slug": "option/or-else",
        "title": "Option.orElse",
        "@description": "Transforms `Some(v)` to `Some(v)`, and `None` to a new `Option` using the provided function.\n\nThe `orElse` function takes a function `orElseFn` and an `Option` object as its arguments. If the input `Option`\nobject is a `Some`, it returns the same `Some` object. If the input `Option` object is a `None`, it calls the\nprovided `orElseFn` function and returns the resulting `Option`.\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { Option } from 'tightrope/option';\nimport { none } from 'tightrope/option';\nimport { Some } from 'tightrope/option';\nimport { orElse } from 'tightrope/option/or-else';\n\nconst defaultOption = () => Some.create(42);\n\nconst option1 = pipe(Some.create(5), orElse(defaultOption));\n// Output: Some(5)\n\nconst option2 = pipe(none, orElse(defaultOption));\n// Output: Some(42)\n```\n\n## Use Cases\n\nThe `orElse` function is useful when you want to provide a fallback `Option` object in case the input `Option` is a\n`None`. It allows you to handle both cases of `Some` and `None` in a more flexible way.\n\nSome use cases of `orElse` include:\n\n- Providing a default value for cases when a value is not found in a collection or when an operation fails.\n- Mapping over a collection and returning the first element that meets a specific criteria. If no element is found,\n  returning a default `Option`.\n- Handling errors in a way that gracefully falls back to a default value, such as when making API calls and the server\n  returns an error response.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "or",
        "namespacedName": "O.or",
        "slug": "option/or",
        "title": "Option.or",
        "@description": "Like the `||` operator, but applied to `Option` types.\n\n| Scenario         | Pseudocode               | Outcome                   |\n| :--------------- | :----------------------- | ------------------------- |\n| `Some OR None`   | `pipe(Some, or(None))`   | `Some`                    |\n| `None OR Some`   | `pipe(None, or(Some))`   | `Some`                    |\n| `None1 OR None2` | `pipe(None1, or(None2))` | `None2`                   |\n| `Some1 OR Some2` | `pipe(Some1, or(Some2))` | `Some1` (first Some wins) |",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/unwrap-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOrElse",
        "namespacedName": "O.unwrapOrElse",
        "slug": "option/unwrap-or-else",
        "title": "Option.unwrapOrElse",
        "@description": "Extract value from a `Some` or from a fallback `() => value` if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/unwrap-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOr",
        "namespacedName": "O.unwrapOr",
        "slug": "option/unwrap-or",
        "title": "Option.unwrapOr",
        "@description": "Extract value from a `Some` or use a fallback value if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/and-then",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "andThen",
        "namespacedName": "R.andThen",
        "slug": "result/and-then",
        "title": "Result.andThen",
        "@description": "Same as `flatMap` or `chain`, transform a `Result` with the value of another.\n\nWhen your function returns a `Result` object, you can use `andThen` to transform the `Ok` variant itself.\n\n::: tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\n:::\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport type { Result } from 'tightrope/result';\nimport { Err, Ok } from 'tightrope/result';\nimport { andThen } from 'tightrope/result/and-then';\nimport { map } from 'tightrope/result/map';\nimport { multiply } from 'tightrope/number/multiply';\nimport { unwrapOr } from 'tightrope/result/unwrap-or';\n\nfunction divide(x: number, y: number): Result<number, Error> {\n  if (y === 0) {\n    return new Err(new Error('Division by zero'));\n  }\n  return new Ok(x / y);\n}\n\nconst amount = pipe(\n  Ok.create<number, Error>(16),\n  andThen((n) => divide(n, 2)),\n  andThen((n) => divide(n, 4)),\n  map(multiply(100)),\n  unwrapOr(0),\n);\n\nconsole.log(amount); // 200\n```\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`andThen` runs on the `Ok` variant. If any of the operations return an `Err` object then `andThen` will skip and\nreturn the `Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `andThen` is sometimes referred to as `chain` or `flatMap`.\n- `Result` is sometimes referred to as `Either`.\n- `Ok` is sometimes referred to as `Right` or \"the happy path\".\n- `Err` is sometimes referred to as `Left` or \"the sad path\".\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.and_then"
        ],
        "@tags": ["Result", "Right Biased", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/and",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "and",
        "namespacedName": "R.and",
        "slug": "result/and",
        "title": "Result.and",
        "@description": "Like the `&&` operator, but applied to `Result` types.\n\nThe `and` function is used to combine two `Result` objects, returning either the first error encountered, or the\nsecond `Ok` value if both `Result` objects are successful.\n\n## Behaviour\n\n`and` behaves just like the `&&` operator, but for support of `Result` types:\n\n| Scenario       | Pseudocode              | Outcome |\n| :------------- | :---------------------- | :------ |\n| `Ok && Err`    | `pipe(Ok, and(Err))`    | `Err`   |\n| `Err && Ok`    | `pipe(Err, and(Ok))`    | `Err`   |\n| `Err1 && Err2` | `pipe(Err1, and(Err2))` | `Err1`  |\n| `Ok1 && Ok2`   | `pipe(Ok1, and(Ok2))`   | `Ok2`   |\n\n## Examples\n\nIn this example, the `and` function is used to combine two `Result` objects (`result1` and `result2`). Since\n`result2` is an `Err` object, the final result is also an `Err` object containing the error message.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { and } from 'tightrope/result/and';\nimport { divide } from 'tightrope/number/divide';\n\nconst result1 = divide(10, 5); // returns Ok(2)\nconst result2 = divide(20, 0); // returns Err(\"Cannot divide by zero\")\n\nconst finalResult = pipe(result1, and(result2));\n\nconsole.log(finalResult); // Err(\"Cannot divide by zero\")\n```\n\nIn this example, the `and` function is used to combine two `Result` objects (`result1` and `result2`). Since both\n`Result` objects are successful, the final result is the second `Ok` value (`Ok(5)`).\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { and } from 'tightrope/result/and';\nimport { divide } from 'tightrope/number/divide';\n\nconst result1 = divide(10, 5); // returns Ok(2)\nconst result2 = divide(20, 4); // returns Ok(5)\n\nconst finalResult = pipe(result1, and(result2)); // returns Ok(5)\n\nconsole.log(finalResult); // Ok(5)\n```",
        "@param": [],
        "@returns": "",
        "@see": ["http://jamiemason.github.io/tightrope/api/result/or"],
        "@tags": ["Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/flatten",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "flatten",
        "namespacedName": "R.flatten",
        "slug": "result/flatten",
        "title": "Result.flatten",
        "@description": "Replace nested Results with one `Result` of the inner value.\n\nFlattening only removes one level of nesting at a time\n\n- If given an `Ok` with a normal value, returns the `Ok` as is.\n- If given an `Err` with a normal value, returns the `Err` as is.\n- If given a `Result` with a `Result` value, returns the inner `Result`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.flatten"
        ],
        "@tags": ["Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/map-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapErr",
        "namespacedName": "R.mapErr",
        "slug": "result/map-err",
        "title": "Result.mapErr",
        "@description": "Transform the value inside the `Err` variant of a `Result`.\n\nIf the input `Result` is an `Err`, the function applies `mapFn` to the error value and returns a new `Result` object\nwith the transformed error value. If the input `Result` is an `Ok`, it simply returns the input `Result` object\nunmodified.\n\nThis function is similar to `map`, but instead of transforming the `Ok` value, it transforms the `Err` value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.map_err"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Value"
        ]
      },
      {
        "filePath": "result/map-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOrElse",
        "namespacedName": "R.mapOrElse",
        "slug": "result/map-or-else",
        "title": "Result.mapOrElse",
        "@description": "Maps a `Result` by applying fallback function default to a contained `Err` value, or a function to a contained `Ok`\nvalue.\n\nThis function can be used to unpack a successful result while handling an error.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/map-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOr",
        "namespacedName": "R.mapOr",
        "slug": "result/map-or",
        "title": "Result.mapOr",
        "@description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/map",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "map",
        "namespacedName": "R.map",
        "slug": "result/map",
        "title": "Result.map",
        "@description": "Transform the value inside the `Ok` variant of a `Result`.\n\nIt takes a `mapFn` function as its argument, which takes the current `Ok` value and returns a new value. The `map`\nfunction then returns a new `Result` object containing the transformed value. If the original `Result` object was an\n`Err`, `map` will return the original `Err` without calling the `mapFn` function.\n\nIn other words, `map` allows you to transform the contents of an `Ok` variant of a `Result` object, while leaving an\n`Err` variant unchanged. It's useful when you need to apply a function to a value inside a `Result` object without\nchanging the structure of the `Result` object itself.\n\n## Example\n\nIn this example, `map` is used twice in the `pipe` function to transform the value inside the `Ok` variant of the\n`Result` object. The final `Result` object contains the result of applying both functions to the original value.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { multiply } from 'tightrope/number/multiply';\nimport { sum } from 'tightrope/number/sum';\nimport { Ok } from 'tightrope/result';\nimport { map } from 'tightrope/result/map';\nimport { unwrap } from 'tightrope/result/unwrap';\n\nconst value: number = pipe(Ok.create(2), map(sum(5)), map(multiply(2)), unwrap);\n\nconsole.log(value); // Output: 14\n```\n\n:::tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\nWhen your function returns a value, you can use `map` to transform the value inside an `Ok` variant.\n\n:::\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`map` runs on the `Ok` variant. If any of the operations return an `Err` object then `map` will skip and return the\n`Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.map"
        ],
        "@tags": ["Result", "Right Biased", "Transform", "Transform Value"]
      },
      {
        "filePath": "result/ok",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "ok",
        "namespacedName": "R.ok",
        "slug": "result/ok",
        "title": "Result.ok",
        "@description": "Transforms `Result<T, E>` into `Option<T>`, mapping `Ok(v)` to `Some(v)` and `Err(e)` to `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "orElse",
        "namespacedName": "R.orElse",
        "slug": "result/or-else",
        "title": "Result.orElse",
        "@description": "Like the `||` operator, but applied to `Result` types with an `() => Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "or",
        "namespacedName": "R.or",
        "slug": "result/or",
        "title": "Result.or",
        "@description": "Like the `||` operator, but applied to `Result` types.\n\n| Scenario       | Pseudocode             | Outcome               |\n| :------------- | :--------------------- | --------------------- |\n| `Ok OR Err`    | `pipe(Ok, or(Err))`    | `Ok`                  |\n| `Err OR Ok`    | `pipe(Err, or(Ok))`    | `Ok`                  |\n| `Err1 OR Err2` | `pipe(Err1, or(Err2))` | `Err2`                |\n| `Ok1 OR Ok2`   | `pipe(Ok1, or(Ok2))`   | `Ok1` (first Ok wins) |",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/unwrap-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOrElse",
        "namespacedName": "R.unwrapOrElse",
        "slug": "result/unwrap-or-else",
        "title": "Result.unwrapOrElse",
        "@description": "Extract value from an `Ok` or from a fallback `() => Ok` if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/unwrap-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOr",
        "namespacedName": "R.unwrapOr",
        "slug": "result/unwrap-or",
        "title": "Result.unwrapOr",
        "@description": "Extract value from an `Ok` or use a fallback value if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Recover",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      }
    ],
    "Booleans": [
      {
        "filePath": "array/is-array-of-booleans",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfBooleans",
        "namespacedName": "A.isArrayOfBooleans",
        "slug": "array/is-array-of-booleans",
        "title": "Array.isArrayOfBooleans",
        "@description": "Asserts that a value is an `Array` containing only `Boolean` values.\n\n## Examples\n\n```ts\nisArrayOfBooleans([true, false, new Boolean(true)]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Booleans", "Guard"]
      },
      {
        "filePath": "guard/is-boolean",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isBoolean",
        "namespacedName": "Guard.isBoolean",
        "slug": "guard/is-boolean",
        "title": "Guard.isBoolean",
        "@description": "Asserts that a value is `true`, `false`, `new Boolean(true)`, or `new Boolean(false)`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Booleans", "Guard"]
      },
      {
        "filePath": "guard/is-false",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isFalse",
        "namespacedName": "Guard.isFalse",
        "slug": "guard/is-false",
        "title": "Guard.isFalse",
        "@description": "Asserts that a value is `false` or `new Boolean(false)`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Booleans", "Guard"]
      },
      {
        "filePath": "guard/is-true",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isTrue",
        "namespacedName": "Guard.isTrue",
        "slug": "guard/is-true",
        "title": "Guard.isTrue",
        "@description": "Asserts that a value is `true` or `new Boolean(true)`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Booleans", "Guard"]
      }
    ],
    "Numbers": [
      {
        "filePath": "array/is-array-of-numbers",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfNumbers",
        "namespacedName": "A.isArrayOfNumbers",
        "slug": "array/is-array-of-numbers",
        "title": "Array.isArrayOfNumbers",
        "@description": "Asserts that a value is an `Array` containing only `Number` values.\n\n## Examples\n\n```ts\nisArrayOfNumbers([12, 0, 14]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Numbers"]
      },
      {
        "filePath": "number/clamp",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "clamp",
        "namespacedName": "N.clamp",
        "slug": "number/clamp",
        "title": "Number.clamp",
        "@description": "Returns a number within the specified range, if the original value is not already within that range.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/divide",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "divide",
        "namespacedName": "N.divide",
        "slug": "number/divide",
        "title": "Number.divide",
        "@description": "Divide one number by another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/is-calculable",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isCalculable",
        "namespacedName": "N.isCalculable",
        "slug": "number/is-calculable",
        "title": "Number.isCalculable",
        "@description": "Assert value can be used in Mathemetic calculations despite not being a `Number`, for example `'1' * '2' === 2`\nwhereas `'wut?' * 2 === NaN`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers", "Strings"]
      },
      {
        "filePath": "number/is-decimal-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isDecimalNumber",
        "namespacedName": "N.isDecimalNumber",
        "slug": "number/is-decimal-number",
        "title": "Number.isDecimalNumber",
        "@description": "Asserts that a value is a `Number` with positive decimal places.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-divisible-by",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isDivisibleBy",
        "namespacedName": "N.isDivisibleBy",
        "slug": "number/is-divisible-by",
        "title": "Number.isDivisibleBy",
        "@description": "Asserts that a value is a `Number` which results in a whole number when divided by another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-even-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isEvenNumber",
        "namespacedName": "N.isEvenNumber",
        "slug": "number/is-even-number",
        "title": "Number.isEvenNumber",
        "@description": "Asserts that a value is an even `Number`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-greater-than-or-equal-to",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isGreaterThanOrEqualTo",
        "namespacedName": "N.isGreaterThanOrEqualTo",
        "slug": "number/is-greater-than-or-equal-to",
        "title": "Number.isGreaterThanOrEqualTo",
        "@description": "Asserts that a value is greater than or equal to other.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-greater-than",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isGreaterThan",
        "namespacedName": "N.isGreaterThan",
        "slug": "number/is-greater-than",
        "title": "Number.isGreaterThan",
        "@description": "Asserts that a value is greater than another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-js-nan",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isJsNaN",
        "namespacedName": "N.isJsNaN",
        "slug": "number/is-js-na-n",
        "title": "Number.isJsNaN",
        "@description": "Asserts that a value is `NaN`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-less-than-or-equal-to",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isLessThanOrEqualTo",
        "namespacedName": "N.isLessThanOrEqualTo",
        "slug": "number/is-less-than-or-equal-to",
        "title": "Number.isLessThanOrEqualTo",
        "@description": "Asserts that a value is less than or equal to another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-less-than",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isLessThan",
        "namespacedName": "N.isLessThan",
        "slug": "number/is-less-than",
        "title": "Number.isLessThan",
        "@description": "Asserts that a value is less than another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-near",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isNear",
        "namespacedName": "N.isNear",
        "slug": "number/is-near",
        "title": "Number.isNear",
        "@description": "Asserts that a value is a number within the given acceptable distance from another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-negative-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isNegativeNumber",
        "namespacedName": "N.isNegativeNumber",
        "slug": "number/is-negative-number",
        "title": "Number.isNegativeNumber",
        "@description": "Asserts that a value is a `Number` less than 0.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isNumber",
        "namespacedName": "N.isNumber",
        "slug": "number/is-number",
        "title": "Number.isNumber",
        "@description": "Asserts that a value is a valid `Number` or `new Number()` and not `NaN`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-odd-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isOddNumber",
        "namespacedName": "N.isOddNumber",
        "slug": "number/is-odd-number",
        "title": "Number.isOddNumber",
        "@description": "Asserts that a value is an odd `Number`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-positive-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isPositiveNumber",
        "namespacedName": "N.isPositiveNumber",
        "slug": "number/is-positive-number",
        "title": "Number.isPositiveNumber",
        "@description": "Asserts that a value is a `Number` greater than 0.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-whole-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isWholeNumber",
        "namespacedName": "N.isWholeNumber",
        "slug": "number/is-whole-number",
        "title": "Number.isWholeNumber",
        "@description": "Asserts that a value is a `Number` with no positive decimal places, both `10`\nand `10.0` are considered whole numbers.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-within-range",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isWithinRange",
        "namespacedName": "N.isWithinRange",
        "slug": "number/is-within-range",
        "title": "Number.isWithinRange",
        "@description": "Asserts that a value is a `Number` which is both greater than or equal to `floor` and less than or equal to\n`ceiling`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/multiply",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "multiply",
        "namespacedName": "N.multiply",
        "slug": "number/multiply",
        "title": "Number.multiply",
        "@description": "Multiply two numbers",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/square",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "square",
        "namespacedName": "N.square",
        "slug": "number/square",
        "title": "Number.square",
        "@description": "Multiply a number by itself",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/subtract",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "subtract",
        "namespacedName": "N.subtract",
        "slug": "number/subtract",
        "title": "Number.subtract",
        "@description": "Subtract one number from another",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/sum",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "sum",
        "namespacedName": "N.sum",
        "slug": "number/sum",
        "title": "Number.sum",
        "@description": "Return the sum of two numbers",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      }
    ],
    "Objects": [
      {
        "filePath": "array/is-array-of-objects",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfObjects",
        "namespacedName": "A.isArrayOfObjects",
        "slug": "array/is-array-of-objects",
        "title": "Array.isArrayOfObjects",
        "@description": "Asserts that a value is an `Array` containing only `Object` values.\n\n## Examples\n\n```ts\nisArrayOfObjects([{}, new Object()]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "Return an `Ok` containing a deeply nested value from an object, or an `Err`.\n\nA curried function that takes two arguments: a string `path` and an `origin` object. It returns an `Ok` containing\nthe value at the specified path in the object, or an `Err` if the path does not exist.\n\n## Example\n\nIn this example, we first define an object `obj` that has a nested property `foo.bar` with a value of `42`. We then\nuse the `get` function to retrieve the value at this path in the object by passing the path and object as arguments.\nNote that we also specify the type of the expected value (`number` in this case) as a type argument to the `get`\nfunction.\n\n```ts\nimport { get } from 'tightrope/fn/get';\n\n// Define an object to query\nconst obj = {\n  foo: {\n    bar: 42,\n  },\n};\n\n// Use get to retrieve a value from the object\nconst result = get<number>('foo.bar', obj); // returns Ok(42)\n```\n\nThe `get` function works by splitting the `path` argument on the `.` character, then using the resulting array of\nproperty names to recursively access nested properties in the `origin` object. If any of the intermediate properties\ndo not exist or are not objects, the function returns `Err`.\n\nThe `get` function is implemented using the `curry` function, which allows us to partially apply the `path` argument\nand reuse the function with different `origin` objects.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Objects", "Read", "Result"]
      },
      {
        "filePath": "guard/has-property",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "hasProperty",
        "namespacedName": "Guard.hasProperty",
        "slug": "guard/has-property",
        "title": "Guard.hasProperty",
        "@description": "Returns true if a value has a property of the given name, even if the value of that property is `undefined`.\n\nThis assertion describes the shape of the given value. For example, value.prop is `undefined` in both of the\nfollowing scenarios, but `{ prop: undefined }` and `{ }` do not have the same shape.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      },
      {
        "filePath": "guard/is-readable",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isReadable",
        "namespacedName": "Guard.isReadable",
        "slug": "guard/is-readable",
        "title": "Guard.isReadable",
        "@description": "Asserts that a value is safe to attempt to read property values from.\n\nOnly `null` and `undefined` will error if you try to read a property on them using dot notation.\n\n## Example",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      },
      {
        "filePath": "object/is-empty-object",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isEmptyObject",
        "namespacedName": "Obj.isEmptyObject",
        "slug": "object/is-empty-object",
        "title": "Object.isEmptyObject",
        "@description": "Asserts that a value is a valid `Object` containing no instance members.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Objects"]
      },
      {
        "filePath": "object/is-non-empty-object",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isNonEmptyObject",
        "namespacedName": "Obj.isNonEmptyObject",
        "slug": "object/is-non-empty-object",
        "title": "Object.isNonEmptyObject",
        "@description": "Asserts that a value is an `Object` containing at least one own member.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Objects"]
      },
      {
        "filePath": "object/is-object",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isObject",
        "namespacedName": "Obj.isObject",
        "slug": "object/is-object",
        "title": "Object.isObject",
        "@description": "Asserts that a value is an `Object`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Objects"]
      }
    ],
    "Array Length": [
      {
        "filePath": "array/is-array-of-size",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfSize",
        "namespacedName": "A.isArrayOfSize",
        "slug": "array/is-array-of-size",
        "title": "Array.isArrayOfSize",
        "@description": "Asserts that a value is an `Array` containing a specific number of values.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array Length", "Arrays", "Guard"]
      },
      {
        "filePath": "array/is-empty-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isEmptyArray",
        "namespacedName": "A.isEmptyArray",
        "slug": "array/is-empty-array",
        "title": "Array.isEmptyArray",
        "@description": "Asserts that a value is a valid `Array` containing no items.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array Length", "Arrays", "Emptiness", "Guard"]
      }
    ],
    "Strings": [
      {
        "filePath": "array/is-array-of-strings",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfStrings",
        "namespacedName": "A.isArrayOfStrings",
        "slug": "array/is-array-of-strings",
        "title": "Array.isArrayOfStrings",
        "@description": "Asserts that a value is an `Array` containing only `String` values.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Strings"]
      },
      {
        "filePath": "number/is-calculable",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isCalculable",
        "namespacedName": "N.isCalculable",
        "slug": "number/is-calculable",
        "title": "Number.isCalculable",
        "@description": "Assert value can be used in Mathemetic calculations despite not being a `Number`, for example `'1' * '2' === 2`\nwhereas `'wut?' * 2 === NaN`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers", "Strings"]
      },
      {
        "filePath": "string/ends-with",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "endsWith",
        "namespacedName": "S.endsWith",
        "slug": "string/ends-with",
        "title": "String.endsWith",
        "@description": "Return true if a given value ends with a specific string.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "String Length", "Strings"]
      },
      {
        "filePath": "string/is-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isEmptyString",
        "namespacedName": "S.isEmptyString",
        "slug": "string/is-empty-string",
        "title": "String.isEmptyString",
        "@description": "Asserts that a value is a valid `String` containing no characters.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Emptiness",
          "Guard",
          "String Length",
          "Strings",
          "Truthiness"
        ]
      },
      {
        "filePath": "string/is-iso8601",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isIso8601",
        "namespacedName": "S.isIso8601",
        "slug": "string/is-iso8601",
        "title": "String.isIso8601",
        "@description": "Asserts that a value is a String which conforms to common use-cases of the ISO 8601 standard representation of dates\nand times.\n\n- '1999-12-31'\n- '1999-12-31T23:59'\n- '1999-12-31T23:59:59'\n- '1999-12-31T23:59:59.000'\n- '1999-12-31T23:59:59.000Z'\n- '1999-12-31T23:59:59+01:00'\n- '1999-12-31T23:59:59-01:00'\n- '1999-12-31T23:59:59.000+01:00'\n- '1999-12-31T23:59:59.000-01:00'",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Dates", "Guard", "Strings"]
      },
      {
        "filePath": "string/is-json-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isJsonString",
        "namespacedName": "S.isJsonString",
        "slug": "string/is-json-string",
        "title": "String.isJsonString",
        "@description": "Asserts that a value is a `String` of valid JSON.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "JSON", "Strings"]
      },
      {
        "filePath": "string/is-non-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isNonEmptyString",
        "namespacedName": "S.isNonEmptyString",
        "slug": "string/is-non-empty-string",
        "title": "String.isNonEmptyString",
        "@description": "Asserts that a value is a valid `String` containing at least one character.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Strings", "Truthiness"]
      },
      {
        "filePath": "string/is-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isString",
        "namespacedName": "S.isString",
        "slug": "string/is-string",
        "title": "String.isString",
        "@description": "Asserts that a value is a `String` or `new String()`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Strings"]
      },
      {
        "filePath": "string/is-visible-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isVisibleString",
        "namespacedName": "S.isVisibleString",
        "slug": "string/is-visible-string",
        "title": "String.isVisibleString",
        "@description": "Asserts that a value is a valid `String` containing at least one character which is not whitespace.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Strings"]
      },
      {
        "filePath": "string/is-whitespace",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isWhitespace",
        "namespacedName": "S.isWhitespace",
        "slug": "string/is-whitespace",
        "title": "String.isWhitespace",
        "@description": "Asserts that a value is a `String` containing only whitespace characters.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Strings"]
      },
      {
        "filePath": "string/starts-with",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "startsWith",
        "namespacedName": "S.startsWith",
        "slug": "string/starts-with",
        "title": "String.startsWith",
        "@description": "Asserts that value is a string whose trailing characters are equal to those of the provided string.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "String Length", "Strings"]
      }
    ],
    "Emptiness": [
      {
        "filePath": "array/is-empty-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isEmptyArray",
        "namespacedName": "A.isEmptyArray",
        "slug": "array/is-empty-array",
        "title": "Array.isEmptyArray",
        "@description": "Asserts that a value is a valid `Array` containing no items.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array Length", "Arrays", "Emptiness", "Guard"]
      },
      {
        "filePath": "array/is-non-empty-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isNonEmptyArray",
        "namespacedName": "A.isNonEmptyArray",
        "slug": "array/is-non-empty-array",
        "title": "Array.isNonEmptyArray",
        "@description": "Asserts that a value is an `Array` containing at least one value.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Emptiness", "Guard"]
      },
      {
        "filePath": "object/is-empty-object",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isEmptyObject",
        "namespacedName": "Obj.isEmptyObject",
        "slug": "object/is-empty-object",
        "title": "Object.isEmptyObject",
        "@description": "Asserts that a value is a valid `Object` containing no instance members.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Objects"]
      },
      {
        "filePath": "object/is-non-empty-object",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isNonEmptyObject",
        "namespacedName": "Obj.isNonEmptyObject",
        "slug": "object/is-non-empty-object",
        "title": "Object.isNonEmptyObject",
        "@description": "Asserts that a value is an `Object` containing at least one own member.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Objects"]
      },
      {
        "filePath": "string/is-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isEmptyString",
        "namespacedName": "S.isEmptyString",
        "slug": "string/is-empty-string",
        "title": "String.isEmptyString",
        "@description": "Asserts that a value is a valid `String` containing no characters.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Emptiness",
          "Guard",
          "String Length",
          "Strings",
          "Truthiness"
        ]
      },
      {
        "filePath": "string/is-non-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isNonEmptyString",
        "namespacedName": "S.isNonEmptyString",
        "slug": "string/is-non-empty-string",
        "title": "String.isNonEmptyString",
        "@description": "Asserts that a value is a valid `String` containing at least one character.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Strings", "Truthiness"]
      }
    ],
    "Filter": [
      {
        "filePath": "array/uniq",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "uniq",
        "namespacedName": "A.uniq",
        "slug": "array/uniq",
        "title": "Array.uniq",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Filter"]
      },
      {
        "filePath": "option/filter",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "filter",
        "namespacedName": "O.filter",
        "slug": "option/filter",
        "title": "Option.filter",
        "@description": "Calls the provided predicate function on the contained value I if the `Option` is `Some(I)`, and returns `Some(I)` if\nthe function returns `true`; otherwise, returns `None`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Filter", "Option", "Right Biased"]
      }
    ],
    "Comparator": [
      {
        "filePath": "date/is-after",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isAfter",
        "namespacedName": "D.isAfter",
        "slug": "date/is-after",
        "title": "Date.isAfter",
        "@description": "Asserts that a value is a valid instance of `Date` whose value occurs after that of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-before",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isBefore",
        "namespacedName": "D.isBefore",
        "slug": "date/is-before",
        "title": "Date.isBefore",
        "@description": "Asserts that a value is a valid instance of `Date` whose value occurs before that of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-between",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateBetween",
        "namespacedName": "D.isDateBetween",
        "slug": "date/is-date-between",
        "title": "Date.isDateBetween",
        "@description": "Asserts that a value is an instance of `Date` occurring on or after `floor` and on or before `ceiling`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-in-month",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateInMonth",
        "namespacedName": "D.isDateInMonth",
        "slug": "date/is-date-in-month",
        "title": "Date.isDateInMonth",
        "@description": "Asserts that a value is an instance of `Date` occurring on the given month of the year, where January is `0` and\nDecember is `11`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-in-year",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateInYear",
        "namespacedName": "D.isDateInYear",
        "slug": "date/is-date-in-year",
        "title": "Date.isDateInYear",
        "@description": "Asserts that a value is an instance of `Date` occurring in the given year.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-day-of-month",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnDayOfMonth",
        "namespacedName": "D.isDateOnDayOfMonth",
        "slug": "date/is-date-on-day-of-month",
        "title": "Date.isDateOnDayOfMonth",
        "@description": "Asserts that a value is an instance of `Date` occurring on the given day of the month, where the first day of the\nmonth is `1` and last is `31`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-day-of-week",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnDayOfWeek",
        "namespacedName": "D.isDateOnDayOfWeek",
        "slug": "date/is-date-on-day-of-week",
        "title": "Date.isDateOnDayOfWeek",
        "@description": "Asserts that a value is an instance of `Date` occurring on the day of the week with the given index, where Sunday is\n`0` and Saturday is `6`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-or-after",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnOrAfter",
        "namespacedName": "D.isDateOnOrAfter",
        "slug": "date/is-date-on-or-after",
        "title": "Date.isDateOnOrAfter",
        "@description": "Asserts that a value is an instance of `Date` occurring on or after the exact date and time of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-or-before",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnOrBefore",
        "namespacedName": "D.isDateOnOrBefore",
        "slug": "date/is-date-on-or-before",
        "title": "Date.isDateOnOrBefore",
        "@description": "Asserts that a value is an instance of `Date` occurring on or before the exact date and time of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "guard/is",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "is",
        "namespacedName": "Guard.is",
        "slug": "guard/is",
        "title": "Guard.is",
        "@description": "Returns whether both values are referentially equal, ie. `a === b`. This will be the case when both values are\nprimitives (undefined, number, null, string, or boolean) or they are objects which both point to the same address in\nmemory.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard"]
      },
      {
        "filePath": "number/is-greater-than-or-equal-to",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isGreaterThanOrEqualTo",
        "namespacedName": "N.isGreaterThanOrEqualTo",
        "slug": "number/is-greater-than-or-equal-to",
        "title": "Number.isGreaterThanOrEqualTo",
        "@description": "Asserts that a value is greater than or equal to other.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-greater-than",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isGreaterThan",
        "namespacedName": "N.isGreaterThan",
        "slug": "number/is-greater-than",
        "title": "Number.isGreaterThan",
        "@description": "Asserts that a value is greater than another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-less-than-or-equal-to",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isLessThanOrEqualTo",
        "namespacedName": "N.isLessThanOrEqualTo",
        "slug": "number/is-less-than-or-equal-to",
        "title": "Number.isLessThanOrEqualTo",
        "@description": "Asserts that a value is less than or equal to another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-less-than",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isLessThan",
        "namespacedName": "N.isLessThan",
        "slug": "number/is-less-than",
        "title": "Number.isLessThan",
        "@description": "Asserts that a value is less than another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-near",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isNear",
        "namespacedName": "N.isNear",
        "slug": "number/is-near",
        "title": "Number.isNear",
        "@description": "Asserts that a value is a number within the given acceptable distance from another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-negative-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isNegativeNumber",
        "namespacedName": "N.isNegativeNumber",
        "slug": "number/is-negative-number",
        "title": "Number.isNegativeNumber",
        "@description": "Asserts that a value is a `Number` less than 0.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "string/ends-with",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "endsWith",
        "namespacedName": "S.endsWith",
        "slug": "string/ends-with",
        "title": "String.endsWith",
        "@description": "Return true if a given value ends with a specific string.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "String Length", "Strings"]
      },
      {
        "filePath": "string/starts-with",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "startsWith",
        "namespacedName": "S.startsWith",
        "slug": "string/starts-with",
        "title": "String.startsWith",
        "@description": "Asserts that value is a string whose trailing characters are equal to those of the provided string.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "String Length", "Strings"]
      }
    ],
    "Dates": [
      {
        "filePath": "date/is-after",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isAfter",
        "namespacedName": "D.isAfter",
        "slug": "date/is-after",
        "title": "Date.isAfter",
        "@description": "Asserts that a value is a valid instance of `Date` whose value occurs after that of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-before",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isBefore",
        "namespacedName": "D.isBefore",
        "slug": "date/is-before",
        "title": "Date.isBefore",
        "@description": "Asserts that a value is a valid instance of `Date` whose value occurs before that of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-between",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateBetween",
        "namespacedName": "D.isDateBetween",
        "slug": "date/is-date-between",
        "title": "Date.isDateBetween",
        "@description": "Asserts that a value is an instance of `Date` occurring on or after `floor` and on or before `ceiling`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-in-month",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateInMonth",
        "namespacedName": "D.isDateInMonth",
        "slug": "date/is-date-in-month",
        "title": "Date.isDateInMonth",
        "@description": "Asserts that a value is an instance of `Date` occurring on the given month of the year, where January is `0` and\nDecember is `11`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-in-year",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateInYear",
        "namespacedName": "D.isDateInYear",
        "slug": "date/is-date-in-year",
        "title": "Date.isDateInYear",
        "@description": "Asserts that a value is an instance of `Date` occurring in the given year.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-day-of-month",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnDayOfMonth",
        "namespacedName": "D.isDateOnDayOfMonth",
        "slug": "date/is-date-on-day-of-month",
        "title": "Date.isDateOnDayOfMonth",
        "@description": "Asserts that a value is an instance of `Date` occurring on the given day of the month, where the first day of the\nmonth is `1` and last is `31`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-day-of-week",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnDayOfWeek",
        "namespacedName": "D.isDateOnDayOfWeek",
        "slug": "date/is-date-on-day-of-week",
        "title": "Date.isDateOnDayOfWeek",
        "@description": "Asserts that a value is an instance of `Date` occurring on the day of the week with the given index, where Sunday is\n`0` and Saturday is `6`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-or-after",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnOrAfter",
        "namespacedName": "D.isDateOnOrAfter",
        "slug": "date/is-date-on-or-after",
        "title": "Date.isDateOnOrAfter",
        "@description": "Asserts that a value is an instance of `Date` occurring on or after the exact date and time of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-or-before",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnOrBefore",
        "namespacedName": "D.isDateOnOrBefore",
        "slug": "date/is-date-on-or-before",
        "title": "Date.isDateOnOrBefore",
        "@description": "Asserts that a value is an instance of `Date` occurring on or before the exact date and time of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDate",
        "namespacedName": "D.isDate",
        "slug": "date/is-date",
        "title": "Date.isDate",
        "@description": "Asserts that a value is an instance of `Date`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Dates", "Guard"]
      },
      {
        "filePath": "date/is-valid-date",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isValidDate",
        "namespacedName": "D.isValidDate",
        "slug": "date/is-valid-date",
        "title": "Date.isValidDate",
        "@description": "Asserts that a value is an instance of `Date` whose internal value is valid. `Date` is little like `Promise` in that\nit is a container for a value. For example, `new Date('wut?')` is a valid `Date` which wraps a value that is not\nvalid.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Dates", "Guard"]
      },
      {
        "filePath": "string/is-iso8601",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isIso8601",
        "namespacedName": "S.isIso8601",
        "slug": "string/is-iso8601",
        "title": "String.isIso8601",
        "@description": "Asserts that a value is a String which conforms to common use-cases of the ISO 8601 standard representation of dates\nand times.\n\n- '1999-12-31'\n- '1999-12-31T23:59'\n- '1999-12-31T23:59:59'\n- '1999-12-31T23:59:59.000'\n- '1999-12-31T23:59:59.000Z'\n- '1999-12-31T23:59:59+01:00'\n- '1999-12-31T23:59:59-01:00'\n- '1999-12-31T23:59:59.000+01:00'\n- '1999-12-31T23:59:59.000-01:00'",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Dates", "Guard", "Strings"]
      }
    ],
    "Composition": [
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "Creates a function which pipes its input through a sequence of functions in left-to-right order.\n\nA higher-order function that takes any number of functions as its arguments and returns a new function that applies\neach function in sequence, passing the result of each function as the argument to the next function.\n\n## Example\n\nIn this example, we first define three functions: `addOne`, `double`, and `square`. We then use the `flow` function\nto create a new function `composedFn` that composes these three functions together. We can then call `composedFn`\nwith an argument to get the result of applying the composed functions in sequence.\n\nNote that the flow function applies the functions in left to right order, so the first function given as an argument\nis applied first.\n\n```ts\nimport { flow } from 'tightrope/fn/flow';\n\n// Define some functions to compose\nfunction addOne(n: number): number {\n  return n + 1;\n}\n\nfunction double(n: number): number {\n  return n * 2;\n}\n\nfunction square(n: number): number {\n  return n * n;\n}\n\n// Use flow to create a new function that composes the other functions\nconst composedFn = flow(addOne, double, square);\n\n// Call the composed function with an argument\nconst result = composedFn(3); // returns 64\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Composition"]
      },
      {
        "filePath": "fn/identity",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "identity",
        "namespacedName": "Fn.identity",
        "slug": "fn/identity",
        "title": "Fn.identity",
        "@description": "A function that takes any value as its argument and returns the same value.\n\nIt is commonly used as a placeholder function in functional programming.\n\n## Example\n\nIn this example, we simply call the `identity` function with a value of `42` and assign the result to a variable\n`result`. Since `identity` simply returns its input value, the value of `result` is also `42`.\n\n```ts\nimport { identity } from 'tightrope/fn/identity';\n\n// Use identity to return a value\nconst value = 42;\nconst result = identity(value); // returns 42\n```\n\nThe `identity` function can be useful in many scenarios, such as when passing a function as an argument to another\nfunction that expects a function, but you don't need to perform any actual transformation on the input value.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Composition"]
      },
      {
        "filePath": "fn/no-op",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "noOp",
        "namespacedName": "Fn.noOp",
        "slug": "fn/no-op",
        "title": "Fn.noOp",
        "@description": "A function that does nothing.\n\nIt is commonly used as a placeholder function in cases where a function is required but there is no action that needs\nto be performed\n\nThe `noOp` function can be useful in situations where you need to pass a function to another function, but you don't\nactually need the function to perform any action. This can be useful for example in tests, or when defining default\nvalues for functions that are not meant to be called.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Composition"]
      }
    ],
    "Read": [
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "Return an `Ok` containing a deeply nested value from an object, or an `Err`.\n\nA curried function that takes two arguments: a string `path` and an `origin` object. It returns an `Ok` containing\nthe value at the specified path in the object, or an `Err` if the path does not exist.\n\n## Example\n\nIn this example, we first define an object `obj` that has a nested property `foo.bar` with a value of `42`. We then\nuse the `get` function to retrieve the value at this path in the object by passing the path and object as arguments.\nNote that we also specify the type of the expected value (`number` in this case) as a type argument to the `get`\nfunction.\n\n```ts\nimport { get } from 'tightrope/fn/get';\n\n// Define an object to query\nconst obj = {\n  foo: {\n    bar: 42,\n  },\n};\n\n// Use get to retrieve a value from the object\nconst result = get<number>('foo.bar', obj); // returns Ok(42)\n```\n\nThe `get` function works by splitting the `path` argument on the `.` character, then using the resulting array of\nproperty names to recursively access nested properties in the `origin` object. If any of the intermediate properties\ndo not exist or are not objects, the function returns `Err`.\n\nThe `get` function is implemented using the `curry` function, which allows us to partially apply the `path` argument\nand reuse the function with different `origin` objects.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Objects", "Read", "Result"]
      }
    ],
    "Result": [
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "Return an `Ok` containing a deeply nested value from an object, or an `Err`.\n\nA curried function that takes two arguments: a string `path` and an `origin` object. It returns an `Ok` containing\nthe value at the specified path in the object, or an `Err` if the path does not exist.\n\n## Example\n\nIn this example, we first define an object `obj` that has a nested property `foo.bar` with a value of `42`. We then\nuse the `get` function to retrieve the value at this path in the object by passing the path and object as arguments.\nNote that we also specify the type of the expected value (`number` in this case) as a type argument to the `get`\nfunction.\n\n```ts\nimport { get } from 'tightrope/fn/get';\n\n// Define an object to query\nconst obj = {\n  foo: {\n    bar: 42,\n  },\n};\n\n// Use get to retrieve a value from the object\nconst result = get<number>('foo.bar', obj); // returns Ok(42)\n```\n\nThe `get` function works by splitting the `path` argument on the `.` character, then using the resulting array of\nproperty names to recursively access nested properties in the `origin` object. If any of the intermediate properties\ndo not exist or are not objects, the function returns `Err`.\n\nThe `get` function is implemented using the `curry` function, which allows us to partially apply the `path` argument\nand reuse the function with different `origin` objects.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Objects", "Read", "Result"]
      },
      {
        "filePath": "option/map-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOrElse",
        "namespacedName": "O.mapOrElse",
        "slug": "option/map-or-else",
        "title": "Option.mapOrElse",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the result of evaluating the provided\nfallback function if the `Option` is `None`",
        "@param": [
          {
            "name": "mapFn",
            "description": "The function to apply to the contained value of `Some`."
          },
          {
            "name": "defaultFn",
            "description": "The fallback function to evaluate if the `Option` is `None`."
          },
          {
            "name": "opt",
            "description": "The `Option` to apply the provided function to."
          }
        ],
        "@returns": "The result of applying the provided function to the contained value of `Some`, or the result of evaluating\n  the fallback function if the `Option` is `None`.",
        "@see": [],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/ok-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "okOrElse",
        "namespacedName": "O.okOrElse",
        "slug": "option/ok-or-else",
        "title": "Option.okOrElse",
        "@description": "Transforms an `Option` to a `Result`. A `Some(v)` becomes `Ok(v)` and `None` becomes `Err` using the provided\nfunction.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else"
        ],
        "@tags": ["Option", "Result", "Transform"]
      },
      {
        "filePath": "option/ok-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "okOr",
        "namespacedName": "O.okOr",
        "slug": "option/ok-or",
        "title": "Option.okOr",
        "@description": "Transforms `Some(v)` to `Ok(v)`, and `None` to a value of `Err` using the provided default error value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or"
        ],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/unwrap-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOrElse",
        "namespacedName": "O.unwrapOrElse",
        "slug": "option/unwrap-or-else",
        "title": "Option.unwrapOrElse",
        "@description": "Extract value from a `Some` or from a fallback `() => value` if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/all",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "all",
        "namespacedName": "R.all",
        "slug": "result/all",
        "title": "Result.all",
        "@description": "Takes an array of `Result` values and returns a `Result` containing an array of `Ok` values if all input values are\n`Ok`. If any input value is an `Err`, returns an `Err` containing an array of all encountered `Err` values.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array", "Result"]
      },
      {
        "filePath": "result/and-then",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "andThen",
        "namespacedName": "R.andThen",
        "slug": "result/and-then",
        "title": "Result.andThen",
        "@description": "Same as `flatMap` or `chain`, transform a `Result` with the value of another.\n\nWhen your function returns a `Result` object, you can use `andThen` to transform the `Ok` variant itself.\n\n::: tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\n:::\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport type { Result } from 'tightrope/result';\nimport { Err, Ok } from 'tightrope/result';\nimport { andThen } from 'tightrope/result/and-then';\nimport { map } from 'tightrope/result/map';\nimport { multiply } from 'tightrope/number/multiply';\nimport { unwrapOr } from 'tightrope/result/unwrap-or';\n\nfunction divide(x: number, y: number): Result<number, Error> {\n  if (y === 0) {\n    return new Err(new Error('Division by zero'));\n  }\n  return new Ok(x / y);\n}\n\nconst amount = pipe(\n  Ok.create<number, Error>(16),\n  andThen((n) => divide(n, 2)),\n  andThen((n) => divide(n, 4)),\n  map(multiply(100)),\n  unwrapOr(0),\n);\n\nconsole.log(amount); // 200\n```\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`andThen` runs on the `Ok` variant. If any of the operations return an `Err` object then `andThen` will skip and\nreturn the `Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `andThen` is sometimes referred to as `chain` or `flatMap`.\n- `Result` is sometimes referred to as `Either`.\n- `Ok` is sometimes referred to as `Right` or \"the happy path\".\n- `Err` is sometimes referred to as `Left` or \"the sad path\".\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.and_then"
        ],
        "@tags": ["Result", "Right Biased", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/and",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "and",
        "namespacedName": "R.and",
        "slug": "result/and",
        "title": "Result.and",
        "@description": "Like the `&&` operator, but applied to `Result` types.\n\nThe `and` function is used to combine two `Result` objects, returning either the first error encountered, or the\nsecond `Ok` value if both `Result` objects are successful.\n\n## Behaviour\n\n`and` behaves just like the `&&` operator, but for support of `Result` types:\n\n| Scenario       | Pseudocode              | Outcome |\n| :------------- | :---------------------- | :------ |\n| `Ok && Err`    | `pipe(Ok, and(Err))`    | `Err`   |\n| `Err && Ok`    | `pipe(Err, and(Ok))`    | `Err`   |\n| `Err1 && Err2` | `pipe(Err1, and(Err2))` | `Err1`  |\n| `Ok1 && Ok2`   | `pipe(Ok1, and(Ok2))`   | `Ok2`   |\n\n## Examples\n\nIn this example, the `and` function is used to combine two `Result` objects (`result1` and `result2`). Since\n`result2` is an `Err` object, the final result is also an `Err` object containing the error message.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { and } from 'tightrope/result/and';\nimport { divide } from 'tightrope/number/divide';\n\nconst result1 = divide(10, 5); // returns Ok(2)\nconst result2 = divide(20, 0); // returns Err(\"Cannot divide by zero\")\n\nconst finalResult = pipe(result1, and(result2));\n\nconsole.log(finalResult); // Err(\"Cannot divide by zero\")\n```\n\nIn this example, the `and` function is used to combine two `Result` objects (`result1` and `result2`). Since both\n`Result` objects are successful, the final result is the second `Ok` value (`Ok(5)`).\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { and } from 'tightrope/result/and';\nimport { divide } from 'tightrope/number/divide';\n\nconst result1 = divide(10, 5); // returns Ok(2)\nconst result2 = divide(20, 4); // returns Ok(5)\n\nconst finalResult = pipe(result1, and(result2)); // returns Ok(5)\n\nconsole.log(finalResult); // Ok(5)\n```",
        "@param": [],
        "@returns": "",
        "@see": ["http://jamiemason.github.io/tightrope/api/result/or"],
        "@tags": ["Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/expect-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "expectErr",
        "namespacedName": "R.expectErr",
        "slug": "result/expect-err",
        "title": "Result.expectErr",
        "@description": "Unwrap an expected `Err` value from a `Result`, or throw if it is an `Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect_err"
        ],
        "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/expect",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "expect",
        "namespacedName": "R.expect",
        "slug": "result/expect",
        "title": "Result.expect",
        "@description": "Extract value from an `Ok` or throw with the given message on an `Err`.\n\nUse `expect` to unwrap a `Result` when you are \"certain\" that the `Result` value will be an `Ok`, and you want to\nextract the value contained in it.\n\nIf the `Result` value ever turns out to be an `Err`, it will throw an `Error` with the given message.\n\n:::warning\n\n`expect` will throw if the `Result` is an `Err`.\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect"
        ],
        "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/filter",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "filter",
        "namespacedName": "R.filter",
        "slug": "result/filter",
        "title": "Result.filter",
        "@description": "Keep an `Ok` if its value passes the guard function, or return an `Err`\ncontaining the result of `getErrValue()`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Result", "Right Biased"]
      },
      {
        "filePath": "result/flatten",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "flatten",
        "namespacedName": "R.flatten",
        "slug": "result/flatten",
        "title": "Result.flatten",
        "@description": "Replace nested Results with one `Result` of the inner value.\n\nFlattening only removes one level of nesting at a time\n\n- If given an `Ok` with a normal value, returns the `Ok` as is.\n- If given an `Err` with a normal value, returns the `Err` as is.\n- If given a `Result` with a `Result` value, returns the inner `Result`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.flatten"
        ],
        "@tags": ["Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/from-guard",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "fromGuard",
        "namespacedName": "R.fromGuard",
        "slug": "result/from-guard",
        "title": "Result.fromGuard",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Result", "Wrap"]
      },
      {
        "filePath": "result/from-try",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "fromTry",
        "namespacedName": "R.fromTry",
        "slug": "result/from-try",
        "title": "Result.fromTry",
        "@description": "Create an `Ok` or `Err` from `try...catch`.\n\nThe purpose of `fromTry` is to safely execute a given function and return either an `Ok` instance with the result or\nan `Err` instance with the caught error.\n\nThe function is executed inside a try-catch block and if it runs without errors, `fromTry` returns an `Ok` instance\nwith the result. Otherwise, `fromTry` returns an `Err` instance with the caught error.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Result", "Wrap"]
      },
      {
        "filePath": "result/is-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "isErr",
        "namespacedName": "R.isErr",
        "slug": "result/is-err",
        "title": "Result.isErr",
        "@description": "Check if value is an instance of the `Err` class.\n\nThis can be used to handle error cases in a program flow that uses the `Result` type.\n\nFor example, it can be used to check if the result of a function that returns a `Result` is an `Err` or an `Ok`, and\ntake different actions depending on the outcome.\n\nIt can also be used for validation or error checking, to make sure that the value passed to a function or module is\nof the expected type.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.is_err"
        ],
        "@tags": ["Errors", "Guard", "Result"]
      },
      {
        "filePath": "result/is-ok",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "isOk",
        "namespacedName": "R.isOk",
        "slug": "result/is-ok",
        "title": "Result.isOk",
        "@description": "Check if value is an instance of the `Ok` class.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.is_ok"
        ],
        "@tags": ["Guard", "Result"]
      },
      {
        "filePath": "result/is-result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "isResult",
        "namespacedName": "R.isResult",
        "slug": "result/is-result",
        "title": "Result.isResult",
        "@description": "Check if value is an instance of either the `Ok` or `Err` classes.\n\nYou would use `isResult` when you want to check if a value is a `Result` instance, regardless of whether it contains\nan `Ok` or `Err` variant.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Result"]
      },
      {
        "filePath": "result/map-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapErr",
        "namespacedName": "R.mapErr",
        "slug": "result/map-err",
        "title": "Result.mapErr",
        "@description": "Transform the value inside the `Err` variant of a `Result`.\n\nIf the input `Result` is an `Err`, the function applies `mapFn` to the error value and returns a new `Result` object\nwith the transformed error value. If the input `Result` is an `Ok`, it simply returns the input `Result` object\nunmodified.\n\nThis function is similar to `map`, but instead of transforming the `Ok` value, it transforms the `Err` value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.map_err"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Value"
        ]
      },
      {
        "filePath": "result/map-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOrElse",
        "namespacedName": "R.mapOrElse",
        "slug": "result/map-or-else",
        "title": "Result.mapOrElse",
        "@description": "Maps a `Result` by applying fallback function default to a contained `Err` value, or a function to a contained `Ok`\nvalue.\n\nThis function can be used to unpack a successful result while handling an error.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/map-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOr",
        "namespacedName": "R.mapOr",
        "slug": "result/map-or",
        "title": "Result.mapOr",
        "@description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/map",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "map",
        "namespacedName": "R.map",
        "slug": "result/map",
        "title": "Result.map",
        "@description": "Transform the value inside the `Ok` variant of a `Result`.\n\nIt takes a `mapFn` function as its argument, which takes the current `Ok` value and returns a new value. The `map`\nfunction then returns a new `Result` object containing the transformed value. If the original `Result` object was an\n`Err`, `map` will return the original `Err` without calling the `mapFn` function.\n\nIn other words, `map` allows you to transform the contents of an `Ok` variant of a `Result` object, while leaving an\n`Err` variant unchanged. It's useful when you need to apply a function to a value inside a `Result` object without\nchanging the structure of the `Result` object itself.\n\n## Example\n\nIn this example, `map` is used twice in the `pipe` function to transform the value inside the `Ok` variant of the\n`Result` object. The final `Result` object contains the result of applying both functions to the original value.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { multiply } from 'tightrope/number/multiply';\nimport { sum } from 'tightrope/number/sum';\nimport { Ok } from 'tightrope/result';\nimport { map } from 'tightrope/result/map';\nimport { unwrap } from 'tightrope/result/unwrap';\n\nconst value: number = pipe(Ok.create(2), map(sum(5)), map(multiply(2)), unwrap);\n\nconsole.log(value); // Output: 14\n```\n\n:::tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\nWhen your function returns a value, you can use `map` to transform the value inside an `Ok` variant.\n\n:::\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`map` runs on the `Ok` variant. If any of the operations return an `Err` object then `map` will skip and return the\n`Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.map"
        ],
        "@tags": ["Result", "Right Biased", "Transform", "Transform Value"]
      },
      {
        "filePath": "result/match",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "match",
        "namespacedName": "R.match",
        "slug": "result/match",
        "title": "Result.match",
        "@description": "Extract value from both an `Ok` or an `Err`.\n\nThe match function takes an object containing two functions: `Ok` and `Err`, which are used to handle the values of\nthe `Ok` and `Err` variants of a `Result` object. It then returns a new function that takes a `Result` object and\nreturns the result of applying either the `Ok` or `Err` function to the value inside the `Result`, depending on which\nvariant it contains.\n\n## Example\n\nIn this example, `andThen` is used to transform the `Ok` variant of the `Result` object.\n\n- If the value inside the `Ok` variant is greater than `50`, an `Err` variant containing the error message `\"Value too\n  high\"` is returned.\n- If the value is less than or equal to `50`, an `Ok` variant containing the original value is returned.\n\nThe `match` function is then used to handle the two possible variants of the `Result` object, printing the\nappropriate message to the console.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { andThen } from 'tightrope/result/and-then';\nimport { Err } from 'tightrope/result';\nimport { match } from 'tightrope/result/match';\nimport { Ok } from 'tightrope/result';\n\nconst result = pipe(\n  60,\n  Ok.create,\n  andThen((value) => (value > 50 ? new Err('Value too high') : new Ok(value))),\n  match({\n    Ok: (value) => `The value is ${value}`,\n    Err: (err) => `Error: ${err}`,\n  }),\n);\n\nconsole.log(result); // Outputs: \"Error: Value too high\"\n```\n\n## Use Cases\n\n`match` is used to destructure and extract the value from a `Result` object and perform different actions based on\nwhether it is an `Ok` or `Err`. This is useful when handling errors or when processing data that may or may not\ncontain errors.\n\nOne common use case for `match` is error handling. When an operation can result in an error, it can return a `Result`\nobject that either contains an `Ok` value or an `Err` value. `match` can be used to handle each case separately, for\nexample to log the error message in case of an `Err` or continue processing with the `Ok` value.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Result", "Unwrap"]
      },
      {
        "filePath": "result/ok",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "ok",
        "namespacedName": "R.ok",
        "slug": "result/ok",
        "title": "Result.ok",
        "@description": "Transforms `Result<T, E>` into `Option<T>`, mapping `Ok(v)` to `Some(v)` and `Err(e)` to `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "orElse",
        "namespacedName": "R.orElse",
        "slug": "result/or-else",
        "title": "Result.orElse",
        "@description": "Like the `||` operator, but applied to `Result` types with an `() => Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "or",
        "namespacedName": "R.or",
        "slug": "result/or",
        "title": "Result.or",
        "@description": "Like the `||` operator, but applied to `Result` types.\n\n| Scenario       | Pseudocode             | Outcome               |\n| :------------- | :--------------------- | --------------------- |\n| `Ok OR Err`    | `pipe(Ok, or(Err))`    | `Ok`                  |\n| `Err OR Ok`    | `pipe(Err, or(Ok))`    | `Ok`                  |\n| `Err1 OR Err2` | `pipe(Err1, or(Err2))` | `Err2`                |\n| `Ok1 OR Ok2`   | `pipe(Ok1, or(Ok2))`   | `Ok1` (first Ok wins) |",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Result",
        "namespacedName": "R.Result",
        "slug": "result/result",
        "title": "Result.Result",
        "@description": "`Result` is a type that represents either success (`Ok`) or failure (`Err`).\n\n`Result<T, E>` is the type used for returning and propagating errors. It is an enum with the variants, `Ok(T)`,\nrepresenting success and containing a value, and `Err(E)`, representing error and containing an error value.\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `Result` is sometimes referred to as `Either`.\n- `Ok` is sometimes referred to as `Right` or \"the happy path\".\n- `Err` is sometimes referred to as `Left` or \"the sad path\".\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Result", "Type"]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Ok",
        "namespacedName": "R.Ok",
        "slug": "result/ok",
        "title": "Result.Ok",
        "@description": "Represent a correct value in the `Result` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Ok } from 'tightrope/result';\n\nconst value = new Ok('Success!');\n```\n\nYou can check if a value is an `Ok` instance by using the `isOk` function.\n\n```ts\nimport { isOk } from 'tightrope/result/is-ok';\n\nconst value = new Ok('Success!');\nconsole.log(isOk(value)); // true\nconsole.log(isOk('foo')); // false\nconsole.log(isOk('Success! but this is not inside an Ok')); // false\n```\n\n`Ok` instances are usually returned from functions that can fail or encounter an error, and are combined with `Ok`\ninstances using the `Result` type.\n\n## Use Cases\n\nCreating an `Ok` instance directly is useful when you want to represent an error in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an `Ok` instance directly with the error message or code you want to use. This can give you\nmore control over the specific errors that your application can encounter and how they are handled.\n\nAnother use case for creating an `Ok` instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an `Ok` instance directly with a specific error message or code, you\ncan test how your application handles that error condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Result", "Wrap"]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Err",
        "namespacedName": "R.Err",
        "slug": "result/err",
        "title": "Result.Err",
        "@description": "Represent an erroneous value in the `Result` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Err } from 'tightrope/result';\n\nconst error = new Err(new Error('Something went wrong.'));\n```\n\nYou can check if a value is an `Err` instance by using the `isErr` function.\n\n```ts\nimport { isErr } from 'tightrope/result/is-err';\n\nconst error = new Err(new Error('Something went wrong.'));\nconsole.log(isErr(error)); // true\nconsole.log(isErr('foo')); // false\nconsole.log(isErr(new Error('not the same thing'))); // false\n```\n\n`Err` instances are usually returned from functions that can fail or encounter an error, and are combined with `Ok`\ninstances using the `Result` type.\n\n## Use Cases\n\nCreating an `Err` instance directly is useful when you want to represent an error in your program without having to\ngo through a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an `Err` instance directly with the error message or code you want to use. This can give\nyou more control over the specific errors that your application can encounter and how they are handled.\n\nAnother use case for creating an `Err` instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an `Err` instance directly with a specific error message or code,\nyou can test how your application handles that error condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Errors", "Result", "Wrap"]
      },
      {
        "filePath": "result/sequence",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "sequence",
        "namespacedName": "R.sequence",
        "slug": "result/sequence",
        "title": "Result.sequence",
        "@description": "Takes an array of `Result` values and returns a `Result` containing an array\nof values if all Results are `Ok`. If any input value is an `Err`, returns\nthe first encountered `Err`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array", "Result"]
      },
      {
        "filePath": "result/unwrap-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapErr",
        "namespacedName": "R.unwrapErr",
        "slug": "result/unwrap-err",
        "title": "Result.unwrapErr",
        "@description": "Extract value from an `Err` or throw on an `Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_err"
        ],
        "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/unwrap-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOrElse",
        "namespacedName": "R.unwrapOrElse",
        "slug": "result/unwrap-or-else",
        "title": "Result.unwrapOrElse",
        "@description": "Extract value from an `Ok` or from a fallback `() => Ok` if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/unwrap-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOr",
        "namespacedName": "R.unwrapOr",
        "slug": "result/unwrap-or",
        "title": "Result.unwrapOr",
        "@description": "Extract value from an `Ok` or use a fallback value if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Recover",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/unwrap",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrap",
        "namespacedName": "R.unwrap",
        "slug": "result/unwrap",
        "title": "Result.unwrap",
        "@description": "Extract value from an `Ok` or throw on an `Err`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap"
        ],
        "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
      }
    ],
    "Async": [
      {
        "filePath": "fn/is-async-function",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "isAsyncFunction",
        "namespacedName": "Fn.isAsyncFunction",
        "slug": "fn/is-async-function",
        "title": "Fn.isAsyncFunction",
        "@description": "Asserts that a value is a function using `async` and `await` syntax.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Async", "Functions", "Guard"]
      }
    ],
    "Functions": [
      {
        "filePath": "fn/is-async-function",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "isAsyncFunction",
        "namespacedName": "Fn.isAsyncFunction",
        "slug": "fn/is-async-function",
        "title": "Fn.isAsyncFunction",
        "@description": "Asserts that a value is a function using `async` and `await` syntax.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Async", "Functions", "Guard"]
      },
      {
        "filePath": "fn/is-function",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "isFunction",
        "namespacedName": "Fn.isFunction",
        "slug": "fn/is-function",
        "title": "Fn.isFunction",
        "@description": "Asserts that a value is a `Function`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Functions", "Guard"]
      },
      {
        "filePath": "fn/is-generator-function",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "isGeneratorFunction",
        "namespacedName": "Fn.isGeneratorFunction",
        "slug": "fn/is-generator-function",
        "title": "Fn.isGeneratorFunction",
        "@description": "Asserts that a value is a `Function` using `yield` syntax.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Functions", "Generator", "Guard"]
      },
      {
        "filePath": "fn/throws-any-error",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "throwsAnyError",
        "namespacedName": "Fn.throwsAnyError",
        "slug": "fn/throws-any-error",
        "title": "Fn.throwsAnyError",
        "@description": "Asserts that a value is a `Function` which throws when invoked.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Functions", "Guard"]
      },
      {
        "filePath": "fn/throws-error-of-type",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "throwsErrorOfType",
        "namespacedName": "Fn.throwsErrorOfType",
        "slug": "fn/throws-error-of-type",
        "title": "Fn.throwsErrorOfType",
        "@description": "Asserts that a value is a `Function` which throws an `Error` of the given type.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Functions", "Guard"]
      }
    ],
    "Generator": [
      {
        "filePath": "fn/is-generator-function",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "isGeneratorFunction",
        "namespacedName": "Fn.isGeneratorFunction",
        "slug": "fn/is-generator-function",
        "title": "Fn.isGeneratorFunction",
        "@description": "Asserts that a value is a `Function` using `yield` syntax.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Functions", "Generator", "Guard"]
      },
      {
        "filePath": "gen/filter",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "filter",
        "namespacedName": "Gen.filter",
        "slug": "gen/filter",
        "title": "Gen.filter",
        "@description": "Only `yield` each value which passes the predicate.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator"]
      },
      {
        "filePath": "gen/map",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "map",
        "namespacedName": "Gen.map",
        "slug": "gen/map",
        "title": "Gen.map",
        "@description": "Transform and `yield` each value produced by a generator.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator", "Transform"]
      },
      {
        "filePath": "gen/range",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "range",
        "namespacedName": "Gen.range",
        "slug": "gen/range",
        "title": "Gen.range",
        "@description": "Create a generator which will `yield` a sequence of numbers.\n\nThe `range` generator works by starting with the `floor` value and then yielding each subsequent integer value until\nthe `ceiling` value is reached. The generator continues to yield values until it is exhausted, and can be used to\ngenerate any range of integers, including negative ranges and ranges with non-integer steps.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Data Source", "Generator"]
      },
      {
        "filePath": "gen/reduce-each",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "reduceEach",
        "namespacedName": "Gen.reduceEach",
        "slug": "gen/reduce-each",
        "title": "Gen.reduceEach",
        "@description": "Reduce and `yield` each value produced by a generator.\n\nA higher-order function that takes a `reducer` function as its argument and returns a new function that can be used\nto reduce the values generated by a generator.\n\nThe returned function takes a generator as its argument and returns a new generator that yields the partial results\nof the reduction operation. It works by applying the `reducer` function to each pair of values generated by the input\ngenerator, and yielding the partial results of the reduction operation.\n\nThe `reducer` function takes two arguments: an `accumulator` value that represents the current state of the reduction\noperation, and a `value` generated by the input generator. The reducer function applies some operation to the\naccumulator value and the input value, and returns a new accumulator value that represents the updated state of the\nreduction operation.\n\nIn summary, `reduceEach` is a powerful tool for working with generators in JavaScript and TypeScript. It can be used\nto perform complex reduction operations on large or complex data sets, and can help us write more efficient and\nfocused code.\n\n## Example\n\nIn this example, we use the `range` function to generate a sequence of numbers from `1` to `10`, the `map` function\nto double each value in the sequence, and the `take` function to select the first `5` values in the sequence.\nFinally, we apply the `reduceEach` function with the `sum` function as its argument to generate the partial sums of\nthe remaining values in the sequence.\n\nWe then use a `for...of` loop to iterate over the partial sums generated by the `partialSums` generator, and log them\nto the console.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { map } from 'tightrope/gen/map';\nimport { range } from 'tightrope/gen/range';\nimport { reduceEach } from 'tightrope/gen/reduce-each';\nimport { take } from 'tightrope/gen/take';\nimport { multiply } from 'tightrope/number/multiply';\n\nfunction sum(acc: number, curr: number): number {\n  return acc + curr;\n}\n\nconst partialSums = pipe(range(1, 10), map(multiply(2)), take(5), reduceEach(sum));\n\nfor (const value of partialSums) {\n  console.log(value);\n  //  6\n  // 12\n  // 20\n  // 30\n}\n```\n\n## Use Cases\n\nCommon use cases for `reduceEach`:\n\n1. **Summing values**: calculate the sum of a series of numbers generated by a generator.\n2. **Counting values**: count the number of values generated by a generator that satisfy a given condition.\n3. **Finding minimum or maximum values**: find the minimum or maximum value generated by a generator.\n4. **Concatenating strings**: concatenate a series of strings generated by a generator.\n5. **Grouping values**: group a series of values generated by a generator into a nested structure, such as an object or\n   an array.\n6. **Filtering values**: filter the values generated by a generator based on a given condition.\n7. **Computing averages**: compute the average of a series of numbers generated by a generator.\n8. **Building up an object**: build up an object by accumulating properties and values generated by a generator.\n\nIn general, `reduceEach` can be used in any situation where we need to perform some kind of reduction operation on a\nseries of values generated by a generator. Its flexibility and power make it a versatile tool for working with\ngenerators in JavaScript and TypeScript.\n\n## `reduce` or `reduceEach`?\n\n`reduce` and `reduceEach` are very similar functions, and it can be difficult to decide which one to use in a given\nsituation. Here are some guidelines to help you decide:\n\n1. Use `reduce` if you want to perform a reduction operation on the entire sequence of values generated by a generator,\n   and you only need to return a single value.\n2. Use `reduceEach` if you want to perform a reduction operation on each individual value generated by a generator, and\n   you need to return a sequence of partial results.\n\nIn general, the choice between `reduce` and `reduceEach` will depend on the specific requirements of your problem, as\nwell as the nature of the data you are working with.\n\n- If you need to perform a simple reduction operation on a single sequence of values, `reduce` may be the better\n  choice.\n- If you need to perform a more complex reduction operation that involves multiple sequences of values, or if you need\n  to return a sequence of partial results, `reduceEach` may be the better choice.",
        "@param": [],
        "@returns": "",
        "@see": ["https://jamiemason.github.io/tightrope/api/gen/reduce"],
        "@tags": ["Generator", "Transform", "Transform Value"]
      },
      {
        "filePath": "gen/reduce",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "reduce",
        "namespacedName": "Gen.reduce",
        "slug": "gen/reduce",
        "title": "Gen.reduce",
        "@description": "Reduce every value produced by a generator and `yield` the final result.\n\nA higher-order function that takes a reducer function as its argument and returns a new function that can be used to\nreduce the values generated by a generator to a single value.\n\nThe returned function takes a generator as its argument and returns a new generator that yields the final result of\nthe reduction operation.\n\nThe `reduce` function works by using the `reduceEach` function to generate a sequence of partial results for the\nreduction operation, and then returning the final result of the reduction operation.\n\nThe `reducer` function takes two arguments: an `accumulator` value that represents the current state of the reduction\noperation, and a `value` generated by the input generator. The reducer function applies some operation to the\naccumulator value and the input value, and returns a new accumulator value that represents the updated state of the\nreduction operation.\n\nIf an initial value is provided, it will be used as the initial state of the reduction operation. If no initial value\nis provided, the first value generated by the input generator will be used as the initial state.\n\n## Example\n\nIn this example, we use the pipe function to create a pipeline of functions that generate a series of numbers, double\neach number using `multiply(2)`, and then calculate the sum of the resulting values.\n\n1. We define a `sum` function that takes two numbers as input and returns their sum.\n2. We use the `range` function to generate a series of numbers from `1` to `10`.\n3. We use the `map` function with `multiply(2)` to double each number in the series.\n4. We use the `reduce` function to calculate the sum of the resulting values.\n5. We use a `for...of` loop to iterate over the values generated by `doubledSum`, which will be one value, the final\n   total, which should be `110`.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { map } from 'tightrope/gen/map';\nimport { range } from 'tightrope/gen/range';\nimport { reduce } from 'tightrope/gen/reduce';\nimport { multiply } from 'tightrope/number/multiply';\n\nfunction sum(acc: number, curr: number): number {\n  return acc + curr;\n}\n\nconst doubledSum = pipe(range(1, 10), map(multiply(2)), reduce(sum));\n\nfor (const value of doubledSum) {\n  console.log(value); // 110\n}\n```\n\n## `reduce` or `reduceEach`?\n\n`reduce` and `reduceEach` are very similar functions, and it can be difficult to decide which one to use in a given\nsituation. Here are some guidelines to help you decide:\n\n1. Use `reduce` if you want to perform a reduction operation on the entire sequence of values generated by a generator,\n   and you only need to return a single value.\n2. Use `reduceEach` if you want to perform a reduction operation on each individual value generated by a generator, and\n   you need to return a sequence of partial results.\n\nIn general, the choice between `reduce` and `reduceEach` will depend on the specific requirements of your problem, as\nwell as the nature of the data you are working with.\n\n- If you need to perform a simple reduction operation on a single sequence of values, `reduce` may be the better\n  choice.\n- If you need to perform a more complex reduction operation that involves multiple sequences of values, or if you need\n  to return a sequence of partial results, `reduceEach` may be the better choice.",
        "@param": [],
        "@returns": "",
        "@see": ["https://jamiemason.github.io/tightrope/api/gen/reduce-each"],
        "@tags": ["Generator", "Transform", "Transform Value"]
      },
      {
        "filePath": "gen/skip",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "skip",
        "namespacedName": "Gen.skip",
        "slug": "gen/skip",
        "title": "Gen.skip",
        "@description": "Do not `yield` values until after first ignoring `count` values.\n\nA higher-order function that takes a number `num` as its argument and returns a new function that can be used to skip\nthe first `num` values generated by a generator.\n\nThe returned function takes a generator as its argument and returns a new generator that yields all the values\ngenerated by the input generator except for the first `num` values.\n\n## Example\n\nHere's an example of how to use the `skip` function to skip the first two values generated by a `range` generator:\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { range } from 'tightrope/gen/range';\nimport { skip } from 'tightrope/gen/skip';\n\nconst gen = pipe(range(1, 10), skip(2));\n\nfor (const value of gen) {\n  console.log(value); // 3, 4, 5, 6, 7, 8, 9, 10\n}\n```\n\n## Use Cases\n\nCommon use cases for the `skip` function:\n\n1. Skipping the first `n` items in a sequence: You may need to skip the first `n` items in a sequence of data, either\n   because they are not relevant to your use case or because you have already processed them.\n2. Paginating data: If you are working with large datasets, you may need to paginate the data to improve performance.\n   The `skip` function can be used to skip the first `n` items in each page of data.\n3. Splitting data into batches: If you are processing data in batches, you may need to skip the first `n` items in each\n   batch to avoid processing duplicate data.\n4. Skipping headers or footers in a file: If you are processing a file with a header or footer, you may need to skip\n   those lines before processing the rest of the file.\n\nOverall, the skip function is a useful tool for skipping over irrelevant or already-processed data in a sequence, and\ncan be used in a variety of contexts to improve the efficiency and readability of your code.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator"]
      },
      {
        "filePath": "gen/split",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "split",
        "namespacedName": "Gen.split",
        "slug": "gen/split",
        "title": "Gen.split",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator", "Transformer"]
      },
      {
        "filePath": "gen/take-last",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "takeLast",
        "namespacedName": "Gen.takeLast",
        "slug": "gen/take-last",
        "title": "Gen.takeLast",
        "@description": "Consume a generator and `yield` only the final result.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator"]
      },
      {
        "filePath": "gen/take",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "take",
        "namespacedName": "Gen.take",
        "slug": "gen/take",
        "title": "Gen.take",
        "@description": "Do not `yield` values after `count` values have been yielded.\n\nA higher-order function that takes a number amount as its argument and returns a new function that can be used to\ntake the first amount values generated by a generator.\n\nThe returned function takes a generator as its argument and returns a new generator that yields at most the first\namount values generated by the input generator.\n\n## Example\n\nHere's an example of how to use the `take` function to take the first three values generated by a range generator:\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { range } from 'tightrope/gen/range';\nimport { take } from 'tightrope/gen/take';\n\nconst gen = pipe(range(1, 10), take(3));\n\nfor (const value of gen) {\n  console.log(value); // 1, 2, 3\n}\n```\n\nIn this example, we use the `pipe` function to create a new generator that takes the first three values generated by\nthe `range` generator.\n\nWe create a new generator `gen` that is the result of applying the `pipe` function to the `range` generator.\n\nWe use a `for...of` loop to iterate over the values generated by the `gen` generator and log them to the console.\n\nThe output of the code should be `1, 2, 3`.\n\nIn summary, the `take` function is a useful tool for limiting the number of values generated by a generator. By using\nit in combination with other functions from tightrope, we can create powerful and flexible pipelines that help us\nwrite more efficient and focused code.\n\n## Use Cases\n\nHere are some common use cases for the `take` function:\n\n1. Limiting the size of data: You may need to limit the size of a dataset to improve performance or prevent memory\n   issues. The `take` function can be used to limit the number of items processed at any one time.\n2. Extracting a subset of data: If you are working with a large dataset, you may need to extract a subset of the data\n   that meets certain criteria. The `take` function can be used to extract the first n items that meet your\n   criteria.\n3. Creating a sample: If you are working with a large dataset and want to create a smaller sample for testing or\n   exploration, the `take` function can be used to extract a random or fixed number of items from the dataset.\n\nOverall, the `take` function is a versatile tool that can be used in a variety of contexts to limit the size of data\nor extract subsets of data from a larger dataset.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator"]
      }
    ],
    "Effect": [
      {
        "filePath": "fn/tap",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "tap",
        "namespacedName": "Fn.tap",
        "slug": "fn/tap",
        "title": "Fn.tap",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Effect"]
      },
      {
        "filePath": "result/tap",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "tap",
        "namespacedName": "R.tap",
        "slug": "result/tap",
        "title": "Result.tap",
        "@description": "Execute a side effect on the value of an `Ok` or skip if an `Err`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Effect"]
      }
    ],
    "Errors": [
      {
        "filePath": "fn/throws-any-error",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "throwsAnyError",
        "namespacedName": "Fn.throwsAnyError",
        "slug": "fn/throws-any-error",
        "title": "Fn.throwsAnyError",
        "@description": "Asserts that a value is a `Function` which throws when invoked.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Functions", "Guard"]
      },
      {
        "filePath": "fn/throws-error-of-type",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "throwsErrorOfType",
        "namespacedName": "Fn.throwsErrorOfType",
        "slug": "fn/throws-error-of-type",
        "title": "Fn.throwsErrorOfType",
        "@description": "Asserts that a value is a `Function` which throws an `Error` of the given type.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Functions", "Guard"]
      },
      {
        "filePath": "option/is-none",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "isNone",
        "namespacedName": "O.isNone",
        "slug": "option/is-none",
        "title": "Option.isNone",
        "@description": "Returns true if the given value is a `None` instance, false otherwise.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Guard", "Option"]
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "None",
        "namespacedName": "O.None",
        "slug": "option/none",
        "title": "Option.None",
        "@description": "Represent an absence of value in the `Option` type.\n\n## Example\n\nYou can check if a value is a `None` instance by using the `isNone` function.\n\n```ts\nimport { isNone } from 'tightrope/option/is-none';\n\nconsole.log(isNone(none)); // true\nconsole.log(isNone('foo')); // false\nconsole.log(isNone(null)); // false\n```\n\n`None` instances are usually returned from functions that might not return a value, and are combined with `Some`\ninstances using the `Option` type.\n\n## Use Cases\n\nReferencing the `None` instance is useful when you want to represent an absence of value in your program without\nhaving to go through a pipeline or helper method that might not always be available or suitable for your specific use\ncase.\n\nFor example, if you're writing a custom value handler for your application and you need to represent a specific\nabsence of value condition, you can reference the `None` instance. This can give you more control over the specific\nvalue absences that your application can encounter and how they are handled.\n\nAnother use case for referencing the `None` instance is when you are writing tests for your application and you want\nto simulate a value absence condition. By referencing the `None` instance, you can test how your application handles\nthat value absence condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Errors", "Option", "Wrap"]
      },
      {
        "filePath": "option/or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "orElse",
        "namespacedName": "O.orElse",
        "slug": "option/or-else",
        "title": "Option.orElse",
        "@description": "Transforms `Some(v)` to `Some(v)`, and `None` to a new `Option` using the provided function.\n\nThe `orElse` function takes a function `orElseFn` and an `Option` object as its arguments. If the input `Option`\nobject is a `Some`, it returns the same `Some` object. If the input `Option` object is a `None`, it calls the\nprovided `orElseFn` function and returns the resulting `Option`.\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { Option } from 'tightrope/option';\nimport { none } from 'tightrope/option';\nimport { Some } from 'tightrope/option';\nimport { orElse } from 'tightrope/option/or-else';\n\nconst defaultOption = () => Some.create(42);\n\nconst option1 = pipe(Some.create(5), orElse(defaultOption));\n// Output: Some(5)\n\nconst option2 = pipe(none, orElse(defaultOption));\n// Output: Some(42)\n```\n\n## Use Cases\n\nThe `orElse` function is useful when you want to provide a fallback `Option` object in case the input `Option` is a\n`None`. It allows you to handle both cases of `Some` and `None` in a more flexible way.\n\nSome use cases of `orElse` include:\n\n- Providing a default value for cases when a value is not found in a collection or when an operation fails.\n- Mapping over a collection and returning the first element that meets a specific criteria. If no element is found,\n  returning a default `Option`.\n- Handling errors in a way that gracefully falls back to a default value, such as when making API calls and the server\n  returns an error response.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "or",
        "namespacedName": "O.or",
        "slug": "option/or",
        "title": "Option.or",
        "@description": "Like the `||` operator, but applied to `Option` types.\n\n| Scenario         | Pseudocode               | Outcome                   |\n| :--------------- | :----------------------- | ------------------------- |\n| `Some OR None`   | `pipe(Some, or(None))`   | `Some`                    |\n| `None OR Some`   | `pipe(None, or(Some))`   | `Some`                    |\n| `None1 OR None2` | `pipe(None1, or(None2))` | `None2`                   |\n| `Some1 OR Some2` | `pipe(Some1, or(Some2))` | `Some1` (first Some wins) |",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/unwrap-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOrElse",
        "namespacedName": "O.unwrapOrElse",
        "slug": "option/unwrap-or-else",
        "title": "Option.unwrapOrElse",
        "@description": "Extract value from a `Some` or from a fallback `() => value` if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/unwrap-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOr",
        "namespacedName": "O.unwrapOr",
        "slug": "option/unwrap-or",
        "title": "Option.unwrapOr",
        "@description": "Extract value from a `Some` or use a fallback value if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/expect-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "expectErr",
        "namespacedName": "R.expectErr",
        "slug": "result/expect-err",
        "title": "Result.expectErr",
        "@description": "Unwrap an expected `Err` value from a `Result`, or throw if it is an `Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect_err"
        ],
        "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/is-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "isErr",
        "namespacedName": "R.isErr",
        "slug": "result/is-err",
        "title": "Result.isErr",
        "@description": "Check if value is an instance of the `Err` class.\n\nThis can be used to handle error cases in a program flow that uses the `Result` type.\n\nFor example, it can be used to check if the result of a function that returns a `Result` is an `Err` or an `Ok`, and\ntake different actions depending on the outcome.\n\nIt can also be used for validation or error checking, to make sure that the value passed to a function or module is\nof the expected type.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.is_err"
        ],
        "@tags": ["Errors", "Guard", "Result"]
      },
      {
        "filePath": "result/map-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapErr",
        "namespacedName": "R.mapErr",
        "slug": "result/map-err",
        "title": "Result.mapErr",
        "@description": "Transform the value inside the `Err` variant of a `Result`.\n\nIf the input `Result` is an `Err`, the function applies `mapFn` to the error value and returns a new `Result` object\nwith the transformed error value. If the input `Result` is an `Ok`, it simply returns the input `Result` object\nunmodified.\n\nThis function is similar to `map`, but instead of transforming the `Ok` value, it transforms the `Err` value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.map_err"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Value"
        ]
      },
      {
        "filePath": "result/or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "orElse",
        "namespacedName": "R.orElse",
        "slug": "result/or-else",
        "title": "Result.orElse",
        "@description": "Like the `||` operator, but applied to `Result` types with an `() => Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "or",
        "namespacedName": "R.or",
        "slug": "result/or",
        "title": "Result.or",
        "@description": "Like the `||` operator, but applied to `Result` types.\n\n| Scenario       | Pseudocode             | Outcome               |\n| :------------- | :--------------------- | --------------------- |\n| `Ok OR Err`    | `pipe(Ok, or(Err))`    | `Ok`                  |\n| `Err OR Ok`    | `pipe(Err, or(Ok))`    | `Ok`                  |\n| `Err1 OR Err2` | `pipe(Err1, or(Err2))` | `Err2`                |\n| `Ok1 OR Ok2`   | `pipe(Ok1, or(Ok2))`   | `Ok1` (first Ok wins) |",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Err",
        "namespacedName": "R.Err",
        "slug": "result/err",
        "title": "Result.Err",
        "@description": "Represent an erroneous value in the `Result` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Err } from 'tightrope/result';\n\nconst error = new Err(new Error('Something went wrong.'));\n```\n\nYou can check if a value is an `Err` instance by using the `isErr` function.\n\n```ts\nimport { isErr } from 'tightrope/result/is-err';\n\nconst error = new Err(new Error('Something went wrong.'));\nconsole.log(isErr(error)); // true\nconsole.log(isErr('foo')); // false\nconsole.log(isErr(new Error('not the same thing'))); // false\n```\n\n`Err` instances are usually returned from functions that can fail or encounter an error, and are combined with `Ok`\ninstances using the `Result` type.\n\n## Use Cases\n\nCreating an `Err` instance directly is useful when you want to represent an error in your program without having to\ngo through a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an `Err` instance directly with the error message or code you want to use. This can give\nyou more control over the specific errors that your application can encounter and how they are handled.\n\nAnother use case for creating an `Err` instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an `Err` instance directly with a specific error message or code,\nyou can test how your application handles that error condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Errors", "Result", "Wrap"]
      },
      {
        "filePath": "result/unwrap-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapErr",
        "namespacedName": "R.unwrapErr",
        "slug": "result/unwrap-err",
        "title": "Result.unwrapErr",
        "@description": "Extract value from an `Err` or throw on an `Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_err"
        ],
        "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/unwrap-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOrElse",
        "namespacedName": "R.unwrapOrElse",
        "slug": "result/unwrap-or-else",
        "title": "Result.unwrapOrElse",
        "@description": "Extract value from an `Ok` or from a fallback `() => Ok` if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/unwrap-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOr",
        "namespacedName": "R.unwrapOr",
        "slug": "result/unwrap-or",
        "title": "Result.unwrapOr",
        "@description": "Extract value from an `Ok` or use a fallback value if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Recover",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      }
    ],
    "Data Source": [
      {
        "filePath": "gen/range",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "range",
        "namespacedName": "Gen.range",
        "slug": "gen/range",
        "title": "Gen.range",
        "@description": "Create a generator which will `yield` a sequence of numbers.\n\nThe `range` generator works by starting with the `floor` value and then yielding each subsequent integer value until\nthe `ceiling` value is reached. The generator continues to yield values until it is exhausted, and can be used to\ngenerate any range of integers, including negative ranges and ranges with non-integer steps.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Data Source", "Generator"]
      }
    ],
    "Transform Value": [
      {
        "filePath": "gen/reduce-each",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "reduceEach",
        "namespacedName": "Gen.reduceEach",
        "slug": "gen/reduce-each",
        "title": "Gen.reduceEach",
        "@description": "Reduce and `yield` each value produced by a generator.\n\nA higher-order function that takes a `reducer` function as its argument and returns a new function that can be used\nto reduce the values generated by a generator.\n\nThe returned function takes a generator as its argument and returns a new generator that yields the partial results\nof the reduction operation. It works by applying the `reducer` function to each pair of values generated by the input\ngenerator, and yielding the partial results of the reduction operation.\n\nThe `reducer` function takes two arguments: an `accumulator` value that represents the current state of the reduction\noperation, and a `value` generated by the input generator. The reducer function applies some operation to the\naccumulator value and the input value, and returns a new accumulator value that represents the updated state of the\nreduction operation.\n\nIn summary, `reduceEach` is a powerful tool for working with generators in JavaScript and TypeScript. It can be used\nto perform complex reduction operations on large or complex data sets, and can help us write more efficient and\nfocused code.\n\n## Example\n\nIn this example, we use the `range` function to generate a sequence of numbers from `1` to `10`, the `map` function\nto double each value in the sequence, and the `take` function to select the first `5` values in the sequence.\nFinally, we apply the `reduceEach` function with the `sum` function as its argument to generate the partial sums of\nthe remaining values in the sequence.\n\nWe then use a `for...of` loop to iterate over the partial sums generated by the `partialSums` generator, and log them\nto the console.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { map } from 'tightrope/gen/map';\nimport { range } from 'tightrope/gen/range';\nimport { reduceEach } from 'tightrope/gen/reduce-each';\nimport { take } from 'tightrope/gen/take';\nimport { multiply } from 'tightrope/number/multiply';\n\nfunction sum(acc: number, curr: number): number {\n  return acc + curr;\n}\n\nconst partialSums = pipe(range(1, 10), map(multiply(2)), take(5), reduceEach(sum));\n\nfor (const value of partialSums) {\n  console.log(value);\n  //  6\n  // 12\n  // 20\n  // 30\n}\n```\n\n## Use Cases\n\nCommon use cases for `reduceEach`:\n\n1. **Summing values**: calculate the sum of a series of numbers generated by a generator.\n2. **Counting values**: count the number of values generated by a generator that satisfy a given condition.\n3. **Finding minimum or maximum values**: find the minimum or maximum value generated by a generator.\n4. **Concatenating strings**: concatenate a series of strings generated by a generator.\n5. **Grouping values**: group a series of values generated by a generator into a nested structure, such as an object or\n   an array.\n6. **Filtering values**: filter the values generated by a generator based on a given condition.\n7. **Computing averages**: compute the average of a series of numbers generated by a generator.\n8. **Building up an object**: build up an object by accumulating properties and values generated by a generator.\n\nIn general, `reduceEach` can be used in any situation where we need to perform some kind of reduction operation on a\nseries of values generated by a generator. Its flexibility and power make it a versatile tool for working with\ngenerators in JavaScript and TypeScript.\n\n## `reduce` or `reduceEach`?\n\n`reduce` and `reduceEach` are very similar functions, and it can be difficult to decide which one to use in a given\nsituation. Here are some guidelines to help you decide:\n\n1. Use `reduce` if you want to perform a reduction operation on the entire sequence of values generated by a generator,\n   and you only need to return a single value.\n2. Use `reduceEach` if you want to perform a reduction operation on each individual value generated by a generator, and\n   you need to return a sequence of partial results.\n\nIn general, the choice between `reduce` and `reduceEach` will depend on the specific requirements of your problem, as\nwell as the nature of the data you are working with.\n\n- If you need to perform a simple reduction operation on a single sequence of values, `reduce` may be the better\n  choice.\n- If you need to perform a more complex reduction operation that involves multiple sequences of values, or if you need\n  to return a sequence of partial results, `reduceEach` may be the better choice.",
        "@param": [],
        "@returns": "",
        "@see": ["https://jamiemason.github.io/tightrope/api/gen/reduce"],
        "@tags": ["Generator", "Transform", "Transform Value"]
      },
      {
        "filePath": "gen/reduce",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "reduce",
        "namespacedName": "Gen.reduce",
        "slug": "gen/reduce",
        "title": "Gen.reduce",
        "@description": "Reduce every value produced by a generator and `yield` the final result.\n\nA higher-order function that takes a reducer function as its argument and returns a new function that can be used to\nreduce the values generated by a generator to a single value.\n\nThe returned function takes a generator as its argument and returns a new generator that yields the final result of\nthe reduction operation.\n\nThe `reduce` function works by using the `reduceEach` function to generate a sequence of partial results for the\nreduction operation, and then returning the final result of the reduction operation.\n\nThe `reducer` function takes two arguments: an `accumulator` value that represents the current state of the reduction\noperation, and a `value` generated by the input generator. The reducer function applies some operation to the\naccumulator value and the input value, and returns a new accumulator value that represents the updated state of the\nreduction operation.\n\nIf an initial value is provided, it will be used as the initial state of the reduction operation. If no initial value\nis provided, the first value generated by the input generator will be used as the initial state.\n\n## Example\n\nIn this example, we use the pipe function to create a pipeline of functions that generate a series of numbers, double\neach number using `multiply(2)`, and then calculate the sum of the resulting values.\n\n1. We define a `sum` function that takes two numbers as input and returns their sum.\n2. We use the `range` function to generate a series of numbers from `1` to `10`.\n3. We use the `map` function with `multiply(2)` to double each number in the series.\n4. We use the `reduce` function to calculate the sum of the resulting values.\n5. We use a `for...of` loop to iterate over the values generated by `doubledSum`, which will be one value, the final\n   total, which should be `110`.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { map } from 'tightrope/gen/map';\nimport { range } from 'tightrope/gen/range';\nimport { reduce } from 'tightrope/gen/reduce';\nimport { multiply } from 'tightrope/number/multiply';\n\nfunction sum(acc: number, curr: number): number {\n  return acc + curr;\n}\n\nconst doubledSum = pipe(range(1, 10), map(multiply(2)), reduce(sum));\n\nfor (const value of doubledSum) {\n  console.log(value); // 110\n}\n```\n\n## `reduce` or `reduceEach`?\n\n`reduce` and `reduceEach` are very similar functions, and it can be difficult to decide which one to use in a given\nsituation. Here are some guidelines to help you decide:\n\n1. Use `reduce` if you want to perform a reduction operation on the entire sequence of values generated by a generator,\n   and you only need to return a single value.\n2. Use `reduceEach` if you want to perform a reduction operation on each individual value generated by a generator, and\n   you need to return a sequence of partial results.\n\nIn general, the choice between `reduce` and `reduceEach` will depend on the specific requirements of your problem, as\nwell as the nature of the data you are working with.\n\n- If you need to perform a simple reduction operation on a single sequence of values, `reduce` may be the better\n  choice.\n- If you need to perform a more complex reduction operation that involves multiple sequences of values, or if you need\n  to return a sequence of partial results, `reduceEach` may be the better choice.",
        "@param": [],
        "@returns": "",
        "@see": ["https://jamiemason.github.io/tightrope/api/gen/reduce-each"],
        "@tags": ["Generator", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/clamp",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "clamp",
        "namespacedName": "N.clamp",
        "slug": "number/clamp",
        "title": "Number.clamp",
        "@description": "Returns a number within the specified range, if the original value is not already within that range.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/divide",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "divide",
        "namespacedName": "N.divide",
        "slug": "number/divide",
        "title": "Number.divide",
        "@description": "Divide one number by another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/multiply",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "multiply",
        "namespacedName": "N.multiply",
        "slug": "number/multiply",
        "title": "Number.multiply",
        "@description": "Multiply two numbers",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/square",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "square",
        "namespacedName": "N.square",
        "slug": "number/square",
        "title": "Number.square",
        "@description": "Multiply a number by itself",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/subtract",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "subtract",
        "namespacedName": "N.subtract",
        "slug": "number/subtract",
        "title": "Number.subtract",
        "@description": "Subtract one number from another",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/sum",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "sum",
        "namespacedName": "N.sum",
        "slug": "number/sum",
        "title": "Number.sum",
        "@description": "Return the sum of two numbers",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "option/map",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "map",
        "namespacedName": "O.map",
        "slug": "option/map",
        "title": "Option.map",
        "@description": "Transforms `Option<T>` to `Option<U>` by applying the provided function to the contained value of `Some` and leaving\n`None` values unchanged.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Transform", "Transform Value"]
      },
      {
        "filePath": "result/map-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapErr",
        "namespacedName": "R.mapErr",
        "slug": "result/map-err",
        "title": "Result.mapErr",
        "@description": "Transform the value inside the `Err` variant of a `Result`.\n\nIf the input `Result` is an `Err`, the function applies `mapFn` to the error value and returns a new `Result` object\nwith the transformed error value. If the input `Result` is an `Ok`, it simply returns the input `Result` object\nunmodified.\n\nThis function is similar to `map`, but instead of transforming the `Ok` value, it transforms the `Err` value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.map_err"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Value"
        ]
      },
      {
        "filePath": "result/map",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "map",
        "namespacedName": "R.map",
        "slug": "result/map",
        "title": "Result.map",
        "@description": "Transform the value inside the `Ok` variant of a `Result`.\n\nIt takes a `mapFn` function as its argument, which takes the current `Ok` value and returns a new value. The `map`\nfunction then returns a new `Result` object containing the transformed value. If the original `Result` object was an\n`Err`, `map` will return the original `Err` without calling the `mapFn` function.\n\nIn other words, `map` allows you to transform the contents of an `Ok` variant of a `Result` object, while leaving an\n`Err` variant unchanged. It's useful when you need to apply a function to a value inside a `Result` object without\nchanging the structure of the `Result` object itself.\n\n## Example\n\nIn this example, `map` is used twice in the `pipe` function to transform the value inside the `Ok` variant of the\n`Result` object. The final `Result` object contains the result of applying both functions to the original value.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { multiply } from 'tightrope/number/multiply';\nimport { sum } from 'tightrope/number/sum';\nimport { Ok } from 'tightrope/result';\nimport { map } from 'tightrope/result/map';\nimport { unwrap } from 'tightrope/result/unwrap';\n\nconst value: number = pipe(Ok.create(2), map(sum(5)), map(multiply(2)), unwrap);\n\nconsole.log(value); // Output: 14\n```\n\n:::tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\nWhen your function returns a value, you can use `map` to transform the value inside an `Ok` variant.\n\n:::\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`map` runs on the `Ok` variant. If any of the operations return an `Err` object then `map` will skip and return the\n`Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.map"
        ],
        "@tags": ["Result", "Right Biased", "Transform", "Transform Value"]
      }
    ],
    "Transformer": [
      {
        "filePath": "gen/split",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "split",
        "namespacedName": "Gen.split",
        "slug": "gen/split",
        "title": "Gen.split",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator", "Transformer"]
      }
    ],
    "Truthiness": [
      {
        "filePath": "guard/is-nil",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isNil",
        "namespacedName": "Guard.isNil",
        "slug": "guard/is-nil",
        "title": "Guard.isNil",
        "@description": "Asserts that a value is `null` or `undefined`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "guard/is-truthy",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isTruthy",
        "namespacedName": "Guard.isTruthy",
        "slug": "guard/is-truthy",
        "title": "Guard.isTruthy",
        "@description": "Asserts that a value is not falsy.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "guard/is-undefined",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isUndefined",
        "namespacedName": "Guard.isUndefined",
        "slug": "guard/is-undefined",
        "title": "Guard.isUndefined",
        "@description": "Asserts that a value is `undefined`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "object/is-null",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isNull",
        "namespacedName": "Obj.isNull",
        "slug": "object/is-null",
        "title": "Object.isNull",
        "@description": "Asserts that a value is `null`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "string/is-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isEmptyString",
        "namespacedName": "S.isEmptyString",
        "slug": "string/is-empty-string",
        "title": "String.isEmptyString",
        "@description": "Asserts that a value is a valid `String` containing no characters.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Emptiness",
          "Guard",
          "String Length",
          "Strings",
          "Truthiness"
        ]
      },
      {
        "filePath": "string/is-non-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isNonEmptyString",
        "namespacedName": "S.isNonEmptyString",
        "slug": "string/is-non-empty-string",
        "title": "String.isNonEmptyString",
        "@description": "Asserts that a value is a valid `String` containing at least one character.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Strings", "Truthiness"]
      }
    ],
    "Primitives": [
      {
        "filePath": "guard/is-primitive",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isPrimitive",
        "namespacedName": "Guard.isPrimitive",
        "slug": "guard/is-primitive",
        "title": "Guard.isPrimitive",
        "@description": "Return true if value is `null`, `undefined`, `number`, `string`, or `boolean`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Primitives"]
      }
    ],
    "Regexp": [
      {
        "filePath": "guard/is-reg-exp",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isRegExp",
        "namespacedName": "Guard.isRegExp",
        "slug": "guard/is-reg-exp",
        "title": "Guard.isRegExp",
        "@description": "Asserts that a value is a `RegExp`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Regexp"]
      }
    ],
    "Option": [
      {
        "filePath": "option/and-then",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "andThen",
        "namespacedName": "O.andThen",
        "slug": "option/and-then",
        "title": "Option.andThen",
        "@description": "Applies a mapping function to the value of an `Option`, returning a new `Option`. If the input `Option` is `None`,\nthe function immediately returns `None` without calling the mapping function.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/and",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "and",
        "namespacedName": "O.and",
        "slug": "option/and",
        "title": "Option.and",
        "@description": "Combines two `Option`s, returning the second `Option` if both are `Some`, and `None` otherwise.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/expect",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "expect",
        "namespacedName": "O.expect",
        "slug": "option/expect",
        "title": "Option.expect",
        "@description": "Unwraps an `Option` value, returning the underlying value if it is `Some`. If the value is `None`, this function\npanics with the provided error message.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "option/filter",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "filter",
        "namespacedName": "O.filter",
        "slug": "option/filter",
        "title": "Option.filter",
        "@description": "Calls the provided predicate function on the contained value I if the `Option` is `Some(I)`, and returns `Some(I)` if\nthe function returns `true`; otherwise, returns `None`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Filter", "Option", "Right Biased"]
      },
      {
        "filePath": "option/flatten",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "flatten",
        "namespacedName": "O.flatten",
        "slug": "option/flatten",
        "title": "Option.flatten",
        "@description": "Removes one level of nesting from an `Option<Option<T>>`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/from-guard",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "fromGuard",
        "namespacedName": "O.fromGuard",
        "slug": "option/from-guard",
        "title": "Option.fromGuard",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Option", "Wrap"]
      },
      {
        "filePath": "option/is-none",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "isNone",
        "namespacedName": "O.isNone",
        "slug": "option/is-none",
        "title": "Option.isNone",
        "@description": "Returns true if the given value is a `None` instance, false otherwise.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Guard", "Option"]
      },
      {
        "filePath": "option/is-some",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "isSome",
        "namespacedName": "O.isSome",
        "slug": "option/is-some",
        "title": "Option.isSome",
        "@description": "Determine whether a value is an instance of `Some`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Option"]
      },
      {
        "filePath": "option/map-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOrElse",
        "namespacedName": "O.mapOrElse",
        "slug": "option/map-or-else",
        "title": "Option.mapOrElse",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the result of evaluating the provided\nfallback function if the `Option` is `None`",
        "@param": [
          {
            "name": "mapFn",
            "description": "The function to apply to the contained value of `Some`."
          },
          {
            "name": "defaultFn",
            "description": "The fallback function to evaluate if the `Option` is `None`."
          },
          {
            "name": "opt",
            "description": "The `Option` to apply the provided function to."
          }
        ],
        "@returns": "The result of applying the provided function to the contained value of `Some`, or the result of evaluating\n  the fallback function if the `Option` is `None`.",
        "@see": [],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/map-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOr",
        "namespacedName": "O.mapOr",
        "slug": "option/map-or",
        "title": "Option.mapOr",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the provided default value if the `Option`\nis `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Option",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/map",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "map",
        "namespacedName": "O.map",
        "slug": "option/map",
        "title": "Option.map",
        "@description": "Transforms `Option<T>` to `Option<U>` by applying the provided function to the contained value of `Some` and leaving\n`None` values unchanged.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Transform", "Transform Value"]
      },
      {
        "filePath": "option/match",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "match",
        "namespacedName": "O.match",
        "slug": "option/match",
        "title": "Option.match",
        "@description": "Extract value from both a `Some` or a `None`.\n\nThe match function takes an object containing two functions: `Some` and `None`, which are used to handle the values\nof the `Some` and `None` variants of an `Option` object. It then returns a new function that takes an `Option` object\nand returns the result of applying either the `Some` or `None` function to the value inside the `Option`, depending\non which variant it contains.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Unwrap"]
      },
      {
        "filePath": "option/ok-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "okOrElse",
        "namespacedName": "O.okOrElse",
        "slug": "option/ok-or-else",
        "title": "Option.okOrElse",
        "@description": "Transforms an `Option` to a `Result`. A `Some(v)` becomes `Ok(v)` and `None` becomes `Err` using the provided\nfunction.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else"
        ],
        "@tags": ["Option", "Result", "Transform"]
      },
      {
        "filePath": "option/ok-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "okOr",
        "namespacedName": "O.okOr",
        "slug": "option/ok-or",
        "title": "Option.okOr",
        "@description": "Transforms `Some(v)` to `Ok(v)`, and `None` to a value of `Err` using the provided default error value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or"
        ],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "Option",
        "namespacedName": "O.Option",
        "slug": "option/option",
        "title": "Option.Option",
        "@description": "`Option` is a type that represents either a value (`Some`) or the absence of a value (`None`).\n\n`Option<T>` is the type used for expressing the possibility of the absence of a value. It is an enum with the\nvariants, `Some(T)`, representing the presence of a value, and `None`, representing the absence of a value.\n\n:::info\n\n`Option` allows you to construct a pipeline of commands that handle both the `Some` and `None` variants. This is\nuseful for handling cases where a value might be missing or undefined, and branching based on whether the previous\noperation returned a value or not.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `Option` is sometimes referred to as `Maybe`.\n- `Some` is sometimes referred to as `Just` or \"the value path\".\n- `None` is sometimes referred to as `Nothing` or \"the empty path\".\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Type"]
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "Some",
        "namespacedName": "O.Some",
        "slug": "option/some",
        "title": "Option.Some",
        "@description": "Represent a value in the `Option` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Some } from 'tightrope/option';\n\nconst value = Some.create('Hello, world!');\n```\n\nYou can check if a value is a `Some` instance by using the `isSome` function.\n\n```ts\nimport { isSome } from 'tightrope/option/is-some';\n\nconst value = Some.create('Hello, world!');\nconsole.log(isSome(value)); // true\nconsole.log(isSome('foo')); // false\nconsole.log(isSome('Hello, world! but this is not inside a Some')); // false\n```\n\n`Some` instances are usually returned from functions that might not return a value, and are combined with `None`\ninstances using the `Option` type.\n\n## Use Cases\n\nCreating a `Some` instance directly is useful when you want to represent a value in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom value handler for your application and you need to represent a specific value\ncondition, you can create a `Some` instance directly with the value you want to use. This can give you more control\nover the specific values that your application can encounter and how they are handled.\n\nAnother use case for creating a `Some` instance directly is when you are writing tests for your application and you\nwant to simulate a value condition. By creating a `Some` instance directly with a specific value, you can test how\nyour application handles that value condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Option", "Wrap"]
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "None",
        "namespacedName": "O.None",
        "slug": "option/none",
        "title": "Option.None",
        "@description": "Represent an absence of value in the `Option` type.\n\n## Example\n\nYou can check if a value is a `None` instance by using the `isNone` function.\n\n```ts\nimport { isNone } from 'tightrope/option/is-none';\n\nconsole.log(isNone(none)); // true\nconsole.log(isNone('foo')); // false\nconsole.log(isNone(null)); // false\n```\n\n`None` instances are usually returned from functions that might not return a value, and are combined with `Some`\ninstances using the `Option` type.\n\n## Use Cases\n\nReferencing the `None` instance is useful when you want to represent an absence of value in your program without\nhaving to go through a pipeline or helper method that might not always be available or suitable for your specific use\ncase.\n\nFor example, if you're writing a custom value handler for your application and you need to represent a specific\nabsence of value condition, you can reference the `None` instance. This can give you more control over the specific\nvalue absences that your application can encounter and how they are handled.\n\nAnother use case for referencing the `None` instance is when you are writing tests for your application and you want\nto simulate a value absence condition. By referencing the `None` instance, you can test how your application handles\nthat value absence condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Errors", "Option", "Wrap"]
      },
      {
        "filePath": "option/or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "orElse",
        "namespacedName": "O.orElse",
        "slug": "option/or-else",
        "title": "Option.orElse",
        "@description": "Transforms `Some(v)` to `Some(v)`, and `None` to a new `Option` using the provided function.\n\nThe `orElse` function takes a function `orElseFn` and an `Option` object as its arguments. If the input `Option`\nobject is a `Some`, it returns the same `Some` object. If the input `Option` object is a `None`, it calls the\nprovided `orElseFn` function and returns the resulting `Option`.\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { Option } from 'tightrope/option';\nimport { none } from 'tightrope/option';\nimport { Some } from 'tightrope/option';\nimport { orElse } from 'tightrope/option/or-else';\n\nconst defaultOption = () => Some.create(42);\n\nconst option1 = pipe(Some.create(5), orElse(defaultOption));\n// Output: Some(5)\n\nconst option2 = pipe(none, orElse(defaultOption));\n// Output: Some(42)\n```\n\n## Use Cases\n\nThe `orElse` function is useful when you want to provide a fallback `Option` object in case the input `Option` is a\n`None`. It allows you to handle both cases of `Some` and `None` in a more flexible way.\n\nSome use cases of `orElse` include:\n\n- Providing a default value for cases when a value is not found in a collection or when an operation fails.\n- Mapping over a collection and returning the first element that meets a specific criteria. If no element is found,\n  returning a default `Option`.\n- Handling errors in a way that gracefully falls back to a default value, such as when making API calls and the server\n  returns an error response.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "or",
        "namespacedName": "O.or",
        "slug": "option/or",
        "title": "Option.or",
        "@description": "Like the `||` operator, but applied to `Option` types.\n\n| Scenario         | Pseudocode               | Outcome                   |\n| :--------------- | :----------------------- | ------------------------- |\n| `Some OR None`   | `pipe(Some, or(None))`   | `Some`                    |\n| `None OR Some`   | `pipe(None, or(Some))`   | `Some`                    |\n| `None1 OR None2` | `pipe(None1, or(None2))` | `None2`                   |\n| `Some1 OR Some2` | `pipe(Some1, or(Some2))` | `Some1` (first Some wins) |",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/unwrap-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOr",
        "namespacedName": "O.unwrapOr",
        "slug": "option/unwrap-or",
        "title": "Option.unwrapOr",
        "@description": "Extract value from a `Some` or use a fallback value if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/unwrap",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrap",
        "namespacedName": "O.unwrap",
        "slug": "option/unwrap",
        "title": "Option.unwrap",
        "@description": "Extract value from a `Some` or throw on a `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/ok",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "ok",
        "namespacedName": "R.ok",
        "slug": "result/ok",
        "title": "Result.ok",
        "@description": "Transforms `Result<T, E>` into `Option<T>`, mapping `Ok(v)` to `Some(v)` and `Err(e)` to `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Result", "Transform", "Transform Result"]
      }
    ],
    "Right Biased": [
      {
        "filePath": "option/and-then",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "andThen",
        "namespacedName": "O.andThen",
        "slug": "option/and-then",
        "title": "Option.andThen",
        "@description": "Applies a mapping function to the value of an `Option`, returning a new `Option`. If the input `Option` is `None`,\nthe function immediately returns `None` without calling the mapping function.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/expect",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "expect",
        "namespacedName": "O.expect",
        "slug": "option/expect",
        "title": "Option.expect",
        "@description": "Unwraps an `Option` value, returning the underlying value if it is `Some`. If the value is `None`, this function\npanics with the provided error message.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "option/filter",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "filter",
        "namespacedName": "O.filter",
        "slug": "option/filter",
        "title": "Option.filter",
        "@description": "Calls the provided predicate function on the contained value I if the `Option` is `Some(I)`, and returns `Some(I)` if\nthe function returns `true`; otherwise, returns `None`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Filter", "Option", "Right Biased"]
      },
      {
        "filePath": "option/map-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOrElse",
        "namespacedName": "O.mapOrElse",
        "slug": "option/map-or-else",
        "title": "Option.mapOrElse",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the result of evaluating the provided\nfallback function if the `Option` is `None`",
        "@param": [
          {
            "name": "mapFn",
            "description": "The function to apply to the contained value of `Some`."
          },
          {
            "name": "defaultFn",
            "description": "The fallback function to evaluate if the `Option` is `None`."
          },
          {
            "name": "opt",
            "description": "The `Option` to apply the provided function to."
          }
        ],
        "@returns": "The result of applying the provided function to the contained value of `Some`, or the result of evaluating\n  the fallback function if the `Option` is `None`.",
        "@see": [],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/map-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOr",
        "namespacedName": "O.mapOr",
        "slug": "option/map-or",
        "title": "Option.mapOr",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the provided default value if the `Option`\nis `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Option",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/map",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "map",
        "namespacedName": "O.map",
        "slug": "option/map",
        "title": "Option.map",
        "@description": "Transforms `Option<T>` to `Option<U>` by applying the provided function to the contained value of `Some` and leaving\n`None` values unchanged.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Transform", "Transform Value"]
      },
      {
        "filePath": "option/ok-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "okOr",
        "namespacedName": "O.okOr",
        "slug": "option/ok-or",
        "title": "Option.okOr",
        "@description": "Transforms `Some(v)` to `Ok(v)`, and `None` to a value of `Err` using the provided default error value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or"
        ],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/unwrap",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrap",
        "namespacedName": "O.unwrap",
        "slug": "option/unwrap",
        "title": "Option.unwrap",
        "@description": "Extract value from a `Some` or throw on a `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/and-then",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "andThen",
        "namespacedName": "R.andThen",
        "slug": "result/and-then",
        "title": "Result.andThen",
        "@description": "Same as `flatMap` or `chain`, transform a `Result` with the value of another.\n\nWhen your function returns a `Result` object, you can use `andThen` to transform the `Ok` variant itself.\n\n::: tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\n:::\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport type { Result } from 'tightrope/result';\nimport { Err, Ok } from 'tightrope/result';\nimport { andThen } from 'tightrope/result/and-then';\nimport { map } from 'tightrope/result/map';\nimport { multiply } from 'tightrope/number/multiply';\nimport { unwrapOr } from 'tightrope/result/unwrap-or';\n\nfunction divide(x: number, y: number): Result<number, Error> {\n  if (y === 0) {\n    return new Err(new Error('Division by zero'));\n  }\n  return new Ok(x / y);\n}\n\nconst amount = pipe(\n  Ok.create<number, Error>(16),\n  andThen((n) => divide(n, 2)),\n  andThen((n) => divide(n, 4)),\n  map(multiply(100)),\n  unwrapOr(0),\n);\n\nconsole.log(amount); // 200\n```\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`andThen` runs on the `Ok` variant. If any of the operations return an `Err` object then `andThen` will skip and\nreturn the `Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `andThen` is sometimes referred to as `chain` or `flatMap`.\n- `Result` is sometimes referred to as `Either`.\n- `Ok` is sometimes referred to as `Right` or \"the happy path\".\n- `Err` is sometimes referred to as `Left` or \"the sad path\".\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.and_then"
        ],
        "@tags": ["Result", "Right Biased", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/expect",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "expect",
        "namespacedName": "R.expect",
        "slug": "result/expect",
        "title": "Result.expect",
        "@description": "Extract value from an `Ok` or throw with the given message on an `Err`.\n\nUse `expect` to unwrap a `Result` when you are \"certain\" that the `Result` value will be an `Ok`, and you want to\nextract the value contained in it.\n\nIf the `Result` value ever turns out to be an `Err`, it will throw an `Error` with the given message.\n\n:::warning\n\n`expect` will throw if the `Result` is an `Err`.\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect"
        ],
        "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/filter",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "filter",
        "namespacedName": "R.filter",
        "slug": "result/filter",
        "title": "Result.filter",
        "@description": "Keep an `Ok` if its value passes the guard function, or return an `Err`\ncontaining the result of `getErrValue()`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Result", "Right Biased"]
      },
      {
        "filePath": "result/map-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOrElse",
        "namespacedName": "R.mapOrElse",
        "slug": "result/map-or-else",
        "title": "Result.mapOrElse",
        "@description": "Maps a `Result` by applying fallback function default to a contained `Err` value, or a function to a contained `Ok`\nvalue.\n\nThis function can be used to unpack a successful result while handling an error.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/map-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOr",
        "namespacedName": "R.mapOr",
        "slug": "result/map-or",
        "title": "Result.mapOr",
        "@description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/map",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "map",
        "namespacedName": "R.map",
        "slug": "result/map",
        "title": "Result.map",
        "@description": "Transform the value inside the `Ok` variant of a `Result`.\n\nIt takes a `mapFn` function as its argument, which takes the current `Ok` value and returns a new value. The `map`\nfunction then returns a new `Result` object containing the transformed value. If the original `Result` object was an\n`Err`, `map` will return the original `Err` without calling the `mapFn` function.\n\nIn other words, `map` allows you to transform the contents of an `Ok` variant of a `Result` object, while leaving an\n`Err` variant unchanged. It's useful when you need to apply a function to a value inside a `Result` object without\nchanging the structure of the `Result` object itself.\n\n## Example\n\nIn this example, `map` is used twice in the `pipe` function to transform the value inside the `Ok` variant of the\n`Result` object. The final `Result` object contains the result of applying both functions to the original value.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { multiply } from 'tightrope/number/multiply';\nimport { sum } from 'tightrope/number/sum';\nimport { Ok } from 'tightrope/result';\nimport { map } from 'tightrope/result/map';\nimport { unwrap } from 'tightrope/result/unwrap';\n\nconst value: number = pipe(Ok.create(2), map(sum(5)), map(multiply(2)), unwrap);\n\nconsole.log(value); // Output: 14\n```\n\n:::tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\nWhen your function returns a value, you can use `map` to transform the value inside an `Ok` variant.\n\n:::\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`map` runs on the `Ok` variant. If any of the operations return an `Err` object then `map` will skip and return the\n`Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.map"
        ],
        "@tags": ["Result", "Right Biased", "Transform", "Transform Value"]
      },
      {
        "filePath": "result/unwrap",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrap",
        "namespacedName": "R.unwrap",
        "slug": "result/unwrap",
        "title": "Result.unwrap",
        "@description": "Extract value from an `Ok` or throw on an `Err`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap"
        ],
        "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
      }
    ],
    "Transform Option": [
      {
        "filePath": "option/and-then",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "andThen",
        "namespacedName": "O.andThen",
        "slug": "option/and-then",
        "title": "Option.andThen",
        "@description": "Applies a mapping function to the value of an `Option`, returning a new `Option`. If the input `Option` is `None`,\nthe function immediately returns `None` without calling the mapping function.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/and",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "and",
        "namespacedName": "O.and",
        "slug": "option/and",
        "title": "Option.and",
        "@description": "Combines two `Option`s, returning the second `Option` if both are `Some`, and `None` otherwise.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/flatten",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "flatten",
        "namespacedName": "O.flatten",
        "slug": "option/flatten",
        "title": "Option.flatten",
        "@description": "Removes one level of nesting from an `Option<Option<T>>`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/map-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOrElse",
        "namespacedName": "O.mapOrElse",
        "slug": "option/map-or-else",
        "title": "Option.mapOrElse",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the result of evaluating the provided\nfallback function if the `Option` is `None`",
        "@param": [
          {
            "name": "mapFn",
            "description": "The function to apply to the contained value of `Some`."
          },
          {
            "name": "defaultFn",
            "description": "The fallback function to evaluate if the `Option` is `None`."
          },
          {
            "name": "opt",
            "description": "The `Option` to apply the provided function to."
          }
        ],
        "@returns": "The result of applying the provided function to the contained value of `Some`, or the result of evaluating\n  the fallback function if the `Option` is `None`.",
        "@see": [],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/map-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOr",
        "namespacedName": "O.mapOr",
        "slug": "option/map-or",
        "title": "Option.mapOr",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the provided default value if the `Option`\nis `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Option",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/ok-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "okOr",
        "namespacedName": "O.okOr",
        "slug": "option/ok-or",
        "title": "Option.okOr",
        "@description": "Transforms `Some(v)` to `Ok(v)`, and `None` to a value of `Err` using the provided default error value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or"
        ],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "orElse",
        "namespacedName": "O.orElse",
        "slug": "option/or-else",
        "title": "Option.orElse",
        "@description": "Transforms `Some(v)` to `Some(v)`, and `None` to a new `Option` using the provided function.\n\nThe `orElse` function takes a function `orElseFn` and an `Option` object as its arguments. If the input `Option`\nobject is a `Some`, it returns the same `Some` object. If the input `Option` object is a `None`, it calls the\nprovided `orElseFn` function and returns the resulting `Option`.\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { Option } from 'tightrope/option';\nimport { none } from 'tightrope/option';\nimport { Some } from 'tightrope/option';\nimport { orElse } from 'tightrope/option/or-else';\n\nconst defaultOption = () => Some.create(42);\n\nconst option1 = pipe(Some.create(5), orElse(defaultOption));\n// Output: Some(5)\n\nconst option2 = pipe(none, orElse(defaultOption));\n// Output: Some(42)\n```\n\n## Use Cases\n\nThe `orElse` function is useful when you want to provide a fallback `Option` object in case the input `Option` is a\n`None`. It allows you to handle both cases of `Some` and `None` in a more flexible way.\n\nSome use cases of `orElse` include:\n\n- Providing a default value for cases when a value is not found in a collection or when an operation fails.\n- Mapping over a collection and returning the first element that meets a specific criteria. If no element is found,\n  returning a default `Option`.\n- Handling errors in a way that gracefully falls back to a default value, such as when making API calls and the server\n  returns an error response.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "or",
        "namespacedName": "O.or",
        "slug": "option/or",
        "title": "Option.or",
        "@description": "Like the `||` operator, but applied to `Option` types.\n\n| Scenario         | Pseudocode               | Outcome                   |\n| :--------------- | :----------------------- | ------------------------- |\n| `Some OR None`   | `pipe(Some, or(None))`   | `Some`                    |\n| `None OR Some`   | `pipe(None, or(Some))`   | `Some`                    |\n| `None1 OR None2` | `pipe(None1, or(None2))` | `None2`                   |\n| `Some1 OR Some2` | `pipe(Some1, or(Some2))` | `Some1` (first Some wins) |",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/unwrap-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOr",
        "namespacedName": "O.unwrapOr",
        "slug": "option/unwrap-or",
        "title": "Option.unwrapOr",
        "@description": "Extract value from a `Some` or use a fallback value if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      }
    ],
    "Unsafe": [
      {
        "filePath": "option/expect",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "expect",
        "namespacedName": "O.expect",
        "slug": "option/expect",
        "title": "Option.expect",
        "@description": "Unwraps an `Option` value, returning the underlying value if it is `Some`. If the value is `None`, this function\npanics with the provided error message.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "option/unwrap",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrap",
        "namespacedName": "O.unwrap",
        "slug": "option/unwrap",
        "title": "Option.unwrap",
        "@description": "Extract value from a `Some` or throw on a `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/expect-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "expectErr",
        "namespacedName": "R.expectErr",
        "slug": "result/expect-err",
        "title": "Result.expectErr",
        "@description": "Unwrap an expected `Err` value from a `Result`, or throw if it is an `Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect_err"
        ],
        "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/expect",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "expect",
        "namespacedName": "R.expect",
        "slug": "result/expect",
        "title": "Result.expect",
        "@description": "Extract value from an `Ok` or throw with the given message on an `Err`.\n\nUse `expect` to unwrap a `Result` when you are \"certain\" that the `Result` value will be an `Ok`, and you want to\nextract the value contained in it.\n\nIf the `Result` value ever turns out to be an `Err`, it will throw an `Error` with the given message.\n\n:::warning\n\n`expect` will throw if the `Result` is an `Err`.\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect"
        ],
        "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/unwrap-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapErr",
        "namespacedName": "R.unwrapErr",
        "slug": "result/unwrap-err",
        "title": "Result.unwrapErr",
        "@description": "Extract value from an `Err` or throw on an `Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_err"
        ],
        "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/unwrap",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrap",
        "namespacedName": "R.unwrap",
        "slug": "result/unwrap",
        "title": "Result.unwrap",
        "@description": "Extract value from an `Ok` or throw on an `Err`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap"
        ],
        "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
      }
    ],
    "Unwrap": [
      {
        "filePath": "option/expect",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "expect",
        "namespacedName": "O.expect",
        "slug": "option/expect",
        "title": "Option.expect",
        "@description": "Unwraps an `Option` value, returning the underlying value if it is `Some`. If the value is `None`, this function\npanics with the provided error message.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "option/map-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOrElse",
        "namespacedName": "O.mapOrElse",
        "slug": "option/map-or-else",
        "title": "Option.mapOrElse",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the result of evaluating the provided\nfallback function if the `Option` is `None`",
        "@param": [
          {
            "name": "mapFn",
            "description": "The function to apply to the contained value of `Some`."
          },
          {
            "name": "defaultFn",
            "description": "The fallback function to evaluate if the `Option` is `None`."
          },
          {
            "name": "opt",
            "description": "The `Option` to apply the provided function to."
          }
        ],
        "@returns": "The result of applying the provided function to the contained value of `Some`, or the result of evaluating\n  the fallback function if the `Option` is `None`.",
        "@see": [],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/map-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOr",
        "namespacedName": "O.mapOr",
        "slug": "option/map-or",
        "title": "Option.mapOr",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the provided default value if the `Option`\nis `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Option",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/match",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "match",
        "namespacedName": "O.match",
        "slug": "option/match",
        "title": "Option.match",
        "@description": "Extract value from both a `Some` or a `None`.\n\nThe match function takes an object containing two functions: `Some` and `None`, which are used to handle the values\nof the `Some` and `None` variants of an `Option` object. It then returns a new function that takes an `Option` object\nand returns the result of applying either the `Some` or `None` function to the value inside the `Option`, depending\non which variant it contains.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Unwrap"]
      },
      {
        "filePath": "option/ok-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "okOr",
        "namespacedName": "O.okOr",
        "slug": "option/ok-or",
        "title": "Option.okOr",
        "@description": "Transforms `Some(v)` to `Ok(v)`, and `None` to a value of `Err` using the provided default error value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or"
        ],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/unwrap-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOrElse",
        "namespacedName": "O.unwrapOrElse",
        "slug": "option/unwrap-or-else",
        "title": "Option.unwrapOrElse",
        "@description": "Extract value from a `Some` or from a fallback `() => value` if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/unwrap-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOr",
        "namespacedName": "O.unwrapOr",
        "slug": "option/unwrap-or",
        "title": "Option.unwrapOr",
        "@description": "Extract value from a `Some` or use a fallback value if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/unwrap",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrap",
        "namespacedName": "O.unwrap",
        "slug": "option/unwrap",
        "title": "Option.unwrap",
        "@description": "Extract value from a `Some` or throw on a `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/expect-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "expectErr",
        "namespacedName": "R.expectErr",
        "slug": "result/expect-err",
        "title": "Result.expectErr",
        "@description": "Unwrap an expected `Err` value from a `Result`, or throw if it is an `Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect_err"
        ],
        "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/expect",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "expect",
        "namespacedName": "R.expect",
        "slug": "result/expect",
        "title": "Result.expect",
        "@description": "Extract value from an `Ok` or throw with the given message on an `Err`.\n\nUse `expect` to unwrap a `Result` when you are \"certain\" that the `Result` value will be an `Ok`, and you want to\nextract the value contained in it.\n\nIf the `Result` value ever turns out to be an `Err`, it will throw an `Error` with the given message.\n\n:::warning\n\n`expect` will throw if the `Result` is an `Err`.\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect"
        ],
        "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/map-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOrElse",
        "namespacedName": "R.mapOrElse",
        "slug": "result/map-or-else",
        "title": "Result.mapOrElse",
        "@description": "Maps a `Result` by applying fallback function default to a contained `Err` value, or a function to a contained `Ok`\nvalue.\n\nThis function can be used to unpack a successful result while handling an error.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/map-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOr",
        "namespacedName": "R.mapOr",
        "slug": "result/map-or",
        "title": "Result.mapOr",
        "@description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/match",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "match",
        "namespacedName": "R.match",
        "slug": "result/match",
        "title": "Result.match",
        "@description": "Extract value from both an `Ok` or an `Err`.\n\nThe match function takes an object containing two functions: `Ok` and `Err`, which are used to handle the values of\nthe `Ok` and `Err` variants of a `Result` object. It then returns a new function that takes a `Result` object and\nreturns the result of applying either the `Ok` or `Err` function to the value inside the `Result`, depending on which\nvariant it contains.\n\n## Example\n\nIn this example, `andThen` is used to transform the `Ok` variant of the `Result` object.\n\n- If the value inside the `Ok` variant is greater than `50`, an `Err` variant containing the error message `\"Value too\n  high\"` is returned.\n- If the value is less than or equal to `50`, an `Ok` variant containing the original value is returned.\n\nThe `match` function is then used to handle the two possible variants of the `Result` object, printing the\nappropriate message to the console.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { andThen } from 'tightrope/result/and-then';\nimport { Err } from 'tightrope/result';\nimport { match } from 'tightrope/result/match';\nimport { Ok } from 'tightrope/result';\n\nconst result = pipe(\n  60,\n  Ok.create,\n  andThen((value) => (value > 50 ? new Err('Value too high') : new Ok(value))),\n  match({\n    Ok: (value) => `The value is ${value}`,\n    Err: (err) => `Error: ${err}`,\n  }),\n);\n\nconsole.log(result); // Outputs: \"Error: Value too high\"\n```\n\n## Use Cases\n\n`match` is used to destructure and extract the value from a `Result` object and perform different actions based on\nwhether it is an `Ok` or `Err`. This is useful when handling errors or when processing data that may or may not\ncontain errors.\n\nOne common use case for `match` is error handling. When an operation can result in an error, it can return a `Result`\nobject that either contains an `Ok` value or an `Err` value. `match` can be used to handle each case separately, for\nexample to log the error message in case of an `Err` or continue processing with the `Ok` value.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Result", "Unwrap"]
      },
      {
        "filePath": "result/unwrap-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapErr",
        "namespacedName": "R.unwrapErr",
        "slug": "result/unwrap-err",
        "title": "Result.unwrapErr",
        "@description": "Extract value from an `Err` or throw on an `Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_err"
        ],
        "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/unwrap-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOrElse",
        "namespacedName": "R.unwrapOrElse",
        "slug": "result/unwrap-or-else",
        "title": "Result.unwrapOrElse",
        "@description": "Extract value from an `Ok` or from a fallback `() => Ok` if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/unwrap-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOr",
        "namespacedName": "R.unwrapOr",
        "slug": "result/unwrap-or",
        "title": "Result.unwrapOr",
        "@description": "Extract value from an `Ok` or use a fallback value if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Recover",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/unwrap",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrap",
        "namespacedName": "R.unwrap",
        "slug": "result/unwrap",
        "title": "Result.unwrap",
        "@description": "Extract value from an `Ok` or throw on an `Err`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap"
        ],
        "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
      }
    ],
    "Invoke": [
      {
        "filePath": "option/from-guard",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "fromGuard",
        "namespacedName": "O.fromGuard",
        "slug": "option/from-guard",
        "title": "Option.fromGuard",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Option", "Wrap"]
      },
      {
        "filePath": "result/from-guard",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "fromGuard",
        "namespacedName": "R.fromGuard",
        "slug": "result/from-guard",
        "title": "Result.fromGuard",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Result", "Wrap"]
      },
      {
        "filePath": "result/from-try",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "fromTry",
        "namespacedName": "R.fromTry",
        "slug": "result/from-try",
        "title": "Result.fromTry",
        "@description": "Create an `Ok` or `Err` from `try...catch`.\n\nThe purpose of `fromTry` is to safely execute a given function and return either an `Ok` instance with the result or\nan `Err` instance with the caught error.\n\nThe function is executed inside a try-catch block and if it runs without errors, `fromTry` returns an `Ok` instance\nwith the result. Otherwise, `fromTry` returns an `Err` instance with the caught error.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Result", "Wrap"]
      }
    ],
    "Wrap": [
      {
        "filePath": "option/from-guard",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "fromGuard",
        "namespacedName": "O.fromGuard",
        "slug": "option/from-guard",
        "title": "Option.fromGuard",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Option", "Wrap"]
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "Some",
        "namespacedName": "O.Some",
        "slug": "option/some",
        "title": "Option.Some",
        "@description": "Represent a value in the `Option` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Some } from 'tightrope/option';\n\nconst value = Some.create('Hello, world!');\n```\n\nYou can check if a value is a `Some` instance by using the `isSome` function.\n\n```ts\nimport { isSome } from 'tightrope/option/is-some';\n\nconst value = Some.create('Hello, world!');\nconsole.log(isSome(value)); // true\nconsole.log(isSome('foo')); // false\nconsole.log(isSome('Hello, world! but this is not inside a Some')); // false\n```\n\n`Some` instances are usually returned from functions that might not return a value, and are combined with `None`\ninstances using the `Option` type.\n\n## Use Cases\n\nCreating a `Some` instance directly is useful when you want to represent a value in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom value handler for your application and you need to represent a specific value\ncondition, you can create a `Some` instance directly with the value you want to use. This can give you more control\nover the specific values that your application can encounter and how they are handled.\n\nAnother use case for creating a `Some` instance directly is when you are writing tests for your application and you\nwant to simulate a value condition. By creating a `Some` instance directly with a specific value, you can test how\nyour application handles that value condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Option", "Wrap"]
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "None",
        "namespacedName": "O.None",
        "slug": "option/none",
        "title": "Option.None",
        "@description": "Represent an absence of value in the `Option` type.\n\n## Example\n\nYou can check if a value is a `None` instance by using the `isNone` function.\n\n```ts\nimport { isNone } from 'tightrope/option/is-none';\n\nconsole.log(isNone(none)); // true\nconsole.log(isNone('foo')); // false\nconsole.log(isNone(null)); // false\n```\n\n`None` instances are usually returned from functions that might not return a value, and are combined with `Some`\ninstances using the `Option` type.\n\n## Use Cases\n\nReferencing the `None` instance is useful when you want to represent an absence of value in your program without\nhaving to go through a pipeline or helper method that might not always be available or suitable for your specific use\ncase.\n\nFor example, if you're writing a custom value handler for your application and you need to represent a specific\nabsence of value condition, you can reference the `None` instance. This can give you more control over the specific\nvalue absences that your application can encounter and how they are handled.\n\nAnother use case for referencing the `None` instance is when you are writing tests for your application and you want\nto simulate a value absence condition. By referencing the `None` instance, you can test how your application handles\nthat value absence condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Errors", "Option", "Wrap"]
      },
      {
        "filePath": "result/from-guard",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "fromGuard",
        "namespacedName": "R.fromGuard",
        "slug": "result/from-guard",
        "title": "Result.fromGuard",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Result", "Wrap"]
      },
      {
        "filePath": "result/from-try",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "fromTry",
        "namespacedName": "R.fromTry",
        "slug": "result/from-try",
        "title": "Result.fromTry",
        "@description": "Create an `Ok` or `Err` from `try...catch`.\n\nThe purpose of `fromTry` is to safely execute a given function and return either an `Ok` instance with the result or\nan `Err` instance with the caught error.\n\nThe function is executed inside a try-catch block and if it runs without errors, `fromTry` returns an `Ok` instance\nwith the result. Otherwise, `fromTry` returns an `Err` instance with the caught error.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Result", "Wrap"]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Ok",
        "namespacedName": "R.Ok",
        "slug": "result/ok",
        "title": "Result.Ok",
        "@description": "Represent a correct value in the `Result` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Ok } from 'tightrope/result';\n\nconst value = new Ok('Success!');\n```\n\nYou can check if a value is an `Ok` instance by using the `isOk` function.\n\n```ts\nimport { isOk } from 'tightrope/result/is-ok';\n\nconst value = new Ok('Success!');\nconsole.log(isOk(value)); // true\nconsole.log(isOk('foo')); // false\nconsole.log(isOk('Success! but this is not inside an Ok')); // false\n```\n\n`Ok` instances are usually returned from functions that can fail or encounter an error, and are combined with `Ok`\ninstances using the `Result` type.\n\n## Use Cases\n\nCreating an `Ok` instance directly is useful when you want to represent an error in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an `Ok` instance directly with the error message or code you want to use. This can give you\nmore control over the specific errors that your application can encounter and how they are handled.\n\nAnother use case for creating an `Ok` instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an `Ok` instance directly with a specific error message or code, you\ncan test how your application handles that error condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Result", "Wrap"]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Err",
        "namespacedName": "R.Err",
        "slug": "result/err",
        "title": "Result.Err",
        "@description": "Represent an erroneous value in the `Result` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Err } from 'tightrope/result';\n\nconst error = new Err(new Error('Something went wrong.'));\n```\n\nYou can check if a value is an `Err` instance by using the `isErr` function.\n\n```ts\nimport { isErr } from 'tightrope/result/is-err';\n\nconst error = new Err(new Error('Something went wrong.'));\nconsole.log(isErr(error)); // true\nconsole.log(isErr('foo')); // false\nconsole.log(isErr(new Error('not the same thing'))); // false\n```\n\n`Err` instances are usually returned from functions that can fail or encounter an error, and are combined with `Ok`\ninstances using the `Result` type.\n\n## Use Cases\n\nCreating an `Err` instance directly is useful when you want to represent an error in your program without having to\ngo through a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an `Err` instance directly with the error message or code you want to use. This can give\nyou more control over the specific errors that your application can encounter and how they are handled.\n\nAnother use case for creating an `Err` instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an `Err` instance directly with a specific error message or code,\nyou can test how your application handles that error condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Errors", "Result", "Wrap"]
      }
    ],
    "Type": [
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "Option",
        "namespacedName": "O.Option",
        "slug": "option/option",
        "title": "Option.Option",
        "@description": "`Option` is a type that represents either a value (`Some`) or the absence of a value (`None`).\n\n`Option<T>` is the type used for expressing the possibility of the absence of a value. It is an enum with the\nvariants, `Some(T)`, representing the presence of a value, and `None`, representing the absence of a value.\n\n:::info\n\n`Option` allows you to construct a pipeline of commands that handle both the `Some` and `None` variants. This is\nuseful for handling cases where a value might be missing or undefined, and branching based on whether the previous\noperation returned a value or not.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `Option` is sometimes referred to as `Maybe`.\n- `Some` is sometimes referred to as `Just` or \"the value path\".\n- `None` is sometimes referred to as `Nothing` or \"the empty path\".\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Type"]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Result",
        "namespacedName": "R.Result",
        "slug": "result/result",
        "title": "Result.Result",
        "@description": "`Result` is a type that represents either success (`Ok`) or failure (`Err`).\n\n`Result<T, E>` is the type used for returning and propagating errors. It is an enum with the variants, `Ok(T)`,\nrepresenting success and containing a value, and `Err(E)`, representing error and containing an error value.\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `Result` is sometimes referred to as `Either`.\n- `Ok` is sometimes referred to as `Right` or \"the happy path\".\n- `Err` is sometimes referred to as `Left` or \"the sad path\".\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Result", "Type"]
      }
    ],
    "Class": [
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "Some",
        "namespacedName": "O.Some",
        "slug": "option/some",
        "title": "Option.Some",
        "@description": "Represent a value in the `Option` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Some } from 'tightrope/option';\n\nconst value = Some.create('Hello, world!');\n```\n\nYou can check if a value is a `Some` instance by using the `isSome` function.\n\n```ts\nimport { isSome } from 'tightrope/option/is-some';\n\nconst value = Some.create('Hello, world!');\nconsole.log(isSome(value)); // true\nconsole.log(isSome('foo')); // false\nconsole.log(isSome('Hello, world! but this is not inside a Some')); // false\n```\n\n`Some` instances are usually returned from functions that might not return a value, and are combined with `None`\ninstances using the `Option` type.\n\n## Use Cases\n\nCreating a `Some` instance directly is useful when you want to represent a value in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom value handler for your application and you need to represent a specific value\ncondition, you can create a `Some` instance directly with the value you want to use. This can give you more control\nover the specific values that your application can encounter and how they are handled.\n\nAnother use case for creating a `Some` instance directly is when you are writing tests for your application and you\nwant to simulate a value condition. By creating a `Some` instance directly with a specific value, you can test how\nyour application handles that value condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Option", "Wrap"]
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "None",
        "namespacedName": "O.None",
        "slug": "option/none",
        "title": "Option.None",
        "@description": "Represent an absence of value in the `Option` type.\n\n## Example\n\nYou can check if a value is a `None` instance by using the `isNone` function.\n\n```ts\nimport { isNone } from 'tightrope/option/is-none';\n\nconsole.log(isNone(none)); // true\nconsole.log(isNone('foo')); // false\nconsole.log(isNone(null)); // false\n```\n\n`None` instances are usually returned from functions that might not return a value, and are combined with `Some`\ninstances using the `Option` type.\n\n## Use Cases\n\nReferencing the `None` instance is useful when you want to represent an absence of value in your program without\nhaving to go through a pipeline or helper method that might not always be available or suitable for your specific use\ncase.\n\nFor example, if you're writing a custom value handler for your application and you need to represent a specific\nabsence of value condition, you can reference the `None` instance. This can give you more control over the specific\nvalue absences that your application can encounter and how they are handled.\n\nAnother use case for referencing the `None` instance is when you are writing tests for your application and you want\nto simulate a value absence condition. By referencing the `None` instance, you can test how your application handles\nthat value absence condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Errors", "Option", "Wrap"]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Ok",
        "namespacedName": "R.Ok",
        "slug": "result/ok",
        "title": "Result.Ok",
        "@description": "Represent a correct value in the `Result` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Ok } from 'tightrope/result';\n\nconst value = new Ok('Success!');\n```\n\nYou can check if a value is an `Ok` instance by using the `isOk` function.\n\n```ts\nimport { isOk } from 'tightrope/result/is-ok';\n\nconst value = new Ok('Success!');\nconsole.log(isOk(value)); // true\nconsole.log(isOk('foo')); // false\nconsole.log(isOk('Success! but this is not inside an Ok')); // false\n```\n\n`Ok` instances are usually returned from functions that can fail or encounter an error, and are combined with `Ok`\ninstances using the `Result` type.\n\n## Use Cases\n\nCreating an `Ok` instance directly is useful when you want to represent an error in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an `Ok` instance directly with the error message or code you want to use. This can give you\nmore control over the specific errors that your application can encounter and how they are handled.\n\nAnother use case for creating an `Ok` instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an `Ok` instance directly with a specific error message or code, you\ncan test how your application handles that error condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Result", "Wrap"]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Err",
        "namespacedName": "R.Err",
        "slug": "result/err",
        "title": "Result.Err",
        "@description": "Represent an erroneous value in the `Result` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Err } from 'tightrope/result';\n\nconst error = new Err(new Error('Something went wrong.'));\n```\n\nYou can check if a value is an `Err` instance by using the `isErr` function.\n\n```ts\nimport { isErr } from 'tightrope/result/is-err';\n\nconst error = new Err(new Error('Something went wrong.'));\nconsole.log(isErr(error)); // true\nconsole.log(isErr('foo')); // false\nconsole.log(isErr(new Error('not the same thing'))); // false\n```\n\n`Err` instances are usually returned from functions that can fail or encounter an error, and are combined with `Ok`\ninstances using the `Result` type.\n\n## Use Cases\n\nCreating an `Err` instance directly is useful when you want to represent an error in your program without having to\ngo through a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an `Err` instance directly with the error message or code you want to use. This can give\nyou more control over the specific errors that your application can encounter and how they are handled.\n\nAnother use case for creating an `Err` instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an `Err` instance directly with a specific error message or code,\nyou can test how your application handles that error condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Errors", "Result", "Wrap"]
      }
    ],
    "Left Biased": [
      {
        "filePath": "option/or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "orElse",
        "namespacedName": "O.orElse",
        "slug": "option/or-else",
        "title": "Option.orElse",
        "@description": "Transforms `Some(v)` to `Some(v)`, and `None` to a new `Option` using the provided function.\n\nThe `orElse` function takes a function `orElseFn` and an `Option` object as its arguments. If the input `Option`\nobject is a `Some`, it returns the same `Some` object. If the input `Option` object is a `None`, it calls the\nprovided `orElseFn` function and returns the resulting `Option`.\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { Option } from 'tightrope/option';\nimport { none } from 'tightrope/option';\nimport { Some } from 'tightrope/option';\nimport { orElse } from 'tightrope/option/or-else';\n\nconst defaultOption = () => Some.create(42);\n\nconst option1 = pipe(Some.create(5), orElse(defaultOption));\n// Output: Some(5)\n\nconst option2 = pipe(none, orElse(defaultOption));\n// Output: Some(42)\n```\n\n## Use Cases\n\nThe `orElse` function is useful when you want to provide a fallback `Option` object in case the input `Option` is a\n`None`. It allows you to handle both cases of `Some` and `None` in a more flexible way.\n\nSome use cases of `orElse` include:\n\n- Providing a default value for cases when a value is not found in a collection or when an operation fails.\n- Mapping over a collection and returning the first element that meets a specific criteria. If no element is found,\n  returning a default `Option`.\n- Handling errors in a way that gracefully falls back to a default value, such as when making API calls and the server\n  returns an error response.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "or",
        "namespacedName": "O.or",
        "slug": "option/or",
        "title": "Option.or",
        "@description": "Like the `||` operator, but applied to `Option` types.\n\n| Scenario         | Pseudocode               | Outcome                   |\n| :--------------- | :----------------------- | ------------------------- |\n| `Some OR None`   | `pipe(Some, or(None))`   | `Some`                    |\n| `None OR Some`   | `pipe(None, or(Some))`   | `Some`                    |\n| `None1 OR None2` | `pipe(None1, or(None2))` | `None2`                   |\n| `Some1 OR Some2` | `pipe(Some1, or(Some2))` | `Some1` (first Some wins) |",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/unwrap-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOrElse",
        "namespacedName": "O.unwrapOrElse",
        "slug": "option/unwrap-or-else",
        "title": "Option.unwrapOrElse",
        "@description": "Extract value from a `Some` or from a fallback `() => value` if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/unwrap-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOr",
        "namespacedName": "O.unwrapOr",
        "slug": "option/unwrap-or",
        "title": "Option.unwrapOr",
        "@description": "Extract value from a `Some` or use a fallback value if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/map-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapErr",
        "namespacedName": "R.mapErr",
        "slug": "result/map-err",
        "title": "Result.mapErr",
        "@description": "Transform the value inside the `Err` variant of a `Result`.\n\nIf the input `Result` is an `Err`, the function applies `mapFn` to the error value and returns a new `Result` object\nwith the transformed error value. If the input `Result` is an `Ok`, it simply returns the input `Result` object\nunmodified.\n\nThis function is similar to `map`, but instead of transforming the `Ok` value, it transforms the `Err` value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.map_err"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Value"
        ]
      },
      {
        "filePath": "result/or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "orElse",
        "namespacedName": "R.orElse",
        "slug": "result/or-else",
        "title": "Result.orElse",
        "@description": "Like the `||` operator, but applied to `Result` types with an `() => Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "or",
        "namespacedName": "R.or",
        "slug": "result/or",
        "title": "Result.or",
        "@description": "Like the `||` operator, but applied to `Result` types.\n\n| Scenario       | Pseudocode             | Outcome               |\n| :------------- | :--------------------- | --------------------- |\n| `Ok OR Err`    | `pipe(Ok, or(Err))`    | `Ok`                  |\n| `Err OR Ok`    | `pipe(Err, or(Ok))`    | `Ok`                  |\n| `Err1 OR Err2` | `pipe(Err1, or(Err2))` | `Err2`                |\n| `Ok1 OR Ok2`   | `pipe(Ok1, or(Ok2))`   | `Ok1` (first Ok wins) |",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/unwrap-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOrElse",
        "namespacedName": "R.unwrapOrElse",
        "slug": "result/unwrap-or-else",
        "title": "Result.unwrapOrElse",
        "@description": "Extract value from an `Ok` or from a fallback `() => Ok` if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      }
    ],
    "Recover": [
      {
        "filePath": "option/or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "orElse",
        "namespacedName": "O.orElse",
        "slug": "option/or-else",
        "title": "Option.orElse",
        "@description": "Transforms `Some(v)` to `Some(v)`, and `None` to a new `Option` using the provided function.\n\nThe `orElse` function takes a function `orElseFn` and an `Option` object as its arguments. If the input `Option`\nobject is a `Some`, it returns the same `Some` object. If the input `Option` object is a `None`, it calls the\nprovided `orElseFn` function and returns the resulting `Option`.\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { Option } from 'tightrope/option';\nimport { none } from 'tightrope/option';\nimport { Some } from 'tightrope/option';\nimport { orElse } from 'tightrope/option/or-else';\n\nconst defaultOption = () => Some.create(42);\n\nconst option1 = pipe(Some.create(5), orElse(defaultOption));\n// Output: Some(5)\n\nconst option2 = pipe(none, orElse(defaultOption));\n// Output: Some(42)\n```\n\n## Use Cases\n\nThe `orElse` function is useful when you want to provide a fallback `Option` object in case the input `Option` is a\n`None`. It allows you to handle both cases of `Some` and `None` in a more flexible way.\n\nSome use cases of `orElse` include:\n\n- Providing a default value for cases when a value is not found in a collection or when an operation fails.\n- Mapping over a collection and returning the first element that meets a specific criteria. If no element is found,\n  returning a default `Option`.\n- Handling errors in a way that gracefully falls back to a default value, such as when making API calls and the server\n  returns an error response.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "or",
        "namespacedName": "O.or",
        "slug": "option/or",
        "title": "Option.or",
        "@description": "Like the `||` operator, but applied to `Option` types.\n\n| Scenario         | Pseudocode               | Outcome                   |\n| :--------------- | :----------------------- | ------------------------- |\n| `Some OR None`   | `pipe(Some, or(None))`   | `Some`                    |\n| `None OR Some`   | `pipe(None, or(Some))`   | `Some`                    |\n| `None1 OR None2` | `pipe(None1, or(None2))` | `None2`                   |\n| `Some1 OR Some2` | `pipe(Some1, or(Some2))` | `Some1` (first Some wins) |",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/unwrap-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOr",
        "namespacedName": "O.unwrapOr",
        "slug": "option/unwrap-or",
        "title": "Option.unwrapOr",
        "@description": "Extract value from a `Some` or use a fallback value if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "orElse",
        "namespacedName": "R.orElse",
        "slug": "result/or-else",
        "title": "Result.orElse",
        "@description": "Like the `||` operator, but applied to `Result` types with an `() => Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "or",
        "namespacedName": "R.or",
        "slug": "result/or",
        "title": "Result.or",
        "@description": "Like the `||` operator, but applied to `Result` types.\n\n| Scenario       | Pseudocode             | Outcome               |\n| :------------- | :--------------------- | --------------------- |\n| `Ok OR Err`    | `pipe(Ok, or(Err))`    | `Ok`                  |\n| `Err OR Ok`    | `pipe(Err, or(Ok))`    | `Ok`                  |\n| `Err1 OR Err2` | `pipe(Err1, or(Err2))` | `Err2`                |\n| `Ok1 OR Ok2`   | `pipe(Ok1, or(Ok2))`   | `Ok1` (first Ok wins) |",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/unwrap-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOr",
        "namespacedName": "R.unwrapOr",
        "slug": "result/unwrap-or",
        "title": "Result.unwrapOr",
        "@description": "Extract value from an `Ok` or use a fallback value if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Recover",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      }
    ],
    "Transform Result": [
      {
        "filePath": "option/unwrap-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOrElse",
        "namespacedName": "O.unwrapOrElse",
        "slug": "option/unwrap-or-else",
        "title": "Option.unwrapOrElse",
        "@description": "Extract value from a `Some` or from a fallback `() => value` if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/and-then",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "andThen",
        "namespacedName": "R.andThen",
        "slug": "result/and-then",
        "title": "Result.andThen",
        "@description": "Same as `flatMap` or `chain`, transform a `Result` with the value of another.\n\nWhen your function returns a `Result` object, you can use `andThen` to transform the `Ok` variant itself.\n\n::: tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\n:::\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport type { Result } from 'tightrope/result';\nimport { Err, Ok } from 'tightrope/result';\nimport { andThen } from 'tightrope/result/and-then';\nimport { map } from 'tightrope/result/map';\nimport { multiply } from 'tightrope/number/multiply';\nimport { unwrapOr } from 'tightrope/result/unwrap-or';\n\nfunction divide(x: number, y: number): Result<number, Error> {\n  if (y === 0) {\n    return new Err(new Error('Division by zero'));\n  }\n  return new Ok(x / y);\n}\n\nconst amount = pipe(\n  Ok.create<number, Error>(16),\n  andThen((n) => divide(n, 2)),\n  andThen((n) => divide(n, 4)),\n  map(multiply(100)),\n  unwrapOr(0),\n);\n\nconsole.log(amount); // 200\n```\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`andThen` runs on the `Ok` variant. If any of the operations return an `Err` object then `andThen` will skip and\nreturn the `Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `andThen` is sometimes referred to as `chain` or `flatMap`.\n- `Result` is sometimes referred to as `Either`.\n- `Ok` is sometimes referred to as `Right` or \"the happy path\".\n- `Err` is sometimes referred to as `Left` or \"the sad path\".\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.and_then"
        ],
        "@tags": ["Result", "Right Biased", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/and",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "and",
        "namespacedName": "R.and",
        "slug": "result/and",
        "title": "Result.and",
        "@description": "Like the `&&` operator, but applied to `Result` types.\n\nThe `and` function is used to combine two `Result` objects, returning either the first error encountered, or the\nsecond `Ok` value if both `Result` objects are successful.\n\n## Behaviour\n\n`and` behaves just like the `&&` operator, but for support of `Result` types:\n\n| Scenario       | Pseudocode              | Outcome |\n| :------------- | :---------------------- | :------ |\n| `Ok && Err`    | `pipe(Ok, and(Err))`    | `Err`   |\n| `Err && Ok`    | `pipe(Err, and(Ok))`    | `Err`   |\n| `Err1 && Err2` | `pipe(Err1, and(Err2))` | `Err1`  |\n| `Ok1 && Ok2`   | `pipe(Ok1, and(Ok2))`   | `Ok2`   |\n\n## Examples\n\nIn this example, the `and` function is used to combine two `Result` objects (`result1` and `result2`). Since\n`result2` is an `Err` object, the final result is also an `Err` object containing the error message.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { and } from 'tightrope/result/and';\nimport { divide } from 'tightrope/number/divide';\n\nconst result1 = divide(10, 5); // returns Ok(2)\nconst result2 = divide(20, 0); // returns Err(\"Cannot divide by zero\")\n\nconst finalResult = pipe(result1, and(result2));\n\nconsole.log(finalResult); // Err(\"Cannot divide by zero\")\n```\n\nIn this example, the `and` function is used to combine two `Result` objects (`result1` and `result2`). Since both\n`Result` objects are successful, the final result is the second `Ok` value (`Ok(5)`).\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { and } from 'tightrope/result/and';\nimport { divide } from 'tightrope/number/divide';\n\nconst result1 = divide(10, 5); // returns Ok(2)\nconst result2 = divide(20, 4); // returns Ok(5)\n\nconst finalResult = pipe(result1, and(result2)); // returns Ok(5)\n\nconsole.log(finalResult); // Ok(5)\n```",
        "@param": [],
        "@returns": "",
        "@see": ["http://jamiemason.github.io/tightrope/api/result/or"],
        "@tags": ["Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/flatten",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "flatten",
        "namespacedName": "R.flatten",
        "slug": "result/flatten",
        "title": "Result.flatten",
        "@description": "Replace nested Results with one `Result` of the inner value.\n\nFlattening only removes one level of nesting at a time\n\n- If given an `Ok` with a normal value, returns the `Ok` as is.\n- If given an `Err` with a normal value, returns the `Err` as is.\n- If given a `Result` with a `Result` value, returns the inner `Result`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.flatten"
        ],
        "@tags": ["Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/map-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOrElse",
        "namespacedName": "R.mapOrElse",
        "slug": "result/map-or-else",
        "title": "Result.mapOrElse",
        "@description": "Maps a `Result` by applying fallback function default to a contained `Err` value, or a function to a contained `Ok`\nvalue.\n\nThis function can be used to unpack a successful result while handling an error.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/map-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOr",
        "namespacedName": "R.mapOr",
        "slug": "result/map-or",
        "title": "Result.mapOr",
        "@description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/ok",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "ok",
        "namespacedName": "R.ok",
        "slug": "result/ok",
        "title": "Result.ok",
        "@description": "Transforms `Result<T, E>` into `Option<T>`, mapping `Ok(v)` to `Some(v)` and `Err(e)` to `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "orElse",
        "namespacedName": "R.orElse",
        "slug": "result/or-else",
        "title": "Result.orElse",
        "@description": "Like the `||` operator, but applied to `Result` types with an `() => Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "or",
        "namespacedName": "R.or",
        "slug": "result/or",
        "title": "Result.or",
        "@description": "Like the `||` operator, but applied to `Result` types.\n\n| Scenario       | Pseudocode             | Outcome               |\n| :------------- | :--------------------- | --------------------- |\n| `Ok OR Err`    | `pipe(Ok, or(Err))`    | `Ok`                  |\n| `Err OR Ok`    | `pipe(Err, or(Ok))`    | `Ok`                  |\n| `Err1 OR Err2` | `pipe(Err1, or(Err2))` | `Err2`                |\n| `Ok1 OR Ok2`   | `pipe(Ok1, or(Ok2))`   | `Ok1` (first Ok wins) |",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/unwrap-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOrElse",
        "namespacedName": "R.unwrapOrElse",
        "slug": "result/unwrap-or-else",
        "title": "Result.unwrapOrElse",
        "@description": "Extract value from an `Ok` or from a fallback `() => Ok` if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/unwrap-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOr",
        "namespacedName": "R.unwrapOr",
        "slug": "result/unwrap-or",
        "title": "Result.unwrapOr",
        "@description": "Extract value from an `Ok` or use a fallback value if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Recover",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      }
    ],
    "Array": [
      {
        "filePath": "result/all",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "all",
        "namespacedName": "R.all",
        "slug": "result/all",
        "title": "Result.all",
        "@description": "Takes an array of `Result` values and returns a `Result` containing an array of `Ok` values if all input values are\n`Ok`. If any input value is an `Err`, returns an `Err` containing an array of all encountered `Err` values.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array", "Result"]
      },
      {
        "filePath": "result/sequence",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "sequence",
        "namespacedName": "R.sequence",
        "slug": "result/sequence",
        "title": "Result.sequence",
        "@description": "Takes an array of `Result` values and returns a `Result` containing an array\nof values if all Results are `Ok`. If any input value is an `Err`, returns\nthe first encountered `Err`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array", "Result"]
      }
    ],
    "String Length": [
      {
        "filePath": "string/ends-with",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "endsWith",
        "namespacedName": "S.endsWith",
        "slug": "string/ends-with",
        "title": "String.endsWith",
        "@description": "Return true if a given value ends with a specific string.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "String Length", "Strings"]
      },
      {
        "filePath": "string/is-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isEmptyString",
        "namespacedName": "S.isEmptyString",
        "slug": "string/is-empty-string",
        "title": "String.isEmptyString",
        "@description": "Asserts that a value is a valid `String` containing no characters.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Emptiness",
          "Guard",
          "String Length",
          "Strings",
          "Truthiness"
        ]
      },
      {
        "filePath": "string/starts-with",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "startsWith",
        "namespacedName": "S.startsWith",
        "slug": "string/starts-with",
        "title": "String.startsWith",
        "@description": "Asserts that value is a string whose trailing characters are equal to those of the provided string.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "String Length", "Strings"]
      }
    ],
    "JSON": [
      {
        "filePath": "string/is-json-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isJsonString",
        "namespacedName": "S.isJsonString",
        "slug": "string/is-json-string",
        "title": "String.isJsonString",
        "@description": "Asserts that a value is a `String` of valid JSON.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "JSON", "Strings"]
      }
    ]
  },
  "byModule": {
    "Array": [
      {
        "filePath": "array/every",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "every",
        "namespacedName": "A.every",
        "slug": "array/every",
        "title": "Array.every",
        "@description": "Return true if `value` is a non-empty array and every member passes the given guard.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/flat",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "flat",
        "namespacedName": "A.flat",
        "slug": "array/flat",
        "title": "Array.flat",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Transform"]
      },
      {
        "filePath": "array/is-array-including-all-of",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingAllOf",
        "namespacedName": "A.isArrayIncludingAllOf",
        "slug": "array/is-array-including-all-of",
        "title": "Array.isArrayIncludingAllOf",
        "@description": "Asserts that `value` is an `Array` including all of the values provided in `allowedValues`. It could also include\nadditional values or be in a different order, but if every value in `allowedValues` features in `value` then this\nwill return `true`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-including-any-of",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingAnyOf",
        "namespacedName": "A.isArrayIncludingAnyOf",
        "slug": "array/is-array-including-any-of",
        "title": "Array.isArrayIncludingAnyOf",
        "@description": "Asserts that `value` is an `Array` including at least one of the members of `allowedValues`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-including-only",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayIncludingOnly",
        "namespacedName": "A.isArrayIncludingOnly",
        "slug": "array/is-array-including-only",
        "title": "Array.isArrayIncludingOnly",
        "@description": "Asserts that a value is an `Array` including only the values provided in the given `allowedValues` array and no\nothers. The order and number of times each value appears in either array does not matter. Returns true unless `value`\ncontains a value which does not feature in `allowedValues`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Multiple Conditions"]
      },
      {
        "filePath": "array/is-array-of-booleans",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfBooleans",
        "namespacedName": "A.isArrayOfBooleans",
        "slug": "array/is-array-of-booleans",
        "title": "Array.isArrayOfBooleans",
        "@description": "Asserts that a value is an `Array` containing only `Boolean` values.\n\n## Examples\n\n```ts\nisArrayOfBooleans([true, false, new Boolean(true)]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Booleans", "Guard"]
      },
      {
        "filePath": "array/is-array-of-numbers",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfNumbers",
        "namespacedName": "A.isArrayOfNumbers",
        "slug": "array/is-array-of-numbers",
        "title": "Array.isArrayOfNumbers",
        "@description": "Asserts that a value is an `Array` containing only `Number` values.\n\n## Examples\n\n```ts\nisArrayOfNumbers([12, 0, 14]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Numbers"]
      },
      {
        "filePath": "array/is-array-of-objects",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfObjects",
        "namespacedName": "A.isArrayOfObjects",
        "slug": "array/is-array-of-objects",
        "title": "Array.isArrayOfObjects",
        "@description": "Asserts that a value is an `Array` containing only `Object` values.\n\n## Examples\n\n```ts\nisArrayOfObjects([{}, new Object()]);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      },
      {
        "filePath": "array/is-array-of-size",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfSize",
        "namespacedName": "A.isArrayOfSize",
        "slug": "array/is-array-of-size",
        "title": "Array.isArrayOfSize",
        "@description": "Asserts that a value is an `Array` containing a specific number of values.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array Length", "Arrays", "Guard"]
      },
      {
        "filePath": "array/is-array-of-strings",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOfStrings",
        "namespacedName": "A.isArrayOfStrings",
        "slug": "array/is-array-of-strings",
        "title": "Array.isArrayOfStrings",
        "@description": "Asserts that a value is an `Array` containing only `String` values.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Strings"]
      },
      {
        "filePath": "array/is-array-of",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArrayOf",
        "namespacedName": "A.isArrayOf",
        "slug": "array/is-array-of",
        "title": "Array.isArrayOf",
        "@description": "Does every value pass the given Guard?\n\n## Examples\n\n```ts\nisArrayOf(isNonEmptyString, ['click', 'mousedown', 'load']);\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard"]
      },
      {
        "filePath": "array/is-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isArray",
        "namespacedName": "A.isArray",
        "slug": "array/is-array",
        "title": "Array.isArray",
        "@description": "Asserts that a value is a valid `Array` containing none or any number of items of any type.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard"]
      },
      {
        "filePath": "array/is-empty-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isEmptyArray",
        "namespacedName": "A.isEmptyArray",
        "slug": "array/is-empty-array",
        "title": "Array.isEmptyArray",
        "@description": "Asserts that a value is a valid `Array` containing no items.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array Length", "Arrays", "Emptiness", "Guard"]
      },
      {
        "filePath": "array/is-non-empty-array",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "isNonEmptyArray",
        "namespacedName": "A.isNonEmptyArray",
        "slug": "array/is-non-empty-array",
        "title": "Array.isNonEmptyArray",
        "@description": "Asserts that a value is an `Array` containing at least one value.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Emptiness", "Guard"]
      },
      {
        "filePath": "array/some",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "some",
        "namespacedName": "A.some",
        "slug": "array/some",
        "title": "Array.some",
        "@description": "Returns true if array is not empty and any member of the array passes the guard",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard"]
      },
      {
        "filePath": "array/uniq",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "uniq",
        "namespacedName": "A.uniq",
        "slug": "array/uniq",
        "title": "Array.uniq",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Filter"]
      },
      {
        "filePath": "array/index",
        "moduleName": "Array",
        "moduleNameShort": "A",
        "name": "ArrayElement",
        "namespacedName": "A.ArrayElement",
        "slug": "array/array-element",
        "title": "Array.ArrayElement",
        "@description": "Get type of members of an array",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      }
    ],
    "Console": [
      {
        "filePath": "console/index",
        "moduleName": "Console",
        "moduleNameShort": "Console",
        "name": "error",
        "namespacedName": "Console.error",
        "slug": "console/error",
        "title": "Console.error",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "console/index",
        "moduleName": "Console",
        "moduleNameShort": "Console",
        "name": "info",
        "namespacedName": "Console.info",
        "slug": "console/info",
        "title": "Console.info",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "console/index",
        "moduleName": "Console",
        "moduleNameShort": "Console",
        "name": "log",
        "namespacedName": "Console.log",
        "slug": "console/log",
        "title": "Console.log",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "console/index",
        "moduleName": "Console",
        "moduleNameShort": "Console",
        "name": "warn",
        "namespacedName": "Console.warn",
        "slug": "console/warn",
        "title": "Console.warn",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "console/timer",
        "moduleName": "Console",
        "moduleNameShort": "Console",
        "name": "timer",
        "namespacedName": "Console.timer",
        "slug": "console/timer",
        "title": "Console.timer",
        "@description": "Create a timer that can be started, stopped, and logged to the console.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      }
    ],
    "Date": [
      {
        "filePath": "date/is-after",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isAfter",
        "namespacedName": "D.isAfter",
        "slug": "date/is-after",
        "title": "Date.isAfter",
        "@description": "Asserts that a value is a valid instance of `Date` whose value occurs after that of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-before",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isBefore",
        "namespacedName": "D.isBefore",
        "slug": "date/is-before",
        "title": "Date.isBefore",
        "@description": "Asserts that a value is a valid instance of `Date` whose value occurs before that of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-between",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateBetween",
        "namespacedName": "D.isDateBetween",
        "slug": "date/is-date-between",
        "title": "Date.isDateBetween",
        "@description": "Asserts that a value is an instance of `Date` occurring on or after `floor` and on or before `ceiling`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-in-month",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateInMonth",
        "namespacedName": "D.isDateInMonth",
        "slug": "date/is-date-in-month",
        "title": "Date.isDateInMonth",
        "@description": "Asserts that a value is an instance of `Date` occurring on the given month of the year, where January is `0` and\nDecember is `11`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-in-year",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateInYear",
        "namespacedName": "D.isDateInYear",
        "slug": "date/is-date-in-year",
        "title": "Date.isDateInYear",
        "@description": "Asserts that a value is an instance of `Date` occurring in the given year.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-day-of-month",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnDayOfMonth",
        "namespacedName": "D.isDateOnDayOfMonth",
        "slug": "date/is-date-on-day-of-month",
        "title": "Date.isDateOnDayOfMonth",
        "@description": "Asserts that a value is an instance of `Date` occurring on the given day of the month, where the first day of the\nmonth is `1` and last is `31`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-day-of-week",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnDayOfWeek",
        "namespacedName": "D.isDateOnDayOfWeek",
        "slug": "date/is-date-on-day-of-week",
        "title": "Date.isDateOnDayOfWeek",
        "@description": "Asserts that a value is an instance of `Date` occurring on the day of the week with the given index, where Sunday is\n`0` and Saturday is `6`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-or-after",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnOrAfter",
        "namespacedName": "D.isDateOnOrAfter",
        "slug": "date/is-date-on-or-after",
        "title": "Date.isDateOnOrAfter",
        "@description": "Asserts that a value is an instance of `Date` occurring on or after the exact date and time of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date-on-or-before",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDateOnOrBefore",
        "namespacedName": "D.isDateOnOrBefore",
        "slug": "date/is-date-on-or-before",
        "title": "Date.isDateOnOrBefore",
        "@description": "Asserts that a value is an instance of `Date` occurring on or before the exact date and time of another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Dates", "Guard"]
      },
      {
        "filePath": "date/is-date",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isDate",
        "namespacedName": "D.isDate",
        "slug": "date/is-date",
        "title": "Date.isDate",
        "@description": "Asserts that a value is an instance of `Date`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Dates", "Guard"]
      },
      {
        "filePath": "date/is-valid-date",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "ValidDate",
        "namespacedName": "D.ValidDate",
        "slug": "date/valid-date",
        "title": "Date.ValidDate",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "date/is-valid-date",
        "moduleName": "Date",
        "moduleNameShort": "D",
        "name": "isValidDate",
        "namespacedName": "D.isValidDate",
        "slug": "date/is-valid-date",
        "title": "Date.isValidDate",
        "@description": "Asserts that a value is an instance of `Date` whose internal value is valid. `Date` is little like `Promise` in that\nit is a container for a value. For example, `new Date('wut?')` is a valid `Date` which wraps a value that is not\nvalid.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Dates", "Guard"]
      }
    ],
    "Fn": [
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "Creates a function which pipes its input through a sequence of functions in left-to-right order.\n\nA higher-order function that takes any number of functions as its arguments and returns a new function that applies\neach function in sequence, passing the result of each function as the argument to the next function.\n\n## Example\n\nIn this example, we first define three functions: `addOne`, `double`, and `square`. We then use the `flow` function\nto create a new function `composedFn` that composes these three functions together. We can then call `composedFn`\nwith an argument to get the result of applying the composed functions in sequence.\n\nNote that the flow function applies the functions in left to right order, so the first function given as an argument\nis applied first.\n\n```ts\nimport { flow } from 'tightrope/fn/flow';\n\n// Define some functions to compose\nfunction addOne(n: number): number {\n  return n + 1;\n}\n\nfunction double(n: number): number {\n  return n * 2;\n}\n\nfunction square(n: number): number {\n  return n * n;\n}\n\n// Use flow to create a new function that composes the other functions\nconst composedFn = flow(addOne, double, square);\n\n// Call the composed function with an argument\nconst result = composedFn(3); // returns 64\n```",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Composition"]
      },
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/flow",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "flow",
        "namespacedName": "Fn.flow",
        "slug": "fn/flow",
        "title": "Fn.flow",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/with-safety",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "withSafety",
        "namespacedName": "Fn.withSafety",
        "slug": "fn/with-safety",
        "title": "Fn.withSafety",
        "@description": "Catch errors in user code in Result operators, and instead return `Err` instances.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "Return an `Ok` containing a deeply nested value from an object, or an `Err`.\n\nA curried function that takes two arguments: a string `path` and an `origin` object. It returns an `Ok` containing\nthe value at the specified path in the object, or an `Err` if the path does not exist.\n\n## Example\n\nIn this example, we first define an object `obj` that has a nested property `foo.bar` with a value of `42`. We then\nuse the `get` function to retrieve the value at this path in the object by passing the path and object as arguments.\nNote that we also specify the type of the expected value (`number` in this case) as a type argument to the `get`\nfunction.\n\n```ts\nimport { get } from 'tightrope/fn/get';\n\n// Define an object to query\nconst obj = {\n  foo: {\n    bar: 42,\n  },\n};\n\n// Use get to retrieve a value from the object\nconst result = get<number>('foo.bar', obj); // returns Ok(42)\n```\n\nThe `get` function works by splitting the `path` argument on the `.` character, then using the resulting array of\nproperty names to recursively access nested properties in the `origin` object. If any of the intermediate properties\ndo not exist or are not objects, the function returns `Err`.\n\nThe `get` function is implemented using the `curry` function, which allows us to partially apply the `path` argument\nand reuse the function with different `origin` objects.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Objects", "Read", "Result"]
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/get",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "get",
        "namespacedName": "Fn.get",
        "slug": "fn/get",
        "title": "Fn.get",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/identity",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "identity",
        "namespacedName": "Fn.identity",
        "slug": "fn/identity",
        "title": "Fn.identity",
        "@description": "A function that takes any value as its argument and returns the same value.\n\nIt is commonly used as a placeholder function in functional programming.\n\n## Example\n\nIn this example, we simply call the `identity` function with a value of `42` and assign the result to a variable\n`result`. Since `identity` simply returns its input value, the value of `result` is also `42`.\n\n```ts\nimport { identity } from 'tightrope/fn/identity';\n\n// Use identity to return a value\nconst value = 42;\nconst result = identity(value); // returns 42\n```\n\nThe `identity` function can be useful in many scenarios, such as when passing a function as an argument to another\nfunction that expects a function, but you don't need to perform any actual transformation on the input value.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Composition"]
      },
      {
        "filePath": "fn/is-async-function",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "isAsyncFunction",
        "namespacedName": "Fn.isAsyncFunction",
        "slug": "fn/is-async-function",
        "title": "Fn.isAsyncFunction",
        "@description": "Asserts that a value is a function using `async` and `await` syntax.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Async", "Functions", "Guard"]
      },
      {
        "filePath": "fn/is-function",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "isFunction",
        "namespacedName": "Fn.isFunction",
        "slug": "fn/is-function",
        "title": "Fn.isFunction",
        "@description": "Asserts that a value is a `Function`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Functions", "Guard"]
      },
      {
        "filePath": "fn/is-generator-function",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "isGeneratorFunction",
        "namespacedName": "Fn.isGeneratorFunction",
        "slug": "fn/is-generator-function",
        "title": "Fn.isGeneratorFunction",
        "@description": "Asserts that a value is a `Function` using `yield` syntax.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Functions", "Generator", "Guard"]
      },
      {
        "filePath": "fn/no-op",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "noOp",
        "namespacedName": "Fn.noOp",
        "slug": "fn/no-op",
        "title": "Fn.noOp",
        "@description": "A function that does nothing.\n\nIt is commonly used as a placeholder function in cases where a function is required but there is no action that needs\nto be performed\n\nThe `noOp` function can be useful in situations where you need to pass a function to another function, but you don't\nactually need the function to perform any action. This can be useful for example in tests, or when defining default\nvalues for functions that are not meant to be called.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Composition"]
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/pipe",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "pipe",
        "namespacedName": "Fn.pipe",
        "slug": "fn/pipe",
        "title": "Fn.pipe",
        "@description": "...",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/tap",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "tap",
        "namespacedName": "Fn.tap",
        "slug": "fn/tap",
        "title": "Fn.tap",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Effect"]
      },
      {
        "filePath": "fn/throws-any-error",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "throwsAnyError",
        "namespacedName": "Fn.throwsAnyError",
        "slug": "fn/throws-any-error",
        "title": "Fn.throwsAnyError",
        "@description": "Asserts that a value is a `Function` which throws when invoked.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Functions", "Guard"]
      },
      {
        "filePath": "fn/throws-error-of-type",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "throwsErrorOfType",
        "namespacedName": "Fn.throwsErrorOfType",
        "slug": "fn/throws-error-of-type",
        "title": "Fn.throwsErrorOfType",
        "@description": "Asserts that a value is a `Function` which throws an `Error` of the given type.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Functions", "Guard"]
      },
      {
        "filePath": "fn/index",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "LazyValue",
        "namespacedName": "Fn.LazyValue",
        "slug": "fn/lazy-value",
        "title": "Fn.LazyValue",
        "@description": "A function with no arguments, returning a value",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/index",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "AnyFn",
        "namespacedName": "Fn.AnyFn",
        "slug": "fn/any-fn",
        "title": "Fn.AnyFn",
        "@description": "A function of any kind",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/index",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "AnyFnAsync",
        "namespacedName": "Fn.AnyFnAsync",
        "slug": "fn/any-fn-async",
        "title": "Fn.AnyFnAsync",
        "@description": "An async function of any kind",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "fn/index",
        "moduleName": "Fn",
        "moduleNameShort": "Fn",
        "name": "Reducer",
        "namespacedName": "Fn.Reducer",
        "slug": "fn/reducer",
        "title": "Fn.Reducer",
        "@description": "A Reducer function",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      }
    ],
    "Gen": [
      {
        "filePath": "gen/chunk",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "chunk",
        "namespacedName": "Gen.chunk",
        "slug": "gen/chunk",
        "title": "Gen.chunk",
        "@description": "...",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "gen/filter",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "filter",
        "namespacedName": "Gen.filter",
        "slug": "gen/filter",
        "title": "Gen.filter",
        "@description": "Only `yield` each value which passes the predicate.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator"]
      },
      {
        "filePath": "gen/map",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "map",
        "namespacedName": "Gen.map",
        "slug": "gen/map",
        "title": "Gen.map",
        "@description": "Transform and `yield` each value produced by a generator.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator", "Transform"]
      },
      {
        "filePath": "gen/range",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "range",
        "namespacedName": "Gen.range",
        "slug": "gen/range",
        "title": "Gen.range",
        "@description": "Create a generator which will `yield` a sequence of numbers.\n\nThe `range` generator works by starting with the `floor` value and then yielding each subsequent integer value until\nthe `ceiling` value is reached. The generator continues to yield values until it is exhausted, and can be used to\ngenerate any range of integers, including negative ranges and ranges with non-integer steps.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Data Source", "Generator"]
      },
      {
        "filePath": "gen/reduce-each",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "reduceEach",
        "namespacedName": "Gen.reduceEach",
        "slug": "gen/reduce-each",
        "title": "Gen.reduceEach",
        "@description": "Reduce and `yield` each value produced by a generator.\n\nA higher-order function that takes a `reducer` function as its argument and returns a new function that can be used\nto reduce the values generated by a generator.\n\nThe returned function takes a generator as its argument and returns a new generator that yields the partial results\nof the reduction operation. It works by applying the `reducer` function to each pair of values generated by the input\ngenerator, and yielding the partial results of the reduction operation.\n\nThe `reducer` function takes two arguments: an `accumulator` value that represents the current state of the reduction\noperation, and a `value` generated by the input generator. The reducer function applies some operation to the\naccumulator value and the input value, and returns a new accumulator value that represents the updated state of the\nreduction operation.\n\nIn summary, `reduceEach` is a powerful tool for working with generators in JavaScript and TypeScript. It can be used\nto perform complex reduction operations on large or complex data sets, and can help us write more efficient and\nfocused code.\n\n## Example\n\nIn this example, we use the `range` function to generate a sequence of numbers from `1` to `10`, the `map` function\nto double each value in the sequence, and the `take` function to select the first `5` values in the sequence.\nFinally, we apply the `reduceEach` function with the `sum` function as its argument to generate the partial sums of\nthe remaining values in the sequence.\n\nWe then use a `for...of` loop to iterate over the partial sums generated by the `partialSums` generator, and log them\nto the console.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { map } from 'tightrope/gen/map';\nimport { range } from 'tightrope/gen/range';\nimport { reduceEach } from 'tightrope/gen/reduce-each';\nimport { take } from 'tightrope/gen/take';\nimport { multiply } from 'tightrope/number/multiply';\n\nfunction sum(acc: number, curr: number): number {\n  return acc + curr;\n}\n\nconst partialSums = pipe(range(1, 10), map(multiply(2)), take(5), reduceEach(sum));\n\nfor (const value of partialSums) {\n  console.log(value);\n  //  6\n  // 12\n  // 20\n  // 30\n}\n```\n\n## Use Cases\n\nCommon use cases for `reduceEach`:\n\n1. **Summing values**: calculate the sum of a series of numbers generated by a generator.\n2. **Counting values**: count the number of values generated by a generator that satisfy a given condition.\n3. **Finding minimum or maximum values**: find the minimum or maximum value generated by a generator.\n4. **Concatenating strings**: concatenate a series of strings generated by a generator.\n5. **Grouping values**: group a series of values generated by a generator into a nested structure, such as an object or\n   an array.\n6. **Filtering values**: filter the values generated by a generator based on a given condition.\n7. **Computing averages**: compute the average of a series of numbers generated by a generator.\n8. **Building up an object**: build up an object by accumulating properties and values generated by a generator.\n\nIn general, `reduceEach` can be used in any situation where we need to perform some kind of reduction operation on a\nseries of values generated by a generator. Its flexibility and power make it a versatile tool for working with\ngenerators in JavaScript and TypeScript.\n\n## `reduce` or `reduceEach`?\n\n`reduce` and `reduceEach` are very similar functions, and it can be difficult to decide which one to use in a given\nsituation. Here are some guidelines to help you decide:\n\n1. Use `reduce` if you want to perform a reduction operation on the entire sequence of values generated by a generator,\n   and you only need to return a single value.\n2. Use `reduceEach` if you want to perform a reduction operation on each individual value generated by a generator, and\n   you need to return a sequence of partial results.\n\nIn general, the choice between `reduce` and `reduceEach` will depend on the specific requirements of your problem, as\nwell as the nature of the data you are working with.\n\n- If you need to perform a simple reduction operation on a single sequence of values, `reduce` may be the better\n  choice.\n- If you need to perform a more complex reduction operation that involves multiple sequences of values, or if you need\n  to return a sequence of partial results, `reduceEach` may be the better choice.",
        "@param": [],
        "@returns": "",
        "@see": ["https://jamiemason.github.io/tightrope/api/gen/reduce"],
        "@tags": ["Generator", "Transform", "Transform Value"]
      },
      {
        "filePath": "gen/reduce",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "reduce",
        "namespacedName": "Gen.reduce",
        "slug": "gen/reduce",
        "title": "Gen.reduce",
        "@description": "Reduce every value produced by a generator and `yield` the final result.\n\nA higher-order function that takes a reducer function as its argument and returns a new function that can be used to\nreduce the values generated by a generator to a single value.\n\nThe returned function takes a generator as its argument and returns a new generator that yields the final result of\nthe reduction operation.\n\nThe `reduce` function works by using the `reduceEach` function to generate a sequence of partial results for the\nreduction operation, and then returning the final result of the reduction operation.\n\nThe `reducer` function takes two arguments: an `accumulator` value that represents the current state of the reduction\noperation, and a `value` generated by the input generator. The reducer function applies some operation to the\naccumulator value and the input value, and returns a new accumulator value that represents the updated state of the\nreduction operation.\n\nIf an initial value is provided, it will be used as the initial state of the reduction operation. If no initial value\nis provided, the first value generated by the input generator will be used as the initial state.\n\n## Example\n\nIn this example, we use the pipe function to create a pipeline of functions that generate a series of numbers, double\neach number using `multiply(2)`, and then calculate the sum of the resulting values.\n\n1. We define a `sum` function that takes two numbers as input and returns their sum.\n2. We use the `range` function to generate a series of numbers from `1` to `10`.\n3. We use the `map` function with `multiply(2)` to double each number in the series.\n4. We use the `reduce` function to calculate the sum of the resulting values.\n5. We use a `for...of` loop to iterate over the values generated by `doubledSum`, which will be one value, the final\n   total, which should be `110`.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { map } from 'tightrope/gen/map';\nimport { range } from 'tightrope/gen/range';\nimport { reduce } from 'tightrope/gen/reduce';\nimport { multiply } from 'tightrope/number/multiply';\n\nfunction sum(acc: number, curr: number): number {\n  return acc + curr;\n}\n\nconst doubledSum = pipe(range(1, 10), map(multiply(2)), reduce(sum));\n\nfor (const value of doubledSum) {\n  console.log(value); // 110\n}\n```\n\n## `reduce` or `reduceEach`?\n\n`reduce` and `reduceEach` are very similar functions, and it can be difficult to decide which one to use in a given\nsituation. Here are some guidelines to help you decide:\n\n1. Use `reduce` if you want to perform a reduction operation on the entire sequence of values generated by a generator,\n   and you only need to return a single value.\n2. Use `reduceEach` if you want to perform a reduction operation on each individual value generated by a generator, and\n   you need to return a sequence of partial results.\n\nIn general, the choice between `reduce` and `reduceEach` will depend on the specific requirements of your problem, as\nwell as the nature of the data you are working with.\n\n- If you need to perform a simple reduction operation on a single sequence of values, `reduce` may be the better\n  choice.\n- If you need to perform a more complex reduction operation that involves multiple sequences of values, or if you need\n  to return a sequence of partial results, `reduceEach` may be the better choice.",
        "@param": [],
        "@returns": "",
        "@see": ["https://jamiemason.github.io/tightrope/api/gen/reduce-each"],
        "@tags": ["Generator", "Transform", "Transform Value"]
      },
      {
        "filePath": "gen/skip",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "skip",
        "namespacedName": "Gen.skip",
        "slug": "gen/skip",
        "title": "Gen.skip",
        "@description": "Do not `yield` values until after first ignoring `count` values.\n\nA higher-order function that takes a number `num` as its argument and returns a new function that can be used to skip\nthe first `num` values generated by a generator.\n\nThe returned function takes a generator as its argument and returns a new generator that yields all the values\ngenerated by the input generator except for the first `num` values.\n\n## Example\n\nHere's an example of how to use the `skip` function to skip the first two values generated by a `range` generator:\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { range } from 'tightrope/gen/range';\nimport { skip } from 'tightrope/gen/skip';\n\nconst gen = pipe(range(1, 10), skip(2));\n\nfor (const value of gen) {\n  console.log(value); // 3, 4, 5, 6, 7, 8, 9, 10\n}\n```\n\n## Use Cases\n\nCommon use cases for the `skip` function:\n\n1. Skipping the first `n` items in a sequence: You may need to skip the first `n` items in a sequence of data, either\n   because they are not relevant to your use case or because you have already processed them.\n2. Paginating data: If you are working with large datasets, you may need to paginate the data to improve performance.\n   The `skip` function can be used to skip the first `n` items in each page of data.\n3. Splitting data into batches: If you are processing data in batches, you may need to skip the first `n` items in each\n   batch to avoid processing duplicate data.\n4. Skipping headers or footers in a file: If you are processing a file with a header or footer, you may need to skip\n   those lines before processing the rest of the file.\n\nOverall, the skip function is a useful tool for skipping over irrelevant or already-processed data in a sequence, and\ncan be used in a variety of contexts to improve the efficiency and readability of your code.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator"]
      },
      {
        "filePath": "gen/split",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "split",
        "namespacedName": "Gen.split",
        "slug": "gen/split",
        "title": "Gen.split",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator", "Transformer"]
      },
      {
        "filePath": "gen/take-last",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "takeLast",
        "namespacedName": "Gen.takeLast",
        "slug": "gen/take-last",
        "title": "Gen.takeLast",
        "@description": "Consume a generator and `yield` only the final result.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator"]
      },
      {
        "filePath": "gen/take",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "take",
        "namespacedName": "Gen.take",
        "slug": "gen/take",
        "title": "Gen.take",
        "@description": "Do not `yield` values after `count` values have been yielded.\n\nA higher-order function that takes a number amount as its argument and returns a new function that can be used to\ntake the first amount values generated by a generator.\n\nThe returned function takes a generator as its argument and returns a new generator that yields at most the first\namount values generated by the input generator.\n\n## Example\n\nHere's an example of how to use the `take` function to take the first three values generated by a range generator:\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { range } from 'tightrope/gen/range';\nimport { take } from 'tightrope/gen/take';\n\nconst gen = pipe(range(1, 10), take(3));\n\nfor (const value of gen) {\n  console.log(value); // 1, 2, 3\n}\n```\n\nIn this example, we use the `pipe` function to create a new generator that takes the first three values generated by\nthe `range` generator.\n\nWe create a new generator `gen` that is the result of applying the `pipe` function to the `range` generator.\n\nWe use a `for...of` loop to iterate over the values generated by the `gen` generator and log them to the console.\n\nThe output of the code should be `1, 2, 3`.\n\nIn summary, the `take` function is a useful tool for limiting the number of values generated by a generator. By using\nit in combination with other functions from tightrope, we can create powerful and flexible pipelines that help us\nwrite more efficient and focused code.\n\n## Use Cases\n\nHere are some common use cases for the `take` function:\n\n1. Limiting the size of data: You may need to limit the size of a dataset to improve performance or prevent memory\n   issues. The `take` function can be used to limit the number of items processed at any one time.\n2. Extracting a subset of data: If you are working with a large dataset, you may need to extract a subset of the data\n   that meets certain criteria. The `take` function can be used to extract the first n items that meet your\n   criteria.\n3. Creating a sample: If you are working with a large dataset and want to create a smaller sample for testing or\n   exploration, the `take` function can be used to extract a random or fixed number of items from the dataset.\n\nOverall, the `take` function is a versatile tool that can be used in a variety of contexts to limit the size of data\nor extract subsets of data from a larger dataset.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Generator"]
      },
      {
        "filePath": "gen/index",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "Gen",
        "namespacedName": "Gen.Gen",
        "slug": "gen/gen",
        "title": "Gen.Gen",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "gen/index",
        "moduleName": "Gen",
        "moduleNameShort": "Gen",
        "name": "Iter",
        "namespacedName": "Gen.Iter",
        "slug": "gen/iter",
        "title": "Gen.Iter",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      }
    ],
    "Guard": [
      {
        "filePath": "guard/has-property",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "hasProperty",
        "namespacedName": "Guard.hasProperty",
        "slug": "guard/has-property",
        "title": "Guard.hasProperty",
        "@description": "Returns true if a value has a property of the given name, even if the value of that property is `undefined`.\n\nThis assertion describes the shape of the given value. For example, value.prop is `undefined` in both of the\nfollowing scenarios, but `{ prop: undefined }` and `{ }` do not have the same shape.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      },
      {
        "filePath": "guard/has-type",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "hasType",
        "namespacedName": "Guard.hasType",
        "slug": "guard/has-type",
        "title": "Guard.hasType",
        "@description": "Return true if `value` is an instance of a class with the given `name`.\n\n## Examples\n\n```ts\nconst isString = hasType('String');\nisString('hello'); // true\nisString(new String('hello')); // true\nisString(123); // false\n\nconst isArray = hasType('Array');\nisArray([1, 2, 3]); // true\nisArray('hello'); // false\n\nconst isFunction = hasType('Function');\nisFunction(()=> {})); // true\nisFunction('hello'); // false\n\nclass Person {\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n}\n\nconst isPerson = hasType('Person');\nisPerson(new Person('Alice', 25)); // true\nisPerson({ name: 'Bob', age: 30 }); // false\n```\n\n## Use Cases\n\n- Validating user input in a web application to ensure that it is of the expected type.\n- Checking the type of data returned from an external API or data source to ensure it conforms to your expectations.\n- Type checking and casting values in a custom function or utility module.\n- Testing or debugging code by verifying that a value has the expected type before continuing with further processing.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "guard/is-asymmetric-match",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isAsymmetricMatch",
        "namespacedName": "Guard.isAsymmetricMatch",
        "slug": "guard/is-asymmetric-match",
        "title": "Guard.isAsymmetricMatch",
        "@description": "Does the given value match the given asymmetric matcher",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "guard/is-asymmetric-matcher",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "AnyAsymmetricMatcher",
        "namespacedName": "Guard.AnyAsymmetricMatcher",
        "slug": "guard/any-asymmetric-matcher",
        "title": "Guard.AnyAsymmetricMatcher",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "guard/is-asymmetric-matcher",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "AsymmetricMatcher",
        "namespacedName": "Guard.AsymmetricMatcher",
        "slug": "guard/asymmetric-matcher",
        "title": "Guard.AsymmetricMatcher",
        "@description": "A Jasmine-like asymmetric matcher",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "guard/is-asymmetric-matcher",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "AsymmetricMatcherType",
        "namespacedName": "Guard.AsymmetricMatcherType",
        "slug": "guard/asymmetric-matcher-type",
        "title": "Guard.AsymmetricMatcherType",
        "@description": "Get type of a Jasmine-like asymmetric matcher",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "guard/is-asymmetric-matcher",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isAsymmetricMatcher",
        "namespacedName": "Guard.isAsymmetricMatcher",
        "slug": "guard/is-asymmetric-matcher",
        "title": "Guard.isAsymmetricMatcher",
        "@description": "...",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "guard/is-boolean",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isBoolean",
        "namespacedName": "Guard.isBoolean",
        "slug": "guard/is-boolean",
        "title": "Guard.isBoolean",
        "@description": "Asserts that a value is `true`, `false`, `new Boolean(true)`, or `new Boolean(false)`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Booleans", "Guard"]
      },
      {
        "filePath": "guard/is-false",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isFalse",
        "namespacedName": "Guard.isFalse",
        "slug": "guard/is-false",
        "title": "Guard.isFalse",
        "@description": "Asserts that a value is `false` or `new Boolean(false)`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Booleans", "Guard"]
      },
      {
        "filePath": "guard/is-nil",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "Nil",
        "namespacedName": "Guard.Nil",
        "slug": "guard/nil",
        "title": "Guard.Nil",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "guard/is-nil",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isNil",
        "namespacedName": "Guard.isNil",
        "slug": "guard/is-nil",
        "title": "Guard.isNil",
        "@description": "Asserts that a value is `null` or `undefined`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "guard/is-primitive",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "Primitive",
        "namespacedName": "Guard.Primitive",
        "slug": "guard/primitive",
        "title": "Guard.Primitive",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "guard/is-primitive",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isPrimitive",
        "namespacedName": "Guard.isPrimitive",
        "slug": "guard/is-primitive",
        "title": "Guard.isPrimitive",
        "@description": "Return true if value is `null`, `undefined`, `number`, `string`, or `boolean`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Primitives"]
      },
      {
        "filePath": "guard/is-readable",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isReadable",
        "namespacedName": "Guard.isReadable",
        "slug": "guard/is-readable",
        "title": "Guard.isReadable",
        "@description": "Asserts that a value is safe to attempt to read property values from.\n\nOnly `null` and `undefined` will error if you try to read a property on them using dot notation.\n\n## Example",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Arrays", "Guard", "Objects"]
      },
      {
        "filePath": "guard/is-reg-exp",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isRegExp",
        "namespacedName": "Guard.isRegExp",
        "slug": "guard/is-reg-exp",
        "title": "Guard.isRegExp",
        "@description": "Asserts that a value is a `RegExp`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Regexp"]
      },
      {
        "filePath": "guard/is-true",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isTrue",
        "namespacedName": "Guard.isTrue",
        "slug": "guard/is-true",
        "title": "Guard.isTrue",
        "@description": "Asserts that a value is `true` or `new Boolean(true)`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Booleans", "Guard"]
      },
      {
        "filePath": "guard/is-truthy",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "Truthy",
        "namespacedName": "Guard.Truthy",
        "slug": "guard/truthy",
        "title": "Guard.Truthy",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "guard/is-truthy",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isTruthy",
        "namespacedName": "Guard.isTruthy",
        "slug": "guard/is-truthy",
        "title": "Guard.isTruthy",
        "@description": "Asserts that a value is not falsy.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "guard/is-undefined",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "isUndefined",
        "namespacedName": "Guard.isUndefined",
        "slug": "guard/is-undefined",
        "title": "Guard.isUndefined",
        "@description": "Asserts that a value is `undefined`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "guard/is",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "is",
        "namespacedName": "Guard.is",
        "slug": "guard/is",
        "title": "Guard.is",
        "@description": "Returns whether both values are referentially equal, ie. `a === b`. This will be the case when both values are\nprimitives (undefined, number, null, string, or boolean) or they are objects which both point to the same address in\nmemory.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard"]
      },
      {
        "filePath": "guard/index",
        "moduleName": "Guard",
        "moduleNameShort": "Guard",
        "name": "Guard",
        "namespacedName": "Guard.Guard",
        "slug": "guard/guard",
        "title": "Guard.Guard",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      }
    ],
    "Number": [
      {
        "filePath": "number/clamp",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "clamp",
        "namespacedName": "N.clamp",
        "slug": "number/clamp",
        "title": "Number.clamp",
        "@description": "Returns a number within the specified range, if the original value is not already within that range.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/divide",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "divide",
        "namespacedName": "N.divide",
        "slug": "number/divide",
        "title": "Number.divide",
        "@description": "Divide one number by another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/is-calculable",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isCalculable",
        "namespacedName": "N.isCalculable",
        "slug": "number/is-calculable",
        "title": "Number.isCalculable",
        "@description": "Assert value can be used in Mathemetic calculations despite not being a `Number`, for example `'1' * '2' === 2`\nwhereas `'wut?' * 2 === NaN`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers", "Strings"]
      },
      {
        "filePath": "number/is-decimal-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isDecimalNumber",
        "namespacedName": "N.isDecimalNumber",
        "slug": "number/is-decimal-number",
        "title": "Number.isDecimalNumber",
        "@description": "Asserts that a value is a `Number` with positive decimal places.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-divisible-by",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isDivisibleBy",
        "namespacedName": "N.isDivisibleBy",
        "slug": "number/is-divisible-by",
        "title": "Number.isDivisibleBy",
        "@description": "Asserts that a value is a `Number` which results in a whole number when divided by another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-even-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isEvenNumber",
        "namespacedName": "N.isEvenNumber",
        "slug": "number/is-even-number",
        "title": "Number.isEvenNumber",
        "@description": "Asserts that a value is an even `Number`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-greater-than-or-equal-to",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isGreaterThanOrEqualTo",
        "namespacedName": "N.isGreaterThanOrEqualTo",
        "slug": "number/is-greater-than-or-equal-to",
        "title": "Number.isGreaterThanOrEqualTo",
        "@description": "Asserts that a value is greater than or equal to other.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-greater-than",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isGreaterThan",
        "namespacedName": "N.isGreaterThan",
        "slug": "number/is-greater-than",
        "title": "Number.isGreaterThan",
        "@description": "Asserts that a value is greater than another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-js-nan",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "JsNaN",
        "namespacedName": "N.JsNaN",
        "slug": "number/js-na-n",
        "title": "Number.JsNaN",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "number/is-js-nan",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isJsNaN",
        "namespacedName": "N.isJsNaN",
        "slug": "number/is-js-na-n",
        "title": "Number.isJsNaN",
        "@description": "Asserts that a value is `NaN`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-less-than-or-equal-to",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isLessThanOrEqualTo",
        "namespacedName": "N.isLessThanOrEqualTo",
        "slug": "number/is-less-than-or-equal-to",
        "title": "Number.isLessThanOrEqualTo",
        "@description": "Asserts that a value is less than or equal to another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-less-than",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isLessThan",
        "namespacedName": "N.isLessThan",
        "slug": "number/is-less-than",
        "title": "Number.isLessThan",
        "@description": "Asserts that a value is less than another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-near",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isNear",
        "namespacedName": "N.isNear",
        "slug": "number/is-near",
        "title": "Number.isNear",
        "@description": "Asserts that a value is a number within the given acceptable distance from another.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-negative-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isNegativeNumber",
        "namespacedName": "N.isNegativeNumber",
        "slug": "number/is-negative-number",
        "title": "Number.isNegativeNumber",
        "@description": "Asserts that a value is a `Number` less than 0.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "Numbers"]
      },
      {
        "filePath": "number/is-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isNumber",
        "namespacedName": "N.isNumber",
        "slug": "number/is-number",
        "title": "Number.isNumber",
        "@description": "Asserts that a value is a valid `Number` or `new Number()` and not `NaN`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-odd-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "OddNumber",
        "namespacedName": "N.OddNumber",
        "slug": "number/odd-number",
        "title": "Number.OddNumber",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "number/is-odd-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isOddNumber",
        "namespacedName": "N.isOddNumber",
        "slug": "number/is-odd-number",
        "title": "Number.isOddNumber",
        "@description": "Asserts that a value is an odd `Number`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-positive-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "PositiveNumber",
        "namespacedName": "N.PositiveNumber",
        "slug": "number/positive-number",
        "title": "Number.PositiveNumber",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "number/is-positive-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isPositiveNumber",
        "namespacedName": "N.isPositiveNumber",
        "slug": "number/is-positive-number",
        "title": "Number.isPositiveNumber",
        "@description": "Asserts that a value is a `Number` greater than 0.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-whole-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "WholeNumber",
        "namespacedName": "N.WholeNumber",
        "slug": "number/whole-number",
        "title": "Number.WholeNumber",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "number/is-whole-number",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isWholeNumber",
        "namespacedName": "N.isWholeNumber",
        "slug": "number/is-whole-number",
        "title": "Number.isWholeNumber",
        "@description": "Asserts that a value is a `Number` with no positive decimal places, both `10`\nand `10.0` are considered whole numbers.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/is-within-range",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "isWithinRange",
        "namespacedName": "N.isWithinRange",
        "slug": "number/is-within-range",
        "title": "Number.isWithinRange",
        "@description": "Asserts that a value is a `Number` which is both greater than or equal to `floor` and less than or equal to\n`ceiling`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Numbers"]
      },
      {
        "filePath": "number/multiply",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "multiply",
        "namespacedName": "N.multiply",
        "slug": "number/multiply",
        "title": "Number.multiply",
        "@description": "Multiply two numbers",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/square",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "square",
        "namespacedName": "N.square",
        "slug": "number/square",
        "title": "Number.square",
        "@description": "Multiply a number by itself",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/subtract",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "subtract",
        "namespacedName": "N.subtract",
        "slug": "number/subtract",
        "title": "Number.subtract",
        "@description": "Subtract one number from another",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      },
      {
        "filePath": "number/sum",
        "moduleName": "Number",
        "moduleNameShort": "N",
        "name": "sum",
        "namespacedName": "N.sum",
        "slug": "number/sum",
        "title": "Number.sum",
        "@description": "Return the sum of two numbers",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Numbers", "Transform", "Transform Value"]
      }
    ],
    "Option": [
      {
        "filePath": "option/and-then",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "andThen",
        "namespacedName": "O.andThen",
        "slug": "option/and-then",
        "title": "Option.andThen",
        "@description": "Applies a mapping function to the value of an `Option`, returning a new `Option`. If the input `Option` is `None`,\nthe function immediately returns `None` without calling the mapping function.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/and",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "and",
        "namespacedName": "O.and",
        "slug": "option/and",
        "title": "Option.and",
        "@description": "Combines two `Option`s, returning the second `Option` if both are `Some`, and `None` otherwise.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/expect",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "expect",
        "namespacedName": "O.expect",
        "slug": "option/expect",
        "title": "Option.expect",
        "@description": "Unwraps an `Option` value, returning the underlying value if it is `Some`. If the value is `None`, this function\npanics with the provided error message.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "option/filter",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "filter",
        "namespacedName": "O.filter",
        "slug": "option/filter",
        "title": "Option.filter",
        "@description": "Calls the provided predicate function on the contained value I if the `Option` is `Some(I)`, and returns `Some(I)` if\nthe function returns `true`; otherwise, returns `None`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Filter", "Option", "Right Biased"]
      },
      {
        "filePath": "option/flatten",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "flatten",
        "namespacedName": "O.flatten",
        "slug": "option/flatten",
        "title": "Option.flatten",
        "@description": "Removes one level of nesting from an `Option<Option<T>>`",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Transform", "Transform Option"]
      },
      {
        "filePath": "option/from-guard",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "fromGuard",
        "namespacedName": "O.fromGuard",
        "slug": "option/from-guard",
        "title": "Option.fromGuard",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Option", "Wrap"]
      },
      {
        "filePath": "option/is-none",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "isNone",
        "namespacedName": "O.isNone",
        "slug": "option/is-none",
        "title": "Option.isNone",
        "@description": "Returns true if the given value is a `None` instance, false otherwise.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Errors", "Guard", "Option"]
      },
      {
        "filePath": "option/is-some",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "isSome",
        "namespacedName": "O.isSome",
        "slug": "option/is-some",
        "title": "Option.isSome",
        "@description": "Determine whether a value is an instance of `Some`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Option"]
      },
      {
        "filePath": "option/map-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOrElse",
        "namespacedName": "O.mapOrElse",
        "slug": "option/map-or-else",
        "title": "Option.mapOrElse",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the result of evaluating the provided\nfallback function if the `Option` is `None`",
        "@param": [
          {
            "name": "mapFn",
            "description": "The function to apply to the contained value of `Some`."
          },
          {
            "name": "defaultFn",
            "description": "The fallback function to evaluate if the `Option` is `None`."
          },
          {
            "name": "opt",
            "description": "The `Option` to apply the provided function to."
          }
        ],
        "@returns": "The result of applying the provided function to the contained value of `Some`, or the result of evaluating\n  the fallback function if the `Option` is `None`.",
        "@see": [],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/map-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "mapOr",
        "namespacedName": "O.mapOr",
        "slug": "option/map-or",
        "title": "Option.mapOr",
        "@description": "Applies the provided function to the contained value of `Some`, or returns the provided default value if the `Option`\nis `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Option",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/map",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "map",
        "namespacedName": "O.map",
        "slug": "option/map",
        "title": "Option.map",
        "@description": "Transforms `Option<T>` to `Option<U>` by applying the provided function to the contained value of `Some` and leaving\n`None` values unchanged.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Transform", "Transform Value"]
      },
      {
        "filePath": "option/match",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "match",
        "namespacedName": "O.match",
        "slug": "option/match",
        "title": "Option.match",
        "@description": "Extract value from both a `Some` or a `None`.\n\nThe match function takes an object containing two functions: `Some` and `None`, which are used to handle the values\nof the `Some` and `None` variants of an `Option` object. It then returns a new function that takes an `Option` object\nand returns the result of applying either the `Some` or `None` function to the value inside the `Option`, depending\non which variant it contains.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Unwrap"]
      },
      {
        "filePath": "option/ok-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "okOrElse",
        "namespacedName": "O.okOrElse",
        "slug": "option/ok-or-else",
        "title": "Option.okOrElse",
        "@description": "Transforms an `Option` to a `Result`. A `Some(v)` becomes `Ok(v)` and `None` becomes `Err` using the provided\nfunction.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else"
        ],
        "@tags": ["Option", "Result", "Transform"]
      },
      {
        "filePath": "option/ok-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "okOr",
        "namespacedName": "O.okOr",
        "slug": "option/ok-or",
        "title": "Option.okOr",
        "@description": "Transforms `Some(v)` to `Ok(v)`, and `None` to a value of `Err` using the provided default error value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or"
        ],
        "@tags": [
          "Option",
          "Result",
          "Right Biased",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "Option",
        "namespacedName": "O.Option",
        "slug": "option/option",
        "title": "Option.Option",
        "@description": "`Option` is a type that represents either a value (`Some`) or the absence of a value (`None`).\n\n`Option<T>` is the type used for expressing the possibility of the absence of a value. It is an enum with the\nvariants, `Some(T)`, representing the presence of a value, and `None`, representing the absence of a value.\n\n:::info\n\n`Option` allows you to construct a pipeline of commands that handle both the `Some` and `None` variants. This is\nuseful for handling cases where a value might be missing or undefined, and branching based on whether the previous\noperation returned a value or not.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `Option` is sometimes referred to as `Maybe`.\n- `Some` is sometimes referred to as `Just` or \"the value path\".\n- `None` is sometimes referred to as `Nothing` or \"the empty path\".\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Type"]
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "Option",
        "namespacedName": "O.Option",
        "slug": "option/option",
        "title": "Option.Option",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "Some",
        "namespacedName": "O.Some",
        "slug": "option/some",
        "title": "Option.Some",
        "@description": "Represent a value in the `Option` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Some } from 'tightrope/option';\n\nconst value = Some.create('Hello, world!');\n```\n\nYou can check if a value is a `Some` instance by using the `isSome` function.\n\n```ts\nimport { isSome } from 'tightrope/option/is-some';\n\nconst value = Some.create('Hello, world!');\nconsole.log(isSome(value)); // true\nconsole.log(isSome('foo')); // false\nconsole.log(isSome('Hello, world! but this is not inside a Some')); // false\n```\n\n`Some` instances are usually returned from functions that might not return a value, and are combined with `None`\ninstances using the `Option` type.\n\n## Use Cases\n\nCreating a `Some` instance directly is useful when you want to represent a value in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom value handler for your application and you need to represent a specific value\ncondition, you can create a `Some` instance directly with the value you want to use. This can give you more control\nover the specific values that your application can encounter and how they are handled.\n\nAnother use case for creating a `Some` instance directly is when you are writing tests for your application and you\nwant to simulate a value condition. By creating a `Some` instance directly with a specific value, you can test how\nyour application handles that value condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Option", "Wrap"]
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "None",
        "namespacedName": "O.None",
        "slug": "option/none",
        "title": "Option.None",
        "@description": "Represent an absence of value in the `Option` type.\n\n## Example\n\nYou can check if a value is a `None` instance by using the `isNone` function.\n\n```ts\nimport { isNone } from 'tightrope/option/is-none';\n\nconsole.log(isNone(none)); // true\nconsole.log(isNone('foo')); // false\nconsole.log(isNone(null)); // false\n```\n\n`None` instances are usually returned from functions that might not return a value, and are combined with `Some`\ninstances using the `Option` type.\n\n## Use Cases\n\nReferencing the `None` instance is useful when you want to represent an absence of value in your program without\nhaving to go through a pipeline or helper method that might not always be available or suitable for your specific use\ncase.\n\nFor example, if you're writing a custom value handler for your application and you need to represent a specific\nabsence of value condition, you can reference the `None` instance. This can give you more control over the specific\nvalue absences that your application can encounter and how they are handled.\n\nAnother use case for referencing the `None` instance is when you are writing tests for your application and you want\nto simulate a value absence condition. By referencing the `None` instance, you can test how your application handles\nthat value absence condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Errors", "Option", "Wrap"]
      },
      {
        "filePath": "option/option",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "none",
        "namespacedName": "O.none",
        "slug": "option/none",
        "title": "Option.none",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "option/or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "orElse",
        "namespacedName": "O.orElse",
        "slug": "option/or-else",
        "title": "Option.orElse",
        "@description": "Transforms `Some(v)` to `Some(v)`, and `None` to a new `Option` using the provided function.\n\nThe `orElse` function takes a function `orElseFn` and an `Option` object as its arguments. If the input `Option`\nobject is a `Some`, it returns the same `Some` object. If the input `Option` object is a `None`, it calls the\nprovided `orElseFn` function and returns the resulting `Option`.\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { Option } from 'tightrope/option';\nimport { none } from 'tightrope/option';\nimport { Some } from 'tightrope/option';\nimport { orElse } from 'tightrope/option/or-else';\n\nconst defaultOption = () => Some.create(42);\n\nconst option1 = pipe(Some.create(5), orElse(defaultOption));\n// Output: Some(5)\n\nconst option2 = pipe(none, orElse(defaultOption));\n// Output: Some(42)\n```\n\n## Use Cases\n\nThe `orElse` function is useful when you want to provide a fallback `Option` object in case the input `Option` is a\n`None`. It allows you to handle both cases of `Some` and `None` in a more flexible way.\n\nSome use cases of `orElse` include:\n\n- Providing a default value for cases when a value is not found in a collection or when an operation fails.\n- Mapping over a collection and returning the first element that meets a specific criteria. If no element is found,\n  returning a default `Option`.\n- Handling errors in a way that gracefully falls back to a default value, such as when making API calls and the server\n  returns an error response.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "or",
        "namespacedName": "O.or",
        "slug": "option/or",
        "title": "Option.or",
        "@description": "Like the `||` operator, but applied to `Option` types.\n\n| Scenario         | Pseudocode               | Outcome                   |\n| :--------------- | :----------------------- | ------------------------- |\n| `Some OR None`   | `pipe(Some, or(None))`   | `Some`                    |\n| `None OR Some`   | `pipe(None, or(Some))`   | `Some`                    |\n| `None1 OR None2` | `pipe(None1, or(None2))` | `None2`                   |\n| `Some1 OR Some2` | `pipe(Some1, or(Some2))` | `Some1` (first Some wins) |",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option"
        ]
      },
      {
        "filePath": "option/unwrap-or-else",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOrElse",
        "namespacedName": "O.unwrapOrElse",
        "slug": "option/unwrap-or-else",
        "title": "Option.unwrapOrElse",
        "@description": "Extract value from a `Some` or from a fallback `() => value` if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/unwrap-or",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrapOr",
        "namespacedName": "O.unwrapOr",
        "slug": "option/unwrap-or",
        "title": "Option.unwrapOr",
        "@description": "Extract value from a `Some` or use a fallback value if a `None`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Option",
          "Recover",
          "Transform",
          "Transform Option",
          "Unwrap"
        ]
      },
      {
        "filePath": "option/unwrap",
        "moduleName": "Option",
        "moduleNameShort": "O",
        "name": "unwrap",
        "namespacedName": "O.unwrap",
        "slug": "option/unwrap",
        "title": "Option.unwrap",
        "@description": "Extract value from a `Some` or throw on a `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Right Biased", "Unsafe", "Unwrap"]
      }
    ],
    "Object": [
      {
        "filePath": "object/is-empty-object",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isEmptyObject",
        "namespacedName": "Obj.isEmptyObject",
        "slug": "object/is-empty-object",
        "title": "Object.isEmptyObject",
        "@description": "Asserts that a value is a valid `Object` containing no instance members.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Objects"]
      },
      {
        "filePath": "object/is-non-empty-object",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isNonEmptyObject",
        "namespacedName": "Obj.isNonEmptyObject",
        "slug": "object/is-non-empty-object",
        "title": "Object.isNonEmptyObject",
        "@description": "Asserts that a value is an `Object` containing at least one own member.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Objects"]
      },
      {
        "filePath": "object/is-null",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isNull",
        "namespacedName": "Obj.isNull",
        "slug": "object/is-null",
        "title": "Object.isNull",
        "@description": "Asserts that a value is `null`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Truthiness"]
      },
      {
        "filePath": "object/is-object",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "isObject",
        "namespacedName": "Obj.isObject",
        "slug": "object/is-object",
        "title": "Object.isObject",
        "@description": "Asserts that a value is an `Object`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Objects"]
      },
      {
        "filePath": "object/index",
        "moduleName": "Object",
        "moduleNameShort": "Obj",
        "name": "AnyRecord",
        "namespacedName": "Obj.AnyRecord",
        "slug": "object/any-record",
        "title": "Object.AnyRecord",
        "@description": "Misc Object",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      }
    ],
    "Result": [
      {
        "filePath": "result/all",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "all",
        "namespacedName": "R.all",
        "slug": "result/all",
        "title": "Result.all",
        "@description": "Takes an array of `Result` values and returns a `Result` containing an array of `Ok` values if all input values are\n`Ok`. If any input value is an `Err`, returns an `Err` containing an array of all encountered `Err` values.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array", "Result"]
      },
      {
        "filePath": "result/and-then",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "andThen",
        "namespacedName": "R.andThen",
        "slug": "result/and-then",
        "title": "Result.andThen",
        "@description": "Same as `flatMap` or `chain`, transform a `Result` with the value of another.\n\nWhen your function returns a `Result` object, you can use `andThen` to transform the `Ok` variant itself.\n\n::: tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\n:::\n\n## Example\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport type { Result } from 'tightrope/result';\nimport { Err, Ok } from 'tightrope/result';\nimport { andThen } from 'tightrope/result/and-then';\nimport { map } from 'tightrope/result/map';\nimport { multiply } from 'tightrope/number/multiply';\nimport { unwrapOr } from 'tightrope/result/unwrap-or';\n\nfunction divide(x: number, y: number): Result<number, Error> {\n  if (y === 0) {\n    return new Err(new Error('Division by zero'));\n  }\n  return new Ok(x / y);\n}\n\nconst amount = pipe(\n  Ok.create<number, Error>(16),\n  andThen((n) => divide(n, 2)),\n  andThen((n) => divide(n, 4)),\n  map(multiply(100)),\n  unwrapOr(0),\n);\n\nconsole.log(amount); // 200\n```\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`andThen` runs on the `Ok` variant. If any of the operations return an `Err` object then `andThen` will skip and\nreturn the `Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `andThen` is sometimes referred to as `chain` or `flatMap`.\n- `Result` is sometimes referred to as `Either`.\n- `Ok` is sometimes referred to as `Right` or \"the happy path\".\n- `Err` is sometimes referred to as `Left` or \"the sad path\".\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.and_then"
        ],
        "@tags": ["Result", "Right Biased", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/and",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "and",
        "namespacedName": "R.and",
        "slug": "result/and",
        "title": "Result.and",
        "@description": "Like the `&&` operator, but applied to `Result` types.\n\nThe `and` function is used to combine two `Result` objects, returning either the first error encountered, or the\nsecond `Ok` value if both `Result` objects are successful.\n\n## Behaviour\n\n`and` behaves just like the `&&` operator, but for support of `Result` types:\n\n| Scenario       | Pseudocode              | Outcome |\n| :------------- | :---------------------- | :------ |\n| `Ok && Err`    | `pipe(Ok, and(Err))`    | `Err`   |\n| `Err && Ok`    | `pipe(Err, and(Ok))`    | `Err`   |\n| `Err1 && Err2` | `pipe(Err1, and(Err2))` | `Err1`  |\n| `Ok1 && Ok2`   | `pipe(Ok1, and(Ok2))`   | `Ok2`   |\n\n## Examples\n\nIn this example, the `and` function is used to combine two `Result` objects (`result1` and `result2`). Since\n`result2` is an `Err` object, the final result is also an `Err` object containing the error message.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { and } from 'tightrope/result/and';\nimport { divide } from 'tightrope/number/divide';\n\nconst result1 = divide(10, 5); // returns Ok(2)\nconst result2 = divide(20, 0); // returns Err(\"Cannot divide by zero\")\n\nconst finalResult = pipe(result1, and(result2));\n\nconsole.log(finalResult); // Err(\"Cannot divide by zero\")\n```\n\nIn this example, the `and` function is used to combine two `Result` objects (`result1` and `result2`). Since both\n`Result` objects are successful, the final result is the second `Ok` value (`Ok(5)`).\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { and } from 'tightrope/result/and';\nimport { divide } from 'tightrope/number/divide';\n\nconst result1 = divide(10, 5); // returns Ok(2)\nconst result2 = divide(20, 4); // returns Ok(5)\n\nconst finalResult = pipe(result1, and(result2)); // returns Ok(5)\n\nconsole.log(finalResult); // Ok(5)\n```",
        "@param": [],
        "@returns": "",
        "@see": ["http://jamiemason.github.io/tightrope/api/result/or"],
        "@tags": ["Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/expect-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "expectErr",
        "namespacedName": "R.expectErr",
        "slug": "result/expect-err",
        "title": "Result.expectErr",
        "@description": "Unwrap an expected `Err` value from a `Result`, or throw if it is an `Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect_err"
        ],
        "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/expect",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "expect",
        "namespacedName": "R.expect",
        "slug": "result/expect",
        "title": "Result.expect",
        "@description": "Extract value from an `Ok` or throw with the given message on an `Err`.\n\nUse `expect` to unwrap a `Result` when you are \"certain\" that the `Result` value will be an `Ok`, and you want to\nextract the value contained in it.\n\nIf the `Result` value ever turns out to be an `Err`, it will throw an `Error` with the given message.\n\n:::warning\n\n`expect` will throw if the `Result` is an `Err`.\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.expect"
        ],
        "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/filter",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "filter",
        "namespacedName": "R.filter",
        "slug": "result/filter",
        "title": "Result.filter",
        "@description": "Keep an `Ok` if its value passes the guard function, or return an `Err`\ncontaining the result of `getErrValue()`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Result", "Right Biased"]
      },
      {
        "filePath": "result/flatten",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "flatten",
        "namespacedName": "R.flatten",
        "slug": "result/flatten",
        "title": "Result.flatten",
        "@description": "Replace nested Results with one `Result` of the inner value.\n\nFlattening only removes one level of nesting at a time\n\n- If given an `Ok` with a normal value, returns the `Ok` as is.\n- If given an `Err` with a normal value, returns the `Err` as is.\n- If given a `Result` with a `Result` value, returns the inner `Result`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.flatten"
        ],
        "@tags": ["Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/from-guard",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "fromGuard",
        "namespacedName": "R.fromGuard",
        "slug": "result/from-guard",
        "title": "Result.fromGuard",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Result", "Wrap"]
      },
      {
        "filePath": "result/from-try",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "fromTry",
        "namespacedName": "R.fromTry",
        "slug": "result/from-try",
        "title": "Result.fromTry",
        "@description": "Create an `Ok` or `Err` from `try...catch`.\n\nThe purpose of `fromTry` is to safely execute a given function and return either an `Ok` instance with the result or\nan `Err` instance with the caught error.\n\nThe function is executed inside a try-catch block and if it runs without errors, `fromTry` returns an `Ok` instance\nwith the result. Otherwise, `fromTry` returns an `Err` instance with the caught error.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Invoke", "Result", "Wrap"]
      },
      {
        "filePath": "result/is-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "isErr",
        "namespacedName": "R.isErr",
        "slug": "result/is-err",
        "title": "Result.isErr",
        "@description": "Check if value is an instance of the `Err` class.\n\nThis can be used to handle error cases in a program flow that uses the `Result` type.\n\nFor example, it can be used to check if the result of a function that returns a `Result` is an `Err` or an `Ok`, and\ntake different actions depending on the outcome.\n\nIt can also be used for validation or error checking, to make sure that the value passed to a function or module is\nof the expected type.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.is_err"
        ],
        "@tags": ["Errors", "Guard", "Result"]
      },
      {
        "filePath": "result/is-ok",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "isOk",
        "namespacedName": "R.isOk",
        "slug": "result/is-ok",
        "title": "Result.isOk",
        "@description": "Check if value is an instance of the `Ok` class.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.is_ok"
        ],
        "@tags": ["Guard", "Result"]
      },
      {
        "filePath": "result/is-result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "isResult",
        "namespacedName": "R.isResult",
        "slug": "result/is-result",
        "title": "Result.isResult",
        "@description": "Check if value is an instance of either the `Ok` or `Err` classes.\n\nYou would use `isResult` when you want to check if a value is a `Result` instance, regardless of whether it contains\nan `Ok` or `Err` variant.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Result"]
      },
      {
        "filePath": "result/map-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapErr",
        "namespacedName": "R.mapErr",
        "slug": "result/map-err",
        "title": "Result.mapErr",
        "@description": "Transform the value inside the `Err` variant of a `Result`.\n\nIf the input `Result` is an `Err`, the function applies `mapFn` to the error value and returns a new `Result` object\nwith the transformed error value. If the input `Result` is an `Ok`, it simply returns the input `Result` object\nunmodified.\n\nThis function is similar to `map`, but instead of transforming the `Ok` value, it transforms the `Err` value.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.map_err"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Value"
        ]
      },
      {
        "filePath": "result/map-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOrElse",
        "namespacedName": "R.mapOrElse",
        "slug": "result/map-or-else",
        "title": "Result.mapOrElse",
        "@description": "Maps a `Result` by applying fallback function default to a contained `Err` value, or a function to a contained `Ok`\nvalue.\n\nThis function can be used to unpack a successful result while handling an error.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/map-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "mapOr",
        "namespacedName": "R.mapOr",
        "slug": "result/map-or",
        "title": "Result.mapOr",
        "@description": "Returns the provided default (if `Err`), or applies a function to the contained value (if `Ok`),\n\nArguments passed to `mapOr` are eagerly evaluated; if you are passing the result of a function call, it is\nrecommended to use `mapOrElse`, which is lazily evaluated.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Result",
          "Right Biased",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/map",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "map",
        "namespacedName": "R.map",
        "slug": "result/map",
        "title": "Result.map",
        "@description": "Transform the value inside the `Ok` variant of a `Result`.\n\nIt takes a `mapFn` function as its argument, which takes the current `Ok` value and returns a new value. The `map`\nfunction then returns a new `Result` object containing the transformed value. If the original `Result` object was an\n`Err`, `map` will return the original `Err` without calling the `mapFn` function.\n\nIn other words, `map` allows you to transform the contents of an `Ok` variant of a `Result` object, while leaving an\n`Err` variant unchanged. It's useful when you need to apply a function to a value inside a `Result` object without\nchanging the structure of the `Result` object itself.\n\n## Example\n\nIn this example, `map` is used twice in the `pipe` function to transform the value inside the `Ok` variant of the\n`Result` object. The final `Result` object contains the result of applying both functions to the original value.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { multiply } from 'tightrope/number/multiply';\nimport { sum } from 'tightrope/number/sum';\nimport { Ok } from 'tightrope/result';\nimport { map } from 'tightrope/result/map';\nimport { unwrap } from 'tightrope/result/unwrap';\n\nconst value: number = pipe(Ok.create(2), map(sum(5)), map(multiply(2)), unwrap);\n\nconsole.log(value); // Output: 14\n```\n\n:::tip\n\nBoth `map` and `andThen` are functions used to transform the value inside a `Result` object. The difference between\nthem is that **`map` transforms the value inside the `Ok` variant** of the `Result` object, while **`andThen`\ntransforms the `Ok` variant itself**.\n\nWhen your function returns a value, you can use `map` to transform the value inside an `Ok` variant.\n\n:::\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::info\n\n`map` runs on the `Ok` variant. If any of the operations return an `Err` object then `map` will skip and return the\n`Err`.\n\nThis makes it easy to handle errors in a functional and composable way.\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.map"
        ],
        "@tags": ["Result", "Right Biased", "Transform", "Transform Value"]
      },
      {
        "filePath": "result/match",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "match",
        "namespacedName": "R.match",
        "slug": "result/match",
        "title": "Result.match",
        "@description": "Extract value from both an `Ok` or an `Err`.\n\nThe match function takes an object containing two functions: `Ok` and `Err`, which are used to handle the values of\nthe `Ok` and `Err` variants of a `Result` object. It then returns a new function that takes a `Result` object and\nreturns the result of applying either the `Ok` or `Err` function to the value inside the `Result`, depending on which\nvariant it contains.\n\n## Example\n\nIn this example, `andThen` is used to transform the `Ok` variant of the `Result` object.\n\n- If the value inside the `Ok` variant is greater than `50`, an `Err` variant containing the error message `\"Value too\n  high\"` is returned.\n- If the value is less than or equal to `50`, an `Ok` variant containing the original value is returned.\n\nThe `match` function is then used to handle the two possible variants of the `Result` object, printing the\nappropriate message to the console.\n\n```ts\nimport { pipe } from 'tightrope/fn/pipe';\nimport { andThen } from 'tightrope/result/and-then';\nimport { Err } from 'tightrope/result';\nimport { match } from 'tightrope/result/match';\nimport { Ok } from 'tightrope/result';\n\nconst result = pipe(\n  60,\n  Ok.create,\n  andThen((value) => (value > 50 ? new Err('Value too high') : new Ok(value))),\n  match({\n    Ok: (value) => `The value is ${value}`,\n    Err: (err) => `Error: ${err}`,\n  }),\n);\n\nconsole.log(result); // Outputs: \"Error: Value too high\"\n```\n\n## Use Cases\n\n`match` is used to destructure and extract the value from a `Result` object and perform different actions based on\nwhether it is an `Ok` or `Err`. This is useful when handling errors or when processing data that may or may not\ncontain errors.\n\nOne common use case for `match` is error handling. When an operation can result in an error, it can return a `Result`\nobject that either contains an `Ok` value or an `Err` value. `match` can be used to handle each case separately, for\nexample to log the error message in case of an `Err` or continue processing with the `Ok` value.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Result", "Unwrap"]
      },
      {
        "filePath": "result/ok",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "ok",
        "namespacedName": "R.ok",
        "slug": "result/ok",
        "title": "Result.ok",
        "@description": "Transforms `Result<T, E>` into `Option<T>`, mapping `Ok(v)` to `Some(v)` and `Err(e)` to `None`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Option", "Result", "Transform", "Transform Result"]
      },
      {
        "filePath": "result/or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "orElse",
        "namespacedName": "R.orElse",
        "slug": "result/or-else",
        "title": "Result.orElse",
        "@description": "Like the `||` operator, but applied to `Result` types with an `() => Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "or",
        "namespacedName": "R.or",
        "slug": "result/or",
        "title": "Result.or",
        "@description": "Like the `||` operator, but applied to `Result` types.\n\n| Scenario       | Pseudocode             | Outcome               |\n| :------------- | :--------------------- | --------------------- |\n| `Ok OR Err`    | `pipe(Ok, or(Err))`    | `Ok`                  |\n| `Err OR Ok`    | `pipe(Err, or(Ok))`    | `Ok`                  |\n| `Err1 OR Err2` | `pipe(Err1, or(Err2))` | `Err2`                |\n| `Ok1 OR Ok2`   | `pipe(Ok1, or(Ok2))`   | `Ok1` (first Ok wins) |",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.or"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Recover",
          "Result",
          "Transform",
          "Transform Result"
        ]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Result",
        "namespacedName": "R.Result",
        "slug": "result/result",
        "title": "Result.Result",
        "@description": "`Result` is a type that represents either success (`Ok`) or failure (`Err`).\n\n`Result<T, E>` is the type used for returning and propagating errors. It is an enum with the variants, `Ok(T)`,\nrepresenting success and containing a value, and `Err(E)`, representing error and containing an error value.\n\n:::info\n\n`Result` allows you to construct a pipeline of commands that handle both the `Ok` and `Err` variants. This is useful\nfor handling errors and branching based on whether the previous operation was successful or not.\n\n:::\n\n:::tip\n\nOther terminology you might have heard:\n\n- `Result` is sometimes referred to as `Either`.\n- `Ok` is sometimes referred to as `Right` or \"the happy path\".\n- `Err` is sometimes referred to as `Left` or \"the sad path\".\n\n:::",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Result", "Type"]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Result",
        "namespacedName": "R.Result",
        "slug": "result/result",
        "title": "Result.Result",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Ok",
        "namespacedName": "R.Ok",
        "slug": "result/ok",
        "title": "Result.Ok",
        "@description": "Represent a correct value in the `Result` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Ok } from 'tightrope/result';\n\nconst value = new Ok('Success!');\n```\n\nYou can check if a value is an `Ok` instance by using the `isOk` function.\n\n```ts\nimport { isOk } from 'tightrope/result/is-ok';\n\nconst value = new Ok('Success!');\nconsole.log(isOk(value)); // true\nconsole.log(isOk('foo')); // false\nconsole.log(isOk('Success! but this is not inside an Ok')); // false\n```\n\n`Ok` instances are usually returned from functions that can fail or encounter an error, and are combined with `Ok`\ninstances using the `Result` type.\n\n## Use Cases\n\nCreating an `Ok` instance directly is useful when you want to represent an error in your program without having to go\nthrough a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an `Ok` instance directly with the error message or code you want to use. This can give you\nmore control over the specific errors that your application can encounter and how they are handled.\n\nAnother use case for creating an `Ok` instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an `Ok` instance directly with a specific error message or code, you\ncan test how your application handles that error condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Result", "Wrap"]
      },
      {
        "filePath": "result/result",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "Err",
        "namespacedName": "R.Err",
        "slug": "result/err",
        "title": "Result.Err",
        "@description": "Represent an erroneous value in the `Result` type.\n\n## Example\n\nHere is how to create one directly:\n\n```ts\nimport { Err } from 'tightrope/result';\n\nconst error = new Err(new Error('Something went wrong.'));\n```\n\nYou can check if a value is an `Err` instance by using the `isErr` function.\n\n```ts\nimport { isErr } from 'tightrope/result/is-err';\n\nconst error = new Err(new Error('Something went wrong.'));\nconsole.log(isErr(error)); // true\nconsole.log(isErr('foo')); // false\nconsole.log(isErr(new Error('not the same thing'))); // false\n```\n\n`Err` instances are usually returned from functions that can fail or encounter an error, and are combined with `Ok`\ninstances using the `Result` type.\n\n## Use Cases\n\nCreating an `Err` instance directly is useful when you want to represent an error in your program without having to\ngo through a pipeline or helper method that might not always be available or suitable for your specific use case.\n\nFor example, if you're writing a custom error handler for your application and you need to represent a specific error\ncondition, you can create an `Err` instance directly with the error message or code you want to use. This can give\nyou more control over the specific errors that your application can encounter and how they are handled.\n\nAnother use case for creating an `Err` instance directly is when you are writing tests for your application and you\nwant to simulate an error condition. By creating an `Err` instance directly with a specific error message or code,\nyou can test how your application handles that error condition and ensure that it behaves as expected.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Class", "Errors", "Result", "Wrap"]
      },
      {
        "filePath": "result/sequence",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "sequence",
        "namespacedName": "R.sequence",
        "slug": "result/sequence",
        "title": "Result.sequence",
        "@description": "Takes an array of `Result` values and returns a `Result` containing an array\nof values if all Results are `Ok`. If any input value is an `Err`, returns\nthe first encountered `Err`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Array", "Result"]
      },
      {
        "filePath": "result/tap",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "tap",
        "namespacedName": "R.tap",
        "slug": "result/tap",
        "title": "Result.tap",
        "@description": "Execute a side effect on the value of an `Ok` or skip if an `Err`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Effect"]
      },
      {
        "filePath": "result/unwrap-err",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapErr",
        "namespacedName": "R.unwrapErr",
        "slug": "result/unwrap-err",
        "title": "Result.unwrapErr",
        "@description": "Extract value from an `Err` or throw on an `Ok`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_err"
        ],
        "@tags": ["Errors", "Result", "Unsafe", "Unwrap"]
      },
      {
        "filePath": "result/unwrap-or-else",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOrElse",
        "namespacedName": "R.unwrapOrElse",
        "slug": "result/unwrap-or-else",
        "title": "Result.unwrapOrElse",
        "@description": "Extract value from an `Ok` or from a fallback `() => Ok` if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or_else"
        ],
        "@tags": [
          "Errors",
          "Left Biased",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/unwrap-or",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrapOr",
        "namespacedName": "R.unwrapOr",
        "slug": "result/unwrap-or",
        "title": "Result.unwrapOr",
        "@description": "Extract value from an `Ok` or use a fallback value if an `Err`",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap_or"
        ],
        "@tags": [
          "Errors",
          "Recover",
          "Result",
          "Transform",
          "Transform Result",
          "Unwrap"
        ]
      },
      {
        "filePath": "result/unwrap",
        "moduleName": "Result",
        "moduleNameShort": "R",
        "name": "unwrap",
        "namespacedName": "R.unwrap",
        "slug": "result/unwrap",
        "title": "Result.unwrap",
        "@description": "Extract value from an `Ok` or throw on an `Err`.",
        "@param": [],
        "@returns": "",
        "@see": [
          "https://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap"
        ],
        "@tags": ["Result", "Right Biased", "Unsafe", "Unwrap"]
      }
    ],
    "String": [
      {
        "filePath": "string/ends-with",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "endsWith",
        "namespacedName": "S.endsWith",
        "slug": "string/ends-with",
        "title": "String.endsWith",
        "@description": "Return true if a given value ends with a specific string.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "String Length", "Strings"]
      },
      {
        "filePath": "string/is-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isEmptyString",
        "namespacedName": "S.isEmptyString",
        "slug": "string/is-empty-string",
        "title": "String.isEmptyString",
        "@description": "Asserts that a value is a valid `String` containing no characters.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": [
          "Emptiness",
          "Guard",
          "String Length",
          "Strings",
          "Truthiness"
        ]
      },
      {
        "filePath": "string/is-iso8601",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "Iso8601",
        "namespacedName": "S.Iso8601",
        "slug": "string/iso8601",
        "title": "String.Iso8601",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "string/is-iso8601",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isIso8601",
        "namespacedName": "S.isIso8601",
        "slug": "string/is-iso8601",
        "title": "String.isIso8601",
        "@description": "Asserts that a value is a String which conforms to common use-cases of the ISO 8601 standard representation of dates\nand times.\n\n- '1999-12-31'\n- '1999-12-31T23:59'\n- '1999-12-31T23:59:59'\n- '1999-12-31T23:59:59.000'\n- '1999-12-31T23:59:59.000Z'\n- '1999-12-31T23:59:59+01:00'\n- '1999-12-31T23:59:59-01:00'\n- '1999-12-31T23:59:59.000+01:00'\n- '1999-12-31T23:59:59.000-01:00'",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Dates", "Guard", "Strings"]
      },
      {
        "filePath": "string/is-json-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "JsonString",
        "namespacedName": "S.JsonString",
        "slug": "string/json-string",
        "title": "String.JsonString",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "string/is-json-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isJsonString",
        "namespacedName": "S.isJsonString",
        "slug": "string/is-json-string",
        "title": "String.isJsonString",
        "@description": "Asserts that a value is a `String` of valid JSON.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "JSON", "Strings"]
      },
      {
        "filePath": "string/is-non-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "NonEmptyString",
        "namespacedName": "S.NonEmptyString",
        "slug": "string/non-empty-string",
        "title": "String.NonEmptyString",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "string/is-non-empty-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isNonEmptyString",
        "namespacedName": "S.isNonEmptyString",
        "slug": "string/is-non-empty-string",
        "title": "String.isNonEmptyString",
        "@description": "Asserts that a value is a valid `String` containing at least one character.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Emptiness", "Guard", "Strings", "Truthiness"]
      },
      {
        "filePath": "string/is-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isString",
        "namespacedName": "S.isString",
        "slug": "string/is-string",
        "title": "String.isString",
        "@description": "Asserts that a value is a `String` or `new String()`.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Strings"]
      },
      {
        "filePath": "string/is-visible-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "VisibleString",
        "namespacedName": "S.VisibleString",
        "slug": "string/visible-string",
        "title": "String.VisibleString",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "string/is-visible-string",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isVisibleString",
        "namespacedName": "S.isVisibleString",
        "slug": "string/is-visible-string",
        "title": "String.isVisibleString",
        "@description": "Asserts that a value is a valid `String` containing at least one character which is not whitespace.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Strings"]
      },
      {
        "filePath": "string/is-whitespace",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "Whitespace",
        "namespacedName": "S.Whitespace",
        "slug": "string/whitespace",
        "title": "String.Whitespace",
        "@description": "",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": []
      },
      {
        "filePath": "string/is-whitespace",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "isWhitespace",
        "namespacedName": "S.isWhitespace",
        "slug": "string/is-whitespace",
        "title": "String.isWhitespace",
        "@description": "Asserts that a value is a `String` containing only whitespace characters.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Guard", "Strings"]
      },
      {
        "filePath": "string/starts-with",
        "moduleName": "String",
        "moduleNameShort": "S",
        "name": "startsWith",
        "namespacedName": "S.startsWith",
        "slug": "string/starts-with",
        "title": "String.startsWith",
        "@description": "Asserts that value is a string whose trailing characters are equal to those of the provided string.",
        "@param": [],
        "@returns": "",
        "@see": [],
        "@tags": ["Comparator", "Guard", "String Length", "Strings"]
      }
    ]
  }
}
